[{"title":"PE研究：IAT表与导入表","url":"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/","content":"<p>我们已经学习过了导出表，导出表记录的是该文件的导出函数。相对应的，导入表记录的是该文件使用的DLL以及DLL中的函数。本章节来学习导入表的工作原理。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"一个有趣的实验\"><a href=\"#一个有趣的实验\" class=\"headerlink\" title=\"一个有趣的实验\"></a>一个有趣的实验</h1><p>先来观察一个现象：</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/1.PNG\"></p>\n<p>将上面这一个小程序使用release版编译，得到一个EXE文件，并使用OD打开它，可以得到该程序<strong>运行时</strong>的内存：<img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/2.PNG\"></p>\n<p>可以看到，在调用MessageBox函数时，反汇编代码是CALL [40509C]，于是在数据窗口我们看到了40509C这个地址存储的是MessageBox函数的地址，很明显77D507EA这个地址位于DLL的领空。</p>\n<p>接下来我们用一个16进制文本编辑器，查看一下该文件在<strong>运行前</strong>的对应地址内存：</p>\n<p>由于需要看的是运行前的地址，因此需要把运行时40509C转化为FOA，先来看一下对齐大小：</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/3.PNG\"></p>\n<p>由于文件对齐与内存对齐是一致的，而且ImageBase为400000，所以转换成FOA为509C。</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/4.PNG\"></p>\n<p>在文件中509C的位置存放的不是运行时的函数的地址，而是一个RVA偏移551C，再次转换为FOA为551C</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/5.PNG\"></p>\n<p>可以看到，在运行前，40509C这个地址存放的是函数名字的RVA偏移，而在运行时，这里面的内容被替换为了真正的函数地址。</p>\n<p>那么这里就出现了一个问题，一般在我们自己写的程序中，我们调用了一个我们自己写的函数，它的反汇编语言应该是call 0x12345678，不管是在程序运行前还是运行后，都是这个表现形式。而这里我们调用了MessageBox，在运行时却是call [0x12345678]，0x12345678在程序运行前后存放的内容是不一样的。</p>\n<p>这里的关键就在于，MessageBox是DLL提供的函数，DLL在被需要时才会被载入内存。这也就是为什么调用MessageBox的时候地址不能写固定的地址，因为DLL有可能被重定位。</p>\n<h1 id=\"导入表结构\"><a href=\"#导入表结构\" class=\"headerlink\" title=\"导入表结构\"></a>导入表结构</h1><p>目录项的第二张表就是导入表，通过将RVA转换成FOA，可以在FileBuffer中定位它，导入表结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span>\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span>\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">        DWORD   Characteristics;           \t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">        DWORD   OriginalFirstThunk;\t\t<span class=\"comment\">//RVA，指向IMAGE_THUNK_DATA结构数组，INT表\t\t\t</span></span><br><span class=\"line\">    &#125;;\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   TimeDateStamp;\t\t\t\t<span class=\"comment\">//时间戳\t\t\t</span></span><br><span class=\"line\">    DWORD   ForwarderChain;              \t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Name;\t\t\t\t\t\t<span class=\"comment\">//RVA，指向dll名字，该名字已0结尾\t\t\t</span></span><br><span class=\"line\">    DWORD   FirstThunk;\t\t\t\t\t<span class=\"comment\">//RVA，指向IMAGE_THUNK_DATA结构数组，IAT表\t\t\t</span></span><br><span class=\"line\">&#125; IMAGE_IMPORT_DESCRIPTOR;\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>在PE文件加载前，IAT表与INT表内容相同，存储的都是函数的名字或者导出序号：</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/6.PNG\"></p>\n<p>在PE文件加载后，IAT表的内容被替换为对应函数的地址：</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/7.PNG\"></p>\n<p>一个该导入表结构对应着一个DLL文件，里面记录了导入该DLL中的函数，在PE文件中有很多个导入表结构连在一起，以一个导入表结构大小的0为结尾。</p>\n<p>下面依次说明各个字段</p>\n<p>1、OriginalFirstThunk</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/8.PNG\"></p>\n<p>指向INT表，表里面的内容是一个IMAGE_THUNK_DATA32结构，该结构实际上是一个4字节的数据，当最高位为0代表这是一个RVA，指向一个结构，该结构如上图所示，该结构指向导入函数名字；当最高位为1是，除去最高位剩下的31位代表函数的序号。</p>\n<p>2、Name</p>\n<p>该字段是一个RVA，指向一个DLL的名字。</p>\n<p>3、FirstThunk</p>\n<p>指向IAT表，该表结构在文件运行前与INT表内容一致(理论上)，在运行时IAT表被系统替换为对应函数的地址。</p>\n<p>注意我这里写的是理论上，因为有可能有一些函数地址在实际运行前就已经写进了IAT表。我们称这种现象为绑定导入，记录这些函数信息的表叫做绑定导入表，我们这里不做赘述。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：PE文件的加载","url":"/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/","content":"<p>PE文件是Windows操作系统下使用的32位可执行文件格式。关于PE文件的结构以及各字段的意义，网络上有很详细的资料，这里不再赘述(或者用到的时候再说明)。本版块主要涉及Windows下的一些小应用。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"PE文件的加载过程\"><a href=\"#PE文件的加载过程\" class=\"headerlink\" title=\"PE文件的加载过程\"></a>PE文件的加载过程</h1><p>首先要知道，PE文件有在磁盘上与在内存中的两种状态。如下图所示</p>\n<p><img src=\"/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/1.PNG\"></p>\n<p>可以看到，这两种状态大体的结构布局是一致的，但是占用的内存大小是不同的，而且两者对齐的大小<strong>有可能</strong>不同。说是有可能，是因为PE文件在磁盘上的对齐方式为FileAlignment，其值可能为0x200h或者0x1000h，而在内存中的对齐方式为SectionAlignment，其值一般为0x1000h。</p>\n<p>Windows系统将PE文件从磁盘读入内存并执行的过程中，就存在上面的这个“拉伸”的过程。DOS头和NT头以及块表位置与大小不变，剩下的各个节按照对齐方式对齐。现在可以将PE文件的加载过程总结如下：</p>\n<p>1、将文件从磁盘读取并拷贝到内存中，这时内存中的布局与在磁盘上的布局是一样的，拷贝在内存中的地址我们一般称为FileBuffer。</p>\n<p>2、根据SizeOfImage的大小，开辟一块缓冲区，将来“拉伸”后的内容就会放到这里面，这个地址我们一般称为ImageBuffer。这块内存会被放入4GB大小的进程空间中。</p>\n<p>3、根据SizeOfHeader的大小，将头信息从FileBuffer拷贝到ImageBuffer。</p>\n<p>4、根据节表中的信息循环将FileBuffer中的节拷贝到ImageBuffer中。</p>\n<p><img src=\"/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/2.PNG\"></p>\n<p>在“拉伸”完毕后，程序还不能跑起来，Windows系统还需要做一些收尾的工作才能运行。后续我们会通过代码来模拟这一过程。</p>\n<h1 id=\"PE文件拉伸与还原的实现\"><a href=\"#PE文件拉伸与还原的实现\" class=\"headerlink\" title=\"PE文件拉伸与还原的实现\"></a>PE文件拉伸与还原的实现</h1><p>前面提到过，一个PE文件从磁盘被读入并拉伸后，还不能立即运行起来。现在我们要实现这样的功能，将PE文件读入内存并拉伸，然后再将拉伸后的内容还原回原来的PE文件并存盘，该文件是可以双击运行的。如图：</p>\n<p><img src=\"/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/3.PNG\"></p>\n<p>各个模块实现代码如下(PE的各结构定义这里不再赘述)</p>\n<p><strong>1、将文件读入内存，并返回FileBuffer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">Read_exe</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE* fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tfp = fopen(<span class=\"string\">&quot;C:\\\\Windows\\\\System32\\\\notepad.exe&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>);\t<span class=\"comment\">//这里存放要读取的PE文件</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!fp)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;无法打开 EXE 文件!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsize = getlength(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FileBuffer = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(FileBuffer != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfread(FileBuffer, size, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Wrong!\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FileBuffer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//获取文件的大小</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getlength</span><span class=\"params\">(FILE* fp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">\tsize = ftell(fp);</span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0</span>, SEEK_SET);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、将读入内存的文件拉伸，并返回ImageBuffer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">file_to_image</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 完成初始化工作 */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FileBuffer = Read_exe();</span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)FileBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew +<span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\t<span class=\"type\">int</span> SizeOfImage = (<span class=\"type\">int</span>)poph-&gt;SizeOfImage;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(SizeOfImage);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(ImageBuffer, <span class=\"number\">0</span>, SizeOfImage);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> size_part1 = <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">//计算头与节表的大小之和</span></span><br><span class=\"line\">\tsize_part1 = ((image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph))-&gt;PointerToRawData;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(ImageBuffer, FileBuffer, size_part1);    <span class=\"comment\">//将文件头与节表复制到imagebuffer中</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> numofsections = (<span class=\"type\">int</span>)(pph-&gt;NumberOfSection);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; numofsections; i++)          <span class=\"comment\">//循环将每个节复制到imagebuffer中</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* des = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)ImageBuffer + pish-&gt;VirtualAddress);</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* src = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)FileBuffer + pish-&gt;PointerToRawData);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> size = (<span class=\"type\">int</span>)(pish-&gt;SizeOfRawData);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(des, src, size);</span><br><span class=\"line\">\t\tpish++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ImageBuffer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、将拉伸后的内容还原为原来的PE文件，并存盘</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>*  <span class=\"title function_\">image_to_file</span><span class=\"params\">(<span class=\"type\">char</span>* ImageBuffer)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 完成初始化工作 */</span></span><br><span class=\"line\">\t<span class=\"comment\">//char* ImageBuffer = file_to_image();</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize = (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData) + (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* NewBuffer = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(NewBuffer, <span class=\"number\">0</span>, size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 计算头与节表的大小之和,将文件头与节表复制到newbuffer中 */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size_part1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize_part1 = (<span class=\"type\">int</span>)pish-&gt;VirtualAddress;</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(NewBuffer, ImageBuffer, size_part1);\t\t<span class=\"comment\">//将文件头与节表复制到Newbuffer中</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> numofsections = (<span class=\"type\">int</span>)(pph-&gt;NumberOfSection);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; numofsections; i++)\t\t\t<span class=\"comment\">//循环将每个节复制到Newbuffer中</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* des = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)NewBuffer + pish-&gt;PointerToRawData);</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* src = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)ImageBuffer + pish-&gt;VirtualAddress);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> size = (<span class=\"type\">int</span>)(pish-&gt;SizeOfRawData);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(des, src, size);</span><br><span class=\"line\">\t\tpish++;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"comment\">//存盘</span></span><br><span class=\"line\">\tFILE* pfp = fopen(<span class=\"string\">&quot;C:\\\\Documents and Settings\\\\easy\\\\桌面\\\\test.exe&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\tfwrite(NewBuffer, size, <span class=\"number\">1</span>, pfp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> NewBuffer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经测试，还原后的文件可以正常运行。</p>\n<h1 id=\"RVA与FOA转化的实现\"><a href=\"#RVA与FOA转化的实现\" class=\"headerlink\" title=\"RVA与FOA转化的实现\"></a>RVA与FOA转化的实现</h1><p>不论是在以后分析PE文件，还是做其他相关的事情，RVA(内存中的偏移)和FOA(文件中的偏移)之间的相互转换都是很重要的。转换大体思路就是先判断该地址是位于PE头还是节中，若是在PE头中，则地址不变，若是在节中，则要找出该地址位于哪个节，然后计算差值即可。</p>\n<p><strong>RVA转换为FOA</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span>* <span class=\"title\">RVA_TO_FOA</span><span class=\"params\">(<span class=\"type\">char</span>* RVA)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* FileBuffer = <span class=\"built_in\">Read_exe</span>();</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = <span class=\"built_in\">file_to_image</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)FileBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">    \t<span class=\"comment\">//如果该地址在头中，则不变</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((<span class=\"type\">int</span>)RVA &lt;= poph-&gt;SizeOfHeaders)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> RVA;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    \t<span class=\"comment\">//如果该地址在节中</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; pph-&gt;NumberOfSection; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            \t<span class=\"comment\">//找出RVA位于哪个节</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((<span class=\"type\">int</span>)RVA &gt;= (pish-&gt;VirtualAddress) &amp;&amp; (<span class=\"type\">int</span>)RVA &lt; (pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">                <span class=\"comment\">//加上差值即可</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">return</span> (RVA - pish-&gt;VirtualAddress) + pish-&gt;PointerToRawData;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tpish++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FOA转换为RVA代码基本一致，只是反过来而已。需要注意的是在ImageBuffer中，判断位于哪个节的依据是VirtualAddress+Misc，而在FileBuffer中判断的依据是PointerToRawData+SizeOfRawData。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：代码节空白区添加代码","url":"/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/","content":"<p>代码节是PE结构中的一个节区，一般用于存放代码段。本节来做一个小实验，向代码节的空白区添加代码。实现的功能是，双击运行记事本文件时，先弹出一个对话框，关掉后才能运行记事本程序。</p>\n<span id=\"more\"></span>\n\n<p>这个实验大致的一种思路可以是，将MessageBox(0, 0, 0, 0)这段代码加入到目标程序中，修改程序的入口点，让它指向我们新加入的这段代码，然后再让程序跳回到原来的入口点执行原来的程序。但是这里有一个问题，就是我们是向已经存在的程序加入代码，不可能直接将MessageBox(0, 0, 0, 0)这个代码直接放进去，而是应该将其转化为<strong>shellcode</strong>二进制代码，再放进去。</p>\n<p>具体步骤如下：</p>\n<p><strong>1、获取MessageBox地址，构造shellcode。</strong></p>\n<p>打开OD，随便拖入一个文件，在命令行中输入bp MessageBoxA，然后打开断点视图，双击到断点处，得到MessageBox的地址。</p>\n<p><img src=\"/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/1.PNG\"></p>\n<p>我这里的地址为77D507EA，不同的机器地址不一样。</p>\n<p>还需要注意的是，在调用MessageBox时，还需要push4个参数，push的硬编码为0x6A。因此我们构造出来的shellcode为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> shellcode1[] = </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE9</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、读取文件，判断代码节(一般都是第一个节)空白区域能否放得下前面的shellcode(这里是18字节)。</strong></p>\n<p><strong>3、将shellcode加入代码节空白区域。</strong></p>\n<p><strong>4、修改E8与E9</strong></p>\n<p>本程序的流程是，通过程序入口(OEP)进入到我们的shellcode，我们的shellcode完成的任务是调用(call)MessageBox函数，然后再跳(jmp)回去。call的硬编码是E8，后面跟了一个地址(4个字节)，jmp的硬编码是E9，后面跟了一个地址(4个字节)。先来研究一下后面跟的地址的计算规则：</p>\n<p><img src=\"/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/2.PNG\"></p>\n<p>公式为：真正要跳转的地址 &#x3D; E8这条指令的下一行地址 + X，而E8指令的长度为5字节。因此，公式可以转化为：要跳转的地方 &#x3D; E8当前的地址 + 5 + X，**X &#x3D; 要跳转的地址 - (E8的地址 + 5)**。E9的公式同理。</p>\n<p><strong>5、修改OEP</strong></p>\n<p><strong>注：如果加在别的节中，还需要修改节属性。</strong></p>\n<p>现在还有一个问题，就是我们加入的shellcode，是加在FileBuffer中呢，还是加在ImageBuffer中呢？答案是ImageBuffer中，因为在shellcode中涉及到地址，这个地址是拉伸后准备运行的地址。当然，如果将shellcode加在FileBuffer中也是可以的，只不过需要多一步，将shellcode中的地址从FOA转换为RVA。</p>\n<p>现在基本没有什么问题了，直接上代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MessageBoxAddr 0x77D507EA</span></span><br><span class=\"line\"><span class=\"type\">char</span> shellcode1[] = </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE9</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> shellcode_length1 = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 编程实现在代码节添加MessageBox函数代码，弹出框 */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">add_shellcode</span><span class=\"params\">(<span class=\"type\">char</span>* ImageBuffer)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 定义各文件头 */</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 判断第一个节的空白区域是否大于18字节 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((((pish+<span class=\"number\">1</span>)-&gt;VirtualAddress) - (pish-&gt;VirtualAddress) - pish-&gt;Misc.VirtualAddress) &lt; <span class=\"number\">18</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;无法添加代码!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 将shellcode加入代码节空白区域 */</span></span><br><span class=\"line\">    <span class=\"comment\">//注意这里要加ImageBuffer</span></span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>((<span class=\"type\">char</span>*)(pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress + (<span class=\"type\">int</span>)ImageBuffer), shellcode1, shellcode_length1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 修改E8 */</span></span><br><span class=\"line\">    <span class=\"comment\">//E8后面的地址，为MessageBox()地址 - E8下一条语句的地址</span></span><br><span class=\"line\">    <span class=\"comment\">//这个下一条地址应该是对齐后加上imagebase地址，因为程序已经跑起来了</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> CallAddr = (<span class=\"type\">int</span>)(MessageBoxAddr - (pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress + <span class=\"number\">13</span> + poph-&gt;ImageBase));</span><br><span class=\"line\">\t<span class=\"type\">int</span>* addr1 = (<span class=\"type\">int</span>*)(pish-&gt;VirtualAddress + (<span class=\"type\">int</span>)ImageBuffer + pish-&gt;Misc.VirtualAddress + <span class=\"number\">9</span>);</span><br><span class=\"line\">\t*addr1 = CallAddr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 修改E9 */</span> </span><br><span class=\"line\">    <span class=\"comment\">//注意都要加上ImageBase</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> RetAddr = (<span class=\"type\">int</span>)(poph-&gt;AddressOfEntryPoint + poph-&gt;ImageBase - (pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress + <span class=\"number\">18</span> + poph-&gt;ImageBase));</span><br><span class=\"line\">\t<span class=\"type\">int</span>* addr2 = (<span class=\"type\">int</span>*)(pish-&gt;VirtualAddress + (<span class=\"type\">int</span>)ImageBuffer + pish-&gt;Misc.VirtualAddress + <span class=\"number\">14</span>);</span><br><span class=\"line\">\t*addr2 = RetAddr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 修改OEP */</span></span><br><span class=\"line\">    <span class=\"comment\">//OEP本来存的就是RVA，不需要加ImageBase</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> OEP = (<span class=\"type\">int</span>)(pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress);</span><br><span class=\"line\">\tpoph-&gt;AddressOfEntryPoint = OEP;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前面提过，这段代码执行前要先拉伸，执行完毕后再还原回去存盘即可。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：导出表与重定位表","url":"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/","content":"<p>在学习PE结构的过程中，最重要的能力之一就是对各种表的理解与运用。本章将会对导出表与重定位表的工作原理进行剖析，并给出代码解析这两张表。在我的GitHub中有一个用C和win32写的PE工具项目，里面有完整的源码，实现了对PE文件的解析以及其他功能，需要的可以去我的GitHub查看。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"导出表\"><a href=\"#导出表\" class=\"headerlink\" title=\"导出表\"></a>导出表</h1><p>一般情况下，一个DLL文件提供函数给别的程序使用，一个EXE文件使用DLL提供的函数。那么其他程序如何才能在DLL中找到找到对应的函数呢？答案就是导出表。导出表里面记录了该文件对外提供了哪些函数，以及导出的方式(以序号导出和以函数名称导出)。</p>\n<h2 id=\"如何定位导出表\"><a href=\"#如何定位导出表\" class=\"headerlink\" title=\"如何定位导出表\"></a>如何定位导出表</h2><p>可选PE头的最后一个结构，是数据目录项(IMAGE_DATA_DIRECTORY)，这是一个16项数组，每一项的结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">image_data_directory</span>\t\t//数据目录</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> VirtualAddress;\t\t<span class=\"comment\">//RVA</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> Size;\t\t\t<span class=\"comment\">//大小</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在这16项中，前15项分别对应了15张表，最后一项保留。其中第一张就是导出表。</p>\n<h2 id=\"导出表结构\"><a href=\"#导出表结构\" class=\"headerlink\" title=\"导出表结构\"></a>导出表结构</h2><p>上面的结构，只是说明导出表在哪里，有多大，并不是真正的导出表。<strong>想在磁盘文件(FileBuffer)中找到导出表，必须先将上面的RVA转换成FOA</strong>。导出表结构如下</p>\n<p><img src=\"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/1.PNG\"></p>\n<p>在导出表结构中有三个RVA，分别指向了三张表。想要在FileBuffer中定位它们，一样需要转换成FOA。</p>\n<h2 id=\"AddressOfFunctions说明\"><a href=\"#AddressOfFunctions说明\" class=\"headerlink\" title=\"AddressOfFunctions说明\"></a>AddressOfFunctions说明</h2><p>这张表里面的内容是导出函数的地址。宽度为4字节(即一个地址的宽度)，数量为导出表结构中的NumberOfFunctions。<strong>该表中存储的地址是RVA</strong>，需要加上ImageBase才是运行时函数的地址。</p>\n<p>另外许需要注意的是，这个NumberOfFunctions的值有可能不是真正导出函数的数量。因为这个值是系统根据公式：<strong>NumberofFunctions &#x3D; 导出函数最大序号 - 最小序号 + 1</strong> 得到的。因此如果导出函数序号不连续的话，函数地址表中的地址数量就会多于导出函数的数量，多出来的部分用0填补。</p>\n<h2 id=\"AddressOfNames说明\"><a href=\"#AddressOfNames说明\" class=\"headerlink\" title=\"AddressOfNames说明\"></a>AddressOfNames说明</h2><p>这张表里面的内容是导出函数名称的地址(注意不是函数名称)。宽度同样为4字节，数量为导出表结构中的NumberOfNames。<strong>该表中存储的地址是以名字导出函数的名字的RVA</strong>，想要打印出来导出函数的名字，需要将RVA转换成FOA。</p>\n<p><img src=\"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/2.PNG\"></p>\n<p>函数名称在文件中的位置是不确定的，但是在函数名称地址表中，一定是按照字母顺序排序的。</p>\n<h2 id=\"AddressOfNameOrdinals说明\"><a href=\"#AddressOfNameOrdinals说明\" class=\"headerlink\" title=\"AddressOfNameOrdinals说明\"></a>AddressOfNameOrdinals说明</h2><p>这张表里面存储的是序号(不是真正的函数序号，可以理解成偏移)。宽度为2字节，数量与AddressOfNames表相等，都为NumberOfNames。需要注意的是，该表中存储的内容 + Base &#x3D; 函数的导出序号。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1、为什么需要分成三张表？</p>\n<p>因为函数导出的个数与函数名的个数未必一样，所以要将函数地址表和函数名称表分开。</p>\n<p>2、函数地址表是不是一定大于等于函数名称表？</p>\n<p>不一定，因为有可能有多个函数的名字指向同一个函数地址。</p>\n<p>3、系统是如何根据一个函数的名字确定函数的地址的？</p>\n<p><img src=\"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/3.PNG\"></p>\n<p>首先根据函数名称，搜索函数名称表，利用这个函数名称的索引直接索引到函数序号表，得到对应的函数序号表的内容，将这个值作为函数地址表的索引，便得到了函数地址RVA，最后加上ImageBase，便可在运行时找到对应的函数。</p>\n<p>4、系统是如何根据函数的导出序号获取一个函数的地址？</p>\n<p>直接看张图即可</p>\n<p><img src=\"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/4.PNG\"></p>\n<p>最后给出两个函数，分别模拟系统根据名字和序号找到对应的函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过函数名称找到对应函数地址，参数为filebuffer和函数名称</span></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">Get_Func_Addr_by_Name</span><span class=\"params\">(<span class=\"type\">char</span>* filebuffer, <span class=\"type\">char</span>* FuncName)</span></span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\t<span class=\"type\">char</span>* Func_Addr = <span class=\"literal\">NULL</span>;      <span class=\"comment\">//声明导出函数指针</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdos_header* pdosh = (dos_header*)filebuffer;</span><br><span class=\"line\">\tpe_header* ppeh = (pe_header*)((pdosh-&gt;e_lfanew) + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdosh);</span><br><span class=\"line\">\toptional_pe_header* popeh = (optional_pe_header*)((<span class=\"type\">int</span>)ppeh + <span class=\"number\">20</span>);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)((<span class=\"type\">int</span>)popeh + ppeh-&gt;SizeOfOptionalHeader);</span><br><span class=\"line\">\timage_export_directory* pied = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 定位到导出表，找到导出表的全部信息，包括最后三个表的地址 */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* export_rva = (<span class=\"type\">char</span>*)popeh-&gt;DataDirectory[<span class=\"number\">0</span>].VirtualAddress;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* export_foa = RVA_TO_FOA(export_rva);</span><br><span class=\"line\">\tpied = (image_export_directory*)(export_foa + (<span class=\"type\">int</span>)filebuffer);                  <span class=\"comment\">//导出表指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* pName_Addr = (<span class=\"type\">int</span>*)(RVA_TO_FOA((<span class=\"type\">char</span>*)pied-&gt;AddressOfNames) + (<span class=\"type\">int</span>)filebuffer);                <span class=\"comment\">//AddressOfNames表指针</span></span><br><span class=\"line\">\t<span class=\"type\">short</span>* pOrdinal_Addr = (<span class=\"type\">short</span>*)(RVA_TO_FOA((<span class=\"type\">char</span>*)pied-&gt;AddressOfNameOrdinals) + (<span class=\"type\">int</span>)filebuffer);  <span class=\"comment\">//AddressOfNameOrdinals</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* pFunc_Addr = (<span class=\"type\">int</span>*)(RVA_TO_FOA((<span class=\"type\">char</span>*)pied-&gt;AddressOfFunctions) + (<span class=\"type\">int</span>)filebuffer);            <span class=\"comment\">//AddressOfFunctions</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 循环遍历name地址表，匹配函数名 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; pied-&gt;NumberOfNames; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>((<span class=\"type\">char</span>*)(*(pName_Addr + i) + (<span class=\"type\">int</span>)filebuffer), FuncName) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tFunc_Addr = (<span class=\"type\">char</span>*)(*(pFunc_Addr + *(pOrdinal_Addr + i)));</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;RVA:%x\\n&quot;</span>, Func_Addr);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Func_Addr;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;没有这个函数!\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过导出函数序号找到对应函数地址，参数为filebuffer和导出函数序号</span></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">Get_Func_Addr_by_Ordinals</span><span class=\"params\">(<span class=\"type\">char</span>* filebuffer, <span class=\"type\">int</span> ordinals)</span></span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\t<span class=\"type\">char</span>* Func_Addr = <span class=\"literal\">NULL</span>;      <span class=\"comment\">//声明导出函数指针</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdos_header* pdosh = (dos_header*)filebuffer;</span><br><span class=\"line\">\tpe_header* ppeh = (pe_header*)((pdosh-&gt;e_lfanew) + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdosh);</span><br><span class=\"line\">\toptional_pe_header* popeh = (optional_pe_header*)((<span class=\"type\">int</span>)ppeh + <span class=\"number\">20</span>);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)((<span class=\"type\">int</span>)popeh + ppeh-&gt;SizeOfOptionalHeader);</span><br><span class=\"line\">\timage_export_directory* pied = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 定位到导出表，找到导出表的全部信息，只需要AddressOfFunctions表 */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* export_rva = (<span class=\"type\">char</span>*)popeh-&gt;DataDirectory[<span class=\"number\">0</span>].VirtualAddress;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* export_foa = RVA_TO_FOA(export_rva);</span><br><span class=\"line\">\tpied = (image_export_directory*)(export_foa + (<span class=\"type\">int</span>)filebuffer);                  <span class=\"comment\">//导出表指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* pFunc_Addr = (<span class=\"type\">int</span>*)(RVA_TO_FOA((<span class=\"type\">char</span>*)pied-&gt;AddressOfFunctions) + (<span class=\"type\">int</span>)filebuffer);  <span class=\"comment\">//AddressOfFunctions</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tFunc_Addr = (<span class=\"type\">char</span>*)(*(pFunc_Addr + (ordinals - pied-&gt;Base)));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;RVA:%x\\n&quot;</span>, Func_Addr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Func_Addr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"重定位表\"><a href=\"#重定位表\" class=\"headerlink\" title=\"重定位表\"></a>重定位表</h1><h2 id=\"程序加载的过程\"><a href=\"#程序加载的过程\" class=\"headerlink\" title=\"程序加载的过程\"></a>程序加载的过程</h2><p>在前面的章节中，已经笼统地阐述过一个程序是如何加载到内存并运行起来的。现在再做一个补充说明</p>\n<p><img src=\"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/5.PNG\"></p>\n<p>可以看到，一个EXE文件在运行前，系统会加载很多该程序需要用到的DLL到低2G的高领空。高2G留给内核使用。下面做几点特别说明：</p>\n<p>1、一般情况下，一个EXE文件是可以根据它的ImageBase来进行加载的，因为EXE文件拥有它自己独立的4GB内存空间。而DLL却不行，因为DLL是有EXE文件需要使用它，它才加载到相关EXE的进程空间的。</p>\n<p>2、一个程序可能会用到很多DLL，而每个DLL默认的ImageBase均为0x10000000h，显然不可能每个DLL都会加载到该地址，它们只能在后面的地址加载。</p>\n<p>3、为了提高搜索的速度，模块(DLL)间地址也是要对齐的，模块地址对齐为10000H 也就是64K。所以DLL文件的起始地址要10000H对齐。</p>\n<h2 id=\"为什么要使用重定位表\"><a href=\"#为什么要使用重定位表\" class=\"headerlink\" title=\"为什么要使用重定位表\"></a>为什么要使用重定位表</h2><p>在前面逆向的章节中，我们已经知道，一个全局变量在反汇编中，地址是写死的。这个地址计算的公式是：编译时生成的地址 &#x3D; ImageBase + RVA。这个地址在程序编译完成后，已经写入文件了。</p>\n<p>那么现在来假设一种情况，程序在加载的时候，没有按照ImageBase的地址0x400000h加载，而是加载到了0x500000h这个地址，可是因为全局变量在加载前已经写死了(RVA加的是ImageBase的值)，程序执行的时候仍然会按照原来的地址群寻找这个变量，可是很明显，该全局变量已的位置已经改变了。</p>\n<p>1、也就是说，如果程序能够按照预定的ImageBase来加载的话，那么就不需要重定位表。这也是为什么exe很少有重定位表，而DLL大多都有重定位表的原因。</p>\n<p>2、一旦某个模块没有按照ImageBase进行加载，那么所有类似上面中的地址就都需要修正，否则，引用的地址就是无效的。</p>\n<p>3、一个EXE中，需要修正的地方会很多，那我们如何来记录都有哪些地方需要修正呢？答案就是重定位表。</p>\n<h2 id=\"重定位表结构解析\"><a href=\"#重定位表结构解析\" class=\"headerlink\" title=\"重定位表结构解析\"></a>重定位表结构解析</h2><p>数据目录项的第6个结构就是重定位表。通过第6项的VirtualAddress转换成FOA即可找到重定位表。结构如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_BASE_RELOCATION</span> &#123;</span>\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   VirtualAddress;\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SizeOfBlock;\t\t\t\t\t\t</span><br><span class=\"line\">&#125; IMAGE_BASE_RELOCATION;\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> IMAGE_BASE_RELOCATION, * PIMAGE_BASE_RELOCATION;\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>看一张更清楚的结构图，有很多块该结构组成</p>\n<p><img src=\"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/6.PNG\"></p>\n<p>解析说明：</p>\n<p>1、判断一共有几块数据：最后一个结构的VirtualAddress与SizeOfBlock都为0。</p>\n<p>2、具体项，宽度为2字节(16位)。在内存中，页的大小是0x1000H，也就是用2的12次方就可以表示一个页内的所有偏移。因此在16位的具体项中，低12位就代表这个偏移。高4位只有两种可能，当高4位值为3时，代表的是需要修改的数据；高4位值为0时，代表该数据是用于对齐的，可以不用管。因此我们只关注高4位值为3的数据。</p>\n<p>3、VirtualAddress，宽度是4字节，代表的是当前这一页的基址。真正的RVA &#x3D; VirtualAddress + 具体项的低12位。注意得到的是RVA。</p>\n<p>4、SizeOfBlock，宽度是4字节，代表的是当前块的总大小(比如上图中绿色、黄色块的大小)。具体项的数量 &#x3D; (SizeOfBlock - 8)&#x2F;2。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：导入表注入","url":"/2022/05/05/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/","content":"<p>前一章节我们学习了导入表的原理。我们知道，一个EXE文件在需要用到DLL时，会根据导入表加载相关的DLL。因此如果我们通过修改导入表，来达到加载我们自己的DLL的目的，这就是导入表注入。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"注入的种类\"><a href=\"#注入的种类\" class=\"headerlink\" title=\"注入的种类\"></a>注入的种类</h1><p>所谓注入的本质，就是让一个程序能够执行我们自己的代码。在介绍导入表的原理与实现之前，先来说一下注入的大致分类：</p>\n<p>1、注册表注入</p>\n<p>2、导入表注入</p>\n<p>3、特洛伊注入(DLL劫持)</p>\n<p>4、远程线程注入</p>\n<p>5、无DLL注入</p>\n<p>6、APC注入</p>\n<p>7、Windows挂钩注入</p>\n<p>8、输入法注入</p>\n<p>在文章开头已经介绍过了导入表注入的原理，其他的注入类型读者可以自行了解，其中一些注入我们后续也会涉及到，到那时候再继续做讲解。</p>\n<h1 id=\"导入表注入的步骤\"><a href=\"#导入表注入的步骤\" class=\"headerlink\" title=\"导入表注入的步骤\"></a>导入表注入的步骤</h1><p>导入表注入的过程大致是通过新增一个节，将原来的各个导入表移动到新增的节中，然后追加INT表和IAT表，并做相应的修改，具体步骤如下：</p>\n<p>1、首先需要在原本的导入表后面新增一个导入表，但是我们知道，系统通过一块导入表结构大小的内存为0时来判断导入表的结束，因此需要预留足够的空间来添加一个新的导入表。为了简便，我在这里直接添加了一个节。</p>\n<p>2、修改目录项中导入表的地址与大小为新的值。</p>\n<p>3、追加8个字节INT表与8个字节的IAT表，因为这两个表宽度为4字节，并且还要预留4字节的0作为结尾。并修改最后一个导入表的OriginalFistThunk与FistThunk。</p>\n<p>4、追加一个IMAGE_IMPORT_BY_NAME 结构，前2个字节是0 后面是函数名称字符串，并将该结构的RVA赋值给INT和IAT表中的第一项</p>\n<p>5、分配空间存储DLL名称字符串 并将该字符串的RVA赋值给Name属性</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 代码实现导入表注入 */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Inject_Import_Table</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//第一步：在DLL中新增一个节，并返回新增后的FOA</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = file_to_image();</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer2 = AddSection(ImageBuffer, <span class=\"number\">0x1000</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* NewBuffer = image_to_file(ImageBuffer2);</span><br><span class=\"line\"></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)NewBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>* importtable_rva = (<span class=\"type\">char</span>*)poph-&gt;DataDirectory[<span class=\"number\">1</span>].VirtualAddress;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* importtable_foa = RVA_TO_FOA(importtable_rva);</span><br><span class=\"line\">\timage_import_directory* piid = (image_import_directory*)(importtable_foa + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FOA_add = (<span class=\"type\">char</span>*)(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第二步：移动原导入表到新增节中</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_import_table = (<span class=\"type\">char</span>*)(RVA_TO_FOA((<span class=\"type\">char</span>*)poph-&gt;DataDirectory[<span class=\"number\">1</span>].VirtualAddress) + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_import_table = (<span class=\"type\">char</span>*)(FOA_add + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">int</span> Size_import = poph-&gt;DataDirectory[<span class=\"number\">1</span>].Size;</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_import_table, src_import_table, Size_import);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第三步：修复目录项中的地址值，指向新的IMAGE_IMPORT_TABLE, 注意转换成RVA</span></span><br><span class=\"line\">\tpoph-&gt;DataDirectory[<span class=\"number\">1</span>].VirtualAddress = (<span class=\"type\">int</span>)FOA_add - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData</span><br><span class=\"line\">\t\t                                   + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//第四步: 在新的导入表后面，追加一个导入表，并修正目录项中的Size值</span></span><br><span class=\"line\">\timage_import_directory* New_piid = (image_import_directory*)((<span class=\"type\">int</span>)des_import_table + Size_import - <span class=\"number\">20</span>);</span><br><span class=\"line\">\tpoph-&gt;DataDirectory[<span class=\"number\">1</span>].Size += <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第五步: 追加8个字节的INT表, 8个字节的IAT表, 并修改导入表两个地址值，注意修改为RVA</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* p_INT = (<span class=\"type\">int</span>*)((<span class=\"type\">int</span>)New_piid + <span class=\"number\">40</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span>* p_IAT = (<span class=\"type\">int</span>*)((<span class=\"type\">int</span>)p_INT + <span class=\"number\">8</span>);</span><br><span class=\"line\">\tNew_piid-&gt;OriginalFistThunk = (<span class=\"type\">int</span>)p_INT - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\">\tNew_piid-&gt;FirstThunk = (<span class=\"type\">int</span>)p_IAT - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第六步：追加一个IMAGE_IMPORT_BY_NAME 结构，前2个字节是0 后面是函数名称字符串</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> func_name[] = <span class=\"string\">&quot;ExportFunction&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* p_funcname = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)p_IAT + <span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(p_funcname, func_name, <span class=\"keyword\">sizeof</span>(func_name));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第七步：将IMAGE_IMPORT_BY_NAME结构的RVA赋值给INT和IAT表中的第一项</span></span><br><span class=\"line\">\t*p_INT = (<span class=\"type\">int</span>)p_funcname - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t*p_IAT = *p_INT;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第八步：分配空间存储DLL名称字符串 并将该字符串的RVA赋值给Name属性</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> Dll_name[] = <span class=\"string\">&quot;InjectDll.dll&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* p_DLLName = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)p_funcname + <span class=\"keyword\">sizeof</span>(func_name));</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(p_DLLName, Dll_name, <span class=\"keyword\">sizeof</span>(Dll_name));</span><br><span class=\"line\"></span><br><span class=\"line\">\tNew_piid-&gt;Name = (<span class=\"type\">int</span>)p_DLLName - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//存盘</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize = (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData) + (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData);</span><br><span class=\"line\">\tFILE* pfp = fopen(<span class=\"string\">&quot;C:\\\\Documents and Settings\\\\easy\\\\桌面\\\\6.exe&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\tfwrite(NewBuffer, size, <span class=\"number\">1</span>, pfp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先来看一下注入的InjectDll.dll的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//加载DLL</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">\t\tInit();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    \t<span class=\"comment\">//卸载DLL</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">\t\tDestroy();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DLL内的函数代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Init</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tMessageBox(<span class=\"number\">0</span>,<span class=\"string\">&quot;Init&quot;</span>,<span class=\"string\">&quot;Init&quot;</span>,MB_OK);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//卸载函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Destroy</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tMessageBox(<span class=\"number\">0</span>,<span class=\"string\">&quot;Destroy&quot;</span>,<span class=\"string\">&quot;Destroy&quot;</span>,MB_OK);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//导出函数，任何你想要执行的代码都可以放到这里面</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ExportFunction</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tMessageBox(<span class=\"number\">0</span>,<span class=\"string\">&quot;ExportFunction&quot;</span>,<span class=\"string\">&quot;ExportFunction&quot;</span>,MB_OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实验效果：</p>\n<p>运行导入表注入的程序：</p>\n<p><img src=\"/2022/05/05/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/1.PNG\"></p>\n<p>可以看到，在程序启动时，DLL被加载到该程序的进程空间，成功执行了初始化函数。</p>\n<p>下面关闭软件后：</p>\n<p><img src=\"/2022/05/05/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/2.PNG\"></p>\n<p>关闭后成功执行了卸载函数。</p>\n<p>然后用PE查看器看一下导入表：</p>\n<p><img src=\"/2022/05/05/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/3.PNG\"></p>\n<p>可以看到，我们自己的DLL成功注入到了该程序中，并且识别到了我们的导出函数。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：扩大节与合并节","url":"/2022/04/24/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%89%A9%E5%A4%A7%E8%8A%82%E4%B8%8E%E5%90%88%E5%B9%B6%E8%8A%82/","content":"<p>上一章学习了如何新增一个节并添加代码，但是这可能会带来一个问题，新增一个节有些太明显了，可能会被检测到(虽然我们也并不是干什么坏事)，因此本章学习如何合并和扩大一个节。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"扩大节\"><a href=\"#扩大节\" class=\"headerlink\" title=\"扩大节\"></a>扩大节</h1><p>为了不影响程序的正常运行，以及我们工作的方便，最好是对最后一个节进行扩大。扩大节与上一章新增一个节类似，也需要重新申请一个ImageBuffer2的空间。除此之外，还需要注意一下修改SizeOfRawData和VirtualSize的值(即修改节在磁盘中对齐前的大小和在内存中对齐后的大小)。让它们直接相等，且都等于内存中对齐后新的大小即可。下面给出代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">define MessageBoxAddr <span class=\"number\">0x77D507EA</span></span><br><span class=\"line\"><span class=\"type\">char</span> shellcode2[] = </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE9</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> shellcode_length2 = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">Expand_Last_Section</span><span class=\"params\">(<span class=\"type\">char</span>* ImageBuffer)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 定义各文件头 */</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = (<span class=\"type\">int</span>)((poph-&gt;SizeOfImage) + <span class=\"number\">0x1000</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer2 = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(ImageBuffer2, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(ImageBuffer2, ImageBuffer, poph-&gt;SizeOfImage);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpdh = (dos_header*)ImageBuffer2;</span><br><span class=\"line\">\tpph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\tpoph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\tpish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\timage_section_header* pish_last = (image_section_header*)(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 修改SizeOfImage 最后一个节的属性 */</span></span><br><span class=\"line\">\tpoph-&gt;SizeOfImage = size;</span><br><span class=\"line\">\t(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;Characteristics = pish-&gt;Characteristics;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pish_last-&gt;Misc.VirtualSize &gt;= pish_last-&gt;SizeOfRawData)   <span class=\"comment\">//注意修改Misc和SizeOfRawData的要点</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpish_last-&gt;SizeOfRawData = <span class=\"number\">0x1000</span> + pish_last-&gt;Misc.VirtualSize;</span><br><span class=\"line\">\t\tpish_last-&gt;Misc.VirtualSize += <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpish_last-&gt;Misc.VirtualSize = pish_last-&gt;SizeOfRawData + <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">\t\tpish_last-&gt;SizeOfRawData += <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 在最后一个节中添加代码 */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* des = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)ImageBuffer2 + pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class=\"number\">0x1000</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* src = shellcode2;</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des, src, shellcode_length2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> CallAddr = (<span class=\"type\">int</span>)(MessageBoxAddr - (pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class=\"number\">0x1000</span> + <span class=\"number\">13</span> + poph-&gt;ImageBase));</span><br><span class=\"line\">\t<span class=\"type\">int</span>* addr1 = (<span class=\"type\">int</span>*)((<span class=\"type\">int</span>)ImageBuffer2 + pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class=\"number\">0x1000</span> + <span class=\"number\">9</span>);</span><br><span class=\"line\">\t*addr1 = CallAddr;                   <span class=\"comment\">//修改E8</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> RetAddr = (<span class=\"type\">int</span>)(poph-&gt;AddressOfEntryPoint + poph-&gt;ImageBase - (pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class=\"number\">0x1000</span> + <span class=\"number\">18</span> + poph-&gt;ImageBase));</span><br><span class=\"line\">\t<span class=\"type\">int</span>* addr2 = (<span class=\"type\">int</span>*)((<span class=\"type\">int</span>)ImageBuffer2 + pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class=\"number\">0x1000</span> + <span class=\"number\">14</span>);</span><br><span class=\"line\">\t*addr2 = RetAddr;                    <span class=\"comment\">//修改E8</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> OEP = (<span class=\"type\">int</span>)(pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class=\"number\">0x1000</span>);</span><br><span class=\"line\">\tpoph-&gt;AddressOfEntryPoint = OEP;     <span class=\"comment\">//修改OEP  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ImageBuffer2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，可能会有些疑问：为什么在修改SizeOfRawData和VirtualSize时，要先进行一个比较再加上1000h呢？难道不是SizeOfRawData一定大于VirtualSize，也就是在磁盘中对齐后的大小一定大于等于在内存中对齐前的大小吗？答案是否定的。因为有可能在程序中会有很多在声明时未初始化的变量，在文件加载到内存中后这些未初始化的变量会被赋值，有可能会超过原来的SizeOfRawData。</p>\n<h1 id=\"合并节\"><a href=\"#合并节\" class=\"headerlink\" title=\"合并节\"></a>合并节</h1><p>本代码实现将PE文件的所有节合并为一个节。具体步骤与注意点如下：</p>\n<p>1、拉伸到内存。</p>\n<p>2、修改第一个节表的SizeOfRawData和VirtualSize。让它们大小都等于全部节在内存中的大小之和。那么如何计算这个大小呢？看一张图</p>\n<p><img src=\"/2022/04/24/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%89%A9%E5%A4%A7%E8%8A%82%E4%B8%8E%E5%90%88%E5%B9%B6%E8%8A%82/1.PNG\"></p>\n<p>大小应该是SizeOfImage - 第一个节的VirtualAddress。</p>\n<p>3、将第一个节的属性改为包含所有节的属性，这里用按位或运算即可。</p>\n<p>4、修改节的数量为1。</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 合并所有节 */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Merge_Section</span><span class=\"params\">(<span class=\"type\">char</span>* ImageBuffer)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 定义各文件头 */</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 改成员 */</span></span><br><span class=\"line\">\tpish-&gt;Misc.VirtualSize = poph-&gt;SizeOfImage - pish-&gt;VirtualAddress;</span><br><span class=\"line\">\tpish-&gt;SizeOfRawData = pish-&gt;Misc.VirtualSize;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 将属性改为包含所有节的属性 */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> chara = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; pph-&gt;NumberOfSection - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tchara = (pish + i)-&gt;Characteristics | (pish + i + <span class=\"number\">1</span>)-&gt;Characteristics;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpish-&gt;Characteristics = chara;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 修改节个数为1 */</span></span><br><span class=\"line\">\tpph-&gt;NumberOfSection = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实验结果如下</p>\n<p><img src=\"/2022/04/24/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%89%A9%E5%A4%A7%E8%8A%82%E4%B8%8E%E5%90%88%E5%B9%B6%E8%8A%82/2.PNG\"></p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：新增节并添加代码","url":"/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/","content":"<p>上一章是在原本存在的代码节中添加代码，本章实现新增一个节，并在新增的节中添加代码。</p>\n<span id=\"more\"></span>\n\n<p>先来整理一下，如果需要新增一个节，需要修改哪些东西：节表、新增一个节、在新增的节后面保证有一个节大小的0、修改PE头中节的数量、修改SizeOfImage大小、修正新增节的属性。</p>\n<p><strong>1、修改节表</strong></p>\n<p>先来看一下节表中每一项的内容</p>\n<p><img src=\"/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/1.PNG\"></p>\n<p>在节表中，每一项长度为40字节，描述了对应的节区的各种属性。那么Windows系统是怎么判断节表里面有多少项的呢？答案是，在节表的最后，是以一个节表项大小(40字节)全为0的内存，来表示节表的结束，类似于C语言中的字符串。因此，如果想要新增一个节，就需要保证在原有的节表后面，必须有2个节表项大小的0。再来看一张图</p>\n<p><img src=\"/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/2.PNG\"></p>\n<p>由上面的图可以看到，判断能否在原来的节表中新增加一项，判断公式为**SizeOfHeader - (DOS + 垃圾数据 + PE标记 + 标准PE头 + 可选PE头 + 已存在节表) &gt;&#x3D; 2个节表项大小(80字节)**。那么现在问题出来了，如果能容得下，直接添加就好了，如果容不下怎么办？</p>\n<p>再次看一下上面的图，在DOS头和NT头中间的浅蓝色区域，其实是一块垃圾数据，这里面的数据不影响程序的运行。因为Windows系统根据DOS头中的Ifanew字段直接找到了NT头，跳过了那段垃圾区域。因此，如果节表容不下新增一个项，那么我们可以将NT头和节表那一整块整体上移至DOS头下方，然后修改Ifanew字段，指向刚刚移动的位置，然后再新增一个节表项即可。</p>\n<p><strong>2、其他要修改的内容</strong></p>\n<p>节的数量：位于PE头中，+1。</p>\n<p>sizeofimage：位于可选PE头，比如我们新增节大小为0x1000h(4096字节)，那么sizeofimage + 1000。</p>\n<p>在最后一个节的后面新增节：要注意对齐。</p>\n<p>新增节的属性：可以直接将代码段的属性复制到新增的节上。</p>\n<p>在节中添加代码。</p>\n<p>还有需要注意的一点是，在新增节的时候，应该另外申请一个ImageBuffer2空间的大小，用于盛放原来的ImageBuffer的内容和新增节的内容。</p>\n<p>代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 新增一个节，添加弹框代码 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MessageBoxAddr 0x77D507EA</span></span><br><span class=\"line\"><span class=\"type\">char</span> shellcode[] = </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE9</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//新增节的名称为.haha</span></span><br><span class=\"line\"><span class=\"type\">char</span> sectionname[] = &#123;<span class=\"number\">0x2E</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> shellcode_length = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"comment\">//函数实现新增节，参数分别为拉伸后的ImageBuffer和新增节大小的字节数</span></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">AddSection</span><span class=\"params\">(<span class=\"type\">char</span>* ImageBuffer, <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 定义各文件头 */</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = (<span class=\"type\">int</span>)((poph-&gt;SizeOfImage) + len);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer2 = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(ImageBuffer2, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(ImageBuffer2, ImageBuffer, poph-&gt;SizeOfImage);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpdh = (dos_header*)ImageBuffer2;</span><br><span class=\"line\">\tpph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\tpoph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\tpish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* 添加一个节表 */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> up_size = <span class=\"number\">4</span> + <span class=\"number\">20</span> + pph-&gt;SizeOfOptionalHeader + (pph-&gt;NumberOfSection)*<span class=\"number\">40</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)ImageBuffer2 + <span class=\"number\">64</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* src = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)ImageBuffer2 + pdh-&gt;e_lfanew);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des, src, up_size);            <span class=\"comment\">//上移NT头</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>((<span class=\"type\">char</span>*)(des + up_size), <span class=\"number\">0</span>, <span class=\"number\">160</span>);   <span class=\"comment\">//160=E0+up_size-(64+up_zise)  清0</span></span><br><span class=\"line\">\tpdh-&gt;e_lfanew = <span class=\"number\">0x40</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpdh = (dos_header*)ImageBuffer2;</span><br><span class=\"line\">\tpph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\tpoph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\tpish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_pish = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)pish + (<span class=\"type\">int</span>)(pph-&gt;NumberOfSection*<span class=\"number\">40</span>));</span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_pish = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)pish);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_pish, src_pish, <span class=\"number\">40</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t(pish + pph-&gt;NumberOfSection)-&gt;name[i] = sectionname[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* 修改PE头中节的数量 */</span></span><br><span class=\"line\">\tpph-&gt;NumberOfSection += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 修改sizeofimage大小 */</span></span><br><span class=\"line\">\tpoph-&gt;SizeOfImage = poph-&gt;SizeOfImage + len;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* 修正新增节表的属性 */</span></span><br><span class=\"line\">\t(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;Misc.VirtualAddress = len;</span><br><span class=\"line\">\t(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress = (pish + pph-&gt;NumberOfSection - <span class=\"number\">2</span>)-&gt;VirtualAddress + (pish + pph-&gt;NumberOfSection - <span class=\"number\">2</span>)-&gt;SizeOfRawData;</span><br><span class=\"line\">\t(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData = len;</span><br><span class=\"line\">\t(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData = (pish + pph-&gt;NumberOfSection - <span class=\"number\">2</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">2</span>)-&gt;SizeOfRawData;</span><br><span class=\"line\">\t(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;Characteristics = (pish + <span class=\"number\">2</span>)-&gt;Characteristics;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 在节中添加代码 */</span></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tmemcpy((char*)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + (int)ImageBuffer2), shellcode, shellcode_length);</span></span><br><span class=\"line\"><span class=\"comment\">\t</span></span><br><span class=\"line\"><span class=\"comment\">\tint CallAddr = (int)(MessageBoxAddr - ((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + 13 + poph-&gt;ImageBase));</span></span><br><span class=\"line\"><span class=\"comment\">\tint* addr1 = (int*)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + (int)ImageBuffer2 + 9);</span></span><br><span class=\"line\"><span class=\"comment\">\t*addr1 = CallAddr;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\tint RetAddr = (int)(poph-&gt;AddressOfEntryPoint + poph-&gt;ImageBase - ((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + 18 + poph-&gt;ImageBase));</span></span><br><span class=\"line\"><span class=\"comment\">\tint* addr2 = (int*)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + (int)ImageBuffer2 + 14);</span></span><br><span class=\"line\"><span class=\"comment\">\t*addr2 = RetAddr;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\tint OEP = (int)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress);</span></span><br><span class=\"line\"><span class=\"comment\">\tpoph-&gt;AddressOfEntryPoint = OEP;</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ImageBuffer2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实验结果：</p>\n<p>在原本的记事本程序中，有三个节：</p>\n<p><img src=\"/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/3.PNG\"></p>\n<p>代码运行成功后，节添加成功：</p>\n<p><img src=\"/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/4.PNG\"></p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：移动导出表与重定位表","url":"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/","content":"<p>在一个PE文件中，各种表是由编译器生成的，表里面存储了非常重要的信息。在程序启动的时候，系统会根据这些表做各种初始化的工作。但是假如有一个小需求，需要对.exe文件的二进制代码进行加密来保护程序，但问题是：这些表的信息和程序的代码与数据都是混合在一起的，一旦被加密，系统也无法准确定位这些表，也就无法做初始化的工作，程序也就无法启动。因此，移动各种表，是对程序加密与解密的基础。</p>\n<span id=\"more\"></span>\n\n<p>上一章节学习了导出表与重定位表，本节就来移动它们。</p>\n<h1 id=\"移动导出表\"><a href=\"#移动导出表\" class=\"headerlink\" title=\"移动导出表\"></a>移动导出表</h1><p>先来看一张移动导出表的结构图</p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/1.PNG\"></p>\n<p>这里给出一种较为合理的移动方法(注意本方法是在FileBuffer中进行的，省去了拉伸的步骤)：</p>\n<p>1、在DLL中新增一个节，并返回新增后的FOA。这个节里面存放移动出来的各种东西。</p>\n<p>2、在新增节开头复制AddressOfFunctions表，长度为4*NumberOfFunctions。</p>\n<p>3、紧接着复制AddressOfNameOrdinals表，长度为2*NumberOfNames。</p>\n<p>4、紧接着复制AddressOfNames表，长度为4*NumberOfNames。</p>\n<p>5、紧接着复制所有函数名，复制的时候直接修复名称地址表，指向新移动的位置。</p>\n<p>6、在最后一个函数名后面复制导出表结构。</p>\n<p>7、修复新的导出表结构指向三个表的地址，指向新的表。</p>\n<p>8、修复项目录中的值，指向新的导出表结构。</p>\n<p>下面给出实现代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 移动导出表, 注意修复地址时转换成RVA */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Move_Export</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//第一步：在DLL中新增一个节，并返回新增后的FOA</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = <span class=\"built_in\">file_to_image</span>();</span><br><span class=\"line\">    <span class=\"comment\">//增加节的函数在前面的章节有讲过</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer2 = <span class=\"built_in\">AddSection</span>(ImageBuffer, <span class=\"number\">4096</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* NewBuffer = <span class=\"built_in\">image_to_file</span>(ImageBuffer2);</span><br><span class=\"line\"></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)NewBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\timage_export_directory* pied = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* export_rva = (<span class=\"type\">char</span>*)poph-&gt;DataDirectory[<span class=\"number\">0</span>].VirtualAddress;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* export_foa = <span class=\"built_in\">RVA_TO_FOA</span>(export_rva);</span><br><span class=\"line\">\tpied = (image_export_directory*)(export_foa + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FOA_add = (<span class=\"type\">char</span>*)(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第二步：复制AddressOfFunctions表</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_AddressOfFunctions = (<span class=\"type\">char</span>*)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)pied-&gt;AddressOfFunctions) + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_AddressOfFunctions = (<span class=\"type\">char</span>*)(FOA_add + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_AddressOfFunctions, src_AddressOfFunctions, <span class=\"number\">4</span>*pied-&gt;NumberOfFunctions);  <span class=\"comment\">//长度：4*NumberOfFunctions</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第三步：复制AddressOfNameOrdinals表</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_AddressOfNameOrdinals = (<span class=\"type\">char</span>*)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)pied-&gt;AddressOfNameOrdinals) + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_AddressOfNameOrdinals = (<span class=\"type\">char</span>*)(FOA_add + (<span class=\"type\">int</span>)NewBuffer + <span class=\"number\">4</span>*pied-&gt;NumberOfFunctions);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_AddressOfNameOrdinals, src_AddressOfNameOrdinals, <span class=\"number\">2</span>*pied-&gt;NumberOfNames);  <span class=\"comment\">//长度：NumberOfNames*2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第四步：复制AddressOfNames表</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_AddressOfNames = (<span class=\"type\">char</span>*)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)pied-&gt;AddressOfNames) + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_AddressOfNames = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)des_AddressOfNameOrdinals + <span class=\"number\">2</span>*pied-&gt;NumberOfNames);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_AddressOfNames, src_AddressOfNames, <span class=\"number\">4</span>*pied-&gt;NumberOfNames);  <span class=\"comment\">//长度：NumberOfNames*4</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第五步：复制所有的函数名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"number\">0</span>;           <span class=\"comment\">//记录每一个函数名长度</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> count = <span class=\"number\">0</span>;         <span class=\"comment\">//记录全部函数名总长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; pied-&gt;NumberOfNames - <span class=\"number\">1</span>; i++)     <span class=\"comment\">//复制除了最后一个函数名的函数名</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* src_name = (<span class=\"type\">char</span>*)((<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)*((<span class=\"type\">int</span>*)src_AddressOfNames + i)) + (<span class=\"type\">int</span>)NewBuffer));</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* des_name = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)des_AddressOfNames + <span class=\"number\">4</span>*pied-&gt;NumberOfNames + len);</span><br><span class=\"line\">\t\tlen = *((<span class=\"type\">int</span>*)src_AddressOfNames + i + <span class=\"number\">1</span>) - *((<span class=\"type\">int</span>*)src_AddressOfNames + i);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(des_name, src_name, len);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span>* New_Addressname = ((<span class=\"type\">int</span>*)des_AddressOfNames + i);</span><br><span class=\"line\">\t\t*New_Addressname = (<span class=\"type\">int</span>)((<span class=\"type\">int</span>)des_name - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress);   <span class=\"comment\">//修复新的函数名称地址表,转换成RVA</span></span><br><span class=\"line\">\t\tcount += len;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_last_func_name = (<span class=\"type\">char</span>*)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)(*(<span class=\"type\">int</span>*)src_AddressOfNames)) + (<span class=\"type\">int</span>)NewBuffer) + count;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_last_func_name = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)des_AddressOfNames + <span class=\"number\">4</span>*pied-&gt;NumberOfNames) + count;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* Last_New_AddressesName = (<span class=\"type\">int</span>*)des_AddressOfNames + pied-&gt;NumberOfNames - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t*Last_New_AddressesName = (<span class=\"type\">int</span>)des_last_func_name - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;   <span class=\"comment\">//修复最后一个函数名称地址表,转换成RVA</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*src_last_func_name)      <span class=\"comment\">//复制最后一个函数名</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*des_last_func_name = *src_last_func_name;</span><br><span class=\"line\">\t\tsrc_last_func_name++;</span><br><span class=\"line\">\t\tdes_last_func_name++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*des_last_func_name = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第六步：复制IMAGE_EXPORT_DIRECTORY导出表结构</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_IMAGE_EXPORT_DIRECTORY = (<span class=\"type\">char</span>*)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)(poph-&gt;DataDirectory[<span class=\"number\">0</span>].VirtualAddress)) + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_IMAGE_EXPORT_DIRECTORY = des_last_func_name + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_IMAGE_EXPORT_DIRECTORY, src_IMAGE_EXPORT_DIRECTORY, <span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第七步：修复IMAGE_EXPORT_DIRECTORY结构中的三个表地址</span></span><br><span class=\"line\">\timage_export_directory* New_IMAGE_EXPORT_DIRECTORY = (image_export_directory*)des_IMAGE_EXPORT_DIRECTORY;</span><br><span class=\"line\">\tNew_IMAGE_EXPORT_DIRECTORY-&gt;AddressOfFunctions = (<span class=\"type\">int</span>)des_AddressOfFunctions - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\">\tNew_IMAGE_EXPORT_DIRECTORY-&gt;AddressOfNameOrdinals = (<span class=\"type\">int</span>)des_AddressOfNameOrdinals - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\">\tNew_IMAGE_EXPORT_DIRECTORY-&gt;AddressOfNames = (<span class=\"type\">int</span>)des_AddressOfNames - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第八步：修复目录项中的值，指向新的IMAGE_EXPORT_DIRECTORY,注意转换成RVA</span></span><br><span class=\"line\">\tpoph-&gt;DataDirectory[<span class=\"number\">0</span>].VirtualAddress = </span><br><span class=\"line\">\t\t(<span class=\"type\">int</span>)des_IMAGE_EXPORT_DIRECTORY - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData</span><br><span class=\"line\">\t\t+ (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//存盘</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize = (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData) + (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData);</span><br><span class=\"line\">\tFILE* pfp = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;C:\\\\Documents and Settings\\\\easy\\\\桌面\\\\moveexport.dll&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">fwrite</span>(NewBuffer, size, <span class=\"number\">1</span>, pfp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>移动表前的DLL的节与导出函数如下：</p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/2.PNG\"></p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/3.PNG\" alt=\"3\"></p>\n<p>移动之后：</p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/4.PNG\"></p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/5.PNG\"></p>\n<h1 id=\"移动重定位表\"><a href=\"#移动重定位表\" class=\"headerlink\" title=\"移动重定位表\"></a>移动重定位表</h1><p>重定位表的移动相对于导出表比较简单，直接上代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 移动重定向表 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Move_Reloc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//第一步：在DLL中新增一个节，并返回新增后的FOA</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = <span class=\"built_in\">file_to_image</span>();</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer2 = <span class=\"built_in\">AddSection</span>(ImageBuffer, <span class=\"number\">20480</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* NewBuffer = <span class=\"built_in\">image_to_file</span>(ImageBuffer2);</span><br><span class=\"line\"></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)NewBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* basereloc_rva = (<span class=\"type\">char</span>*)poph-&gt;DataDirectory[<span class=\"number\">5</span>].VirtualAddress;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* basereloc_foa = <span class=\"built_in\">RVA_TO_FOA</span>(basereloc_rva);</span><br><span class=\"line\">\timage_base_relocation* pibr = (image_base_relocation*)(basereloc_foa + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FOA_add = (<span class=\"type\">char</span>*)(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第二步：复制重定向表</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_reloc = (<span class=\"type\">char</span>*)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)poph-&gt;DataDirectory[<span class=\"number\">5</span>].VirtualAddress) + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_reloc = (<span class=\"type\">char</span>*)(FOA_add + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">int</span> reloc_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(pibr-&gt;VirtualAddress !=<span class=\"number\">0</span> &amp;&amp; pibr-&gt;SizeOfBlock != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treloc_size += pibr-&gt;SizeOfBlock;</span><br><span class=\"line\">\t\tpibr = (image_base_relocation*)((<span class=\"type\">char</span>*)pibr + pibr-&gt;SizeOfBlock);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpibr = (image_base_relocation*)(basereloc_foa + (<span class=\"type\">int</span>)NewBuffer);  <span class=\"comment\">//将指针重新指向第一个重定向块</span></span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_reloc, src_reloc, reloc_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第三步：修复目录项中的值，指向新的IMAGE_BASE_RELOCATION, 注意转换成RVA</span></span><br><span class=\"line\">\tpoph-&gt;DataDirectory[<span class=\"number\">5</span>].VirtualAddress = (<span class=\"type\">int</span>)FOA_add - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData</span><br><span class=\"line\">\t\t+ (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//存盘</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize = (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData) + (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData);</span><br><span class=\"line\">\tFILE* pfp = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;C:\\\\Documents and Settings\\\\easy\\\\桌面\\\\reloc.dll&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">fwrite</span>(NewBuffer, size, <span class=\"number\">1</span>, pfp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"修复重定位表\"><a href=\"#修复重定位表\" class=\"headerlink\" title=\"修复重定位表\"></a>修复重定位表</h1><p>这里做一个比较有意思的小实验，来加深一下对重定位表的理解。</p>\n<p>我们知道，一个DLL的ImageBase被另一个DLL占据的时候，系统会根据64KB对齐将这个DLL往下”贴”，并根据重定位表来修复需要修复的全局变量地址。现在我们来模拟操作系统在这个过程中做的事情：自己修改DLL的ImageBase并修复重定位表，然后存盘，使新的DLL仍然可以使用。</p>\n<p>先上代码，然后做解释：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 更改ImageBase， 并修复重定表 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Update_Reloc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 1. 将文件读入内存 */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FileBuffer = <span class=\"built_in\">Read_exe</span>();</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = <span class=\"built_in\">file_to_image</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 2. 定义并初始化各头结构指针 */</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)FileBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* basereloc_rva = (<span class=\"type\">char</span>*)poph-&gt;DataDirectory[<span class=\"number\">5</span>].VirtualAddress;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* basereloc_foa = <span class=\"built_in\">RVA_TO_FOA</span>(basereloc_rva);</span><br><span class=\"line\">\timage_base_relocation* pibr = (image_base_relocation*)(basereloc_foa + (<span class=\"type\">int</span>)FileBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 3. 修改ImageBase, 注意模块对齐方式为10000H */</span></span><br><span class=\"line\">\tpoph-&gt;ImageBase += <span class=\"number\">0x50000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 4. 修改重定位表 */</span></span><br><span class=\"line\">\t<span class=\"comment\">//image_base_relocation* New_preloc = (image_base_relocation*)(FOA_add + (int)FileBuffer);</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(pibr-&gt;VirtualAddress != <span class=\"number\">0</span> &amp;&amp; pibr-&gt;SizeOfBlock != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (pibr-&gt;SizeOfBlock - <span class=\"number\">8</span>) / <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">short</span>* item = (<span class=\"type\">short</span>*)((<span class=\"type\">char</span>*)pibr + <span class=\"number\">8</span>);   <span class=\"comment\">//新重定位表具体项指针</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((*(item + i) &amp; <span class=\"number\">0xF000</span>) &gt;&gt; <span class=\"number\">12</span> == <span class=\"number\">3</span>)             <span class=\"comment\">//高4位为3才有意义</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> rva = (<span class=\"type\">int</span>)pibr-&gt;VirtualAddress + (*(item + i) &amp; <span class=\"number\">0x0FFF</span>);  <span class=\"comment\">//计算绝对地址RVA</span></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> foa = (<span class=\"type\">int</span>)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)rva));</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span>* change_addr = (<span class=\"type\">int</span>*)((<span class=\"type\">int</span>)FileBuffer + foa);</span><br><span class=\"line\">\t\t\t\t*change_addr += <span class=\"number\">0x50000</span>;      <span class=\"comment\">//直接修复绝对地址， 而不是修改重定位表</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpibr = (image_base_relocation*)((<span class=\"type\">char</span>*)pibr + pibr-&gt;SizeOfBlock);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//存盘</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize = (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData) + (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData);</span><br><span class=\"line\">\tFILE* pfp = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;C:\\\\Documents and Settings\\\\easy\\\\桌面\\\\reloc2.dll&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">fwrite</span>(FileBuffer, size, <span class=\"number\">1</span>, pfp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在来说明一下修复重定位表的原理，正常情况下，系统会根据重定位表计算出全局变量的地址并使用它。当ImageBase改变的时候，系统会原来写死的地址加上新旧Image Base的差值。因此，我们这里的修复重定位表，并不是修改表中的VirtualAddress或者具体项，而是先计算出来需要修复的绝对地址(FOA+FileBuffer)，然后用这个绝对地址加上差值(我一开始写代码的时候，这个问题也困扰了我很久，网上资料也很少有对修复重定位表解释明白的)。因此在整个过程中，重定位表是没有改变数据的，改变的是根据重定位表找到的数据的地址。</p>\n<p>实验结果：</p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/7.PNG\"></p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/6.PNG\"></p>\n<p>修改ImageBase后的DLL仍然可以使用。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"Win32：挂起方式创建进程","url":"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/","content":"<p>上节课讲解了CreateProcess函数，并介绍了其中的几个参数。这节课来介绍另外几个参数，并且会讲解如何以挂起方式创建进程，为我们下一节课写一个简单的加密壳打下基础。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"进程的创建\"><a href=\"#进程的创建\" class=\"headerlink\" title=\"进程的创建\"></a>进程的创建</h1><p>再来回顾一下CreateProcess函数的定义：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">BOOL <span class=\"title function_\">CreateProcess</span><span class=\"params\">(\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"params\">  LPCTSTR lpApplicationName,                 <span class=\"comment\">// name of executable module\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPTSTR lpCommandLine,                      <span class=\"comment\">// command line string\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class=\"comment\">// SD\t\t\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPSECURITY_ATTRIBUTES lpThreadAttributes,  <span class=\"comment\">// SD\t\t\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  BOOL bInheritHandles,                      <span class=\"comment\">// handle inheritance option\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  DWORD dwCreationFlags,                     <span class=\"comment\">// creation flags\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPVOID lpEnvironment,                      <span class=\"comment\">// new environment block\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPCTSTR lpCurrentDirectory,                <span class=\"comment\">// current directory name\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPSTARTUPINFO lpStartupInfo,               <span class=\"comment\">// startup information\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPPROCESS_INFORMATION lpProcessInformation <span class=\"comment\">// process information\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;\t\t\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>先来看lpProcessAttributes和lpThreadAttributes这两个参数。</p>\n<p>与CreateEvent函数类似：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">HANDLE  <span class=\"title function_\">CreateEvent</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">　　LPSECURITY_ATTRIBUTES  lpEventAttributes,\t<span class=\"comment\">// 安全属性 </span></span></span><br><span class=\"line\"><span class=\"params\">　　BOOL  bManualReset,\t\t\t\t<span class=\"comment\">// 复位方式</span></span></span><br><span class=\"line\"><span class=\"params\">　　BOOL  bInitialState,\t\t\t<span class=\"comment\">// 初始状态</span></span></span><br><span class=\"line\"><span class=\"params\">　　LPCTSTR  lpName \t\t\t\t<span class=\"comment\">// 对象名称 </span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>都是创建内核对象的函数，CreateEvent函数的的lpEventAttributes参数代表着这个内核对象能否被子进程继承。同理，CreateProcess函数中的lpProcessAttributes和lpThreadAttributes参数，代表着进程内核对象与线程内核对象能否被继承。</p>\n<p>我们知道，在父进程被创建时，在它的高2G会生成一张空的句柄表，当父进程执行CreateProcess函数创建子进程时，会在这张句柄表里写入两项内容，一个是子进程的句柄，一个是子进程主线程的句柄。当这两个参数被赋值后，子进程就可以继承这两个句柄。下面看一个程序例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进程A代码</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> szBuffer[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> szHandle[<span class=\"number\">8</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tSECURITY_ATTRIBUTES ie_sa_p;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tie_sa_p.nLength = <span class=\"keyword\">sizeof</span>(ie_sa_p);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tie_sa_p.lpSecurityDescriptor = <span class=\"literal\">NULL</span>;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tie_sa_p.bInheritHandle = TRUE; \t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tSECURITY_ATTRIBUTES <span class=\"type\">ie_sa_t</span>;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">ie_sa_t</span>.nLength = <span class=\"keyword\">sizeof</span>(<span class=\"type\">ie_sa_t</span>);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">ie_sa_t</span>.lpSecurityDescriptor = <span class=\"literal\">NULL</span>;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">ie_sa_t</span>.bInheritHandle = TRUE; \t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//创建一个可以被继承的内核对象,此处是个进程\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tSTARTUPINFO ie_si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tPROCESS_INFORMATION ie_pi;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tie_si.cb = <span class=\"keyword\">sizeof</span>(ie_si);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tTCHAR szCmdline[] =TEXT(<span class=\"string\">&quot;c://program files//internet explorer//iexplore.exe&quot;</span>);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tCreateProcess(\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tszCmdline, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&amp;ie_sa_p, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&amp;<span class=\"type\">ie_sa_t</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tTRUE, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tCREATE_NEW_CONSOLE, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, &amp;ie_si, &amp;ie_pi); \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//组织命令行参数\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(szHandle,<span class=\"string\">&quot;%x %x&quot;</span>,ie_pi.hProcess,ie_pi.hThread);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(szBuffer,<span class=\"string\">&quot;C:/guaqitest_B.exe %s&quot;</span>,szHandle);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//定义创建进程需要用的结构体\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tSTARTUPINFO si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tPROCESS_INFORMATION pi;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tsi.cb = <span class=\"keyword\">sizeof</span>(si);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//创建子进程\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tBOOL res = CreateProcess(\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tszBuffer, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tTRUE, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tCREATE_NEW_CONSOLE, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, &amp;si, &amp;pi); \t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进程B代码</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDWORD dwProcessHandle = <span class=\"number\">-1</span>;\t\t\t\t\t\t</span><br><span class=\"line\">\tDWORD dwThreadHandle = <span class=\"number\">-1</span>;\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> szBuffer[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(szBuffer,argv[<span class=\"number\">1</span>],<span class=\"number\">8</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">sscanf</span>(szBuffer,<span class=\"string\">&quot;%x&quot;</span>,&amp;dwProcessHandle);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(szBuffer,<span class=\"number\">0</span>,<span class=\"number\">256</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(szBuffer,argv[<span class=\"number\">2</span>],<span class=\"number\">8</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">sscanf</span>(szBuffer,<span class=\"string\">&quot;%x&quot;</span>,&amp;dwThreadHandle);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;获取IE进程、主线程句柄\\n&quot;</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\tSleep(<span class=\"number\">2000</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//挂起主线程\t\t\t\t\t\t</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;挂起主线程\\n&quot;</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t::SuspendThread((HANDLE)dwThreadHandle);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\tSleep(<span class=\"number\">10000</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//恢复主线程\t\t\t\t\t\t</span></span><br><span class=\"line\">\t::ResumeThread((HANDLE)dwThreadHandle);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;恢复主线程\\n&quot;</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\tSleep(<span class=\"number\">10000</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//关闭ID进程\t\t\t\t\t\t</span></span><br><span class=\"line\">\t::TerminateProcess((HANDLE)dwProcessHandle,<span class=\"number\">1</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t::WaitForSingleObject((HANDLE)dwProcessHandle, INFINITE);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ID进程已经关闭.....\\n&quot;</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分析一下上面代码，在进程A中，首先创建了一个浏览器子进程，并设置了浏览器进程与其主进程的句柄可以被继承，这时候在A进程的句柄表中就会生成浏览器进程与其主线程的句柄。然后A进程又创建了一个子进程B，B子进程继承了A的句柄表，这时候在B的句柄表中也存在浏览器进程与其主线程的句柄，并且A通过命令行参数将这两个句柄值传递给了B子进程，这时候B进程就可以通过这两个句柄值对浏览器进程进行控制了。在B进程中，可以将前面的浏览器进程做挂起、恢复和结束等操作。如果B没有继承这两个句柄，是无法通过这两个值对浏览器进程进行控制的。</p>\n<p>接下来再看CreateProcess函数的另一个参数lpCurrentDirectory，这个参数可以获取程序的当前目录。</p>\n<p>通过下面的例子来说明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进程A代码，位于C：/1文件夹下</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> szBuffer[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(szBuffer,<span class=\"string\">&quot;C:/B.exe&quot;</span>);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//定义创建进程需要用的结构体\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tSTARTUPINFO si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tPROCESS_INFORMATION pi;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tsi.cb = <span class=\"keyword\">sizeof</span>(si);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//创建子进程\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tBOOL res = CreateProcess(\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tszBuffer, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tTRUE, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tCREATE_NEW_CONSOLE, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t&amp;si, &amp;pi); \t\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进程B代码，位于位于C：/下</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> szBuffer[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t</span><br><span class=\"line\">\tGetCurrentDirectory(<span class=\"number\">256</span>,szBuffer);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,szBuffer);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分析一下代码，在父进程A中创建子进程B，进程B的任务是打印进程所在的目录位置。当父进程A中CreateProcess函数的参数lpCurrentDirectory设置为NULL时，结果如下：</p>\n<p><img src=\"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/1.PNG\"></p>\n<p>可以看到，lpCurrentDirectory设置为NULL时，子进程B打印的是父进程A的目录位置。而当我们将这个参数设置为一个存在的目录时，打印的结果就是我们设定的目录，结果如下图：</p>\n<p><img src=\"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/2.PNG\"></p>\n<p>这个当前目录的参数很多人会觉得无所谓，但这是我们后面写壳的一个很重要的地方。</p>\n<h1 id=\"以挂起方式创建进程\"><a href=\"#以挂起方式创建进程\" class=\"headerlink\" title=\"以挂起方式创建进程\"></a>以挂起方式创建进程</h1><p>最后来看一下我们要学习的CreateProcess函数的最后一个参数dwCreationFlags。在前面的程序中，我们把这个参数的值赋成了CREATE_NEW_CONSOLE，这样一来，对于控制台程序来说，子进程就会将它打印的东西打印到一个新的控制台中。而当dwCreationFlags赋值为NULL时，子进程就会与父进程共用一个控制台窗口。</p>\n<p>而当我们把dwCreationFlags这个参数赋值成CREATE_SUSPENDED时，就是我们要讲的以挂起的方式创建进程。</p>\n<p>先来看下面的程序：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    STARTUPINFO ie_si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t</span><br><span class=\"line\">    PROCESS_INFORMATION ie_pi;\t\t\t\t</span><br><span class=\"line\">    ie_si.cb = <span class=\"keyword\">sizeof</span>(ie_si);\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    TCHAR szBuffer[<span class=\"number\">256</span>] = <span class=\"string\">&quot;C:\\\\1.exe&quot;</span>;\t\t\t\t</span><br><span class=\"line\">    CreateProcess(\t\t\t\t</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,                  \t\t\t</span><br><span class=\"line\">        szBuffer,                \t\t\t</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>, \t\t\t</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,  \t\t\t</span><br><span class=\"line\">        FALSE,                   \t\t\t</span><br><span class=\"line\">        CREATE_SUSPENDED, \t<span class=\"comment\">//挂起    \t\t\t</span></span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,                    \t\t\t</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,                    \t\t\t</span><br><span class=\"line\">        &amp;ie_si,                  \t\t\t</span><br><span class=\"line\">        &amp;ie_pi                  \t\t\t</span><br><span class=\"line\">        );\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//恢复执行\t\t\t\t</span></span><br><span class=\"line\">    ResumeThread(ie_pi.hThread);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个程序首先以挂起的方式创建1.exe进程，然后立即恢复该进程，因此当这个程序一运行，就相当于正常启动了1.exe这个进程，观察该进程的运行状态以及模块状态如下：</p>\n<p><img src=\"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/3.png\"></p>\n<p><img src=\"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/4.png\"></p>\n<p>可以看到，当进程正常创建后，内存使用为1568K（正常大小），并且也可以遍历到该进程的模块。</p>\n<p>接下来，在ResumeThread(ie_pi.hThread)处下断点，相当于让1.exe进程以挂起方式创建，观察结果：</p>\n<p><img src=\"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/5.png\"></p>\n<p><img src=\"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/6.png\"></p>\n<p>可以看到，以挂起方式创建进程后，进程被挂起没有运行，在任务管理器中可以看到该进程，但是大小却只有76K，远小于正常执行的大小1568K，同时还可以看到该进程的模块没有被加载。这意味着此时这个进程还是一个空壳。</p>\n<p>那是否可以这样想，当我们以挂起的方式创建一个进程后，通过修改这个空壳的内容，将我们自己的程序拉伸后替换原来外壳程序的内容，那么再恢复这个进程后，表面上看是运行的一开始创建的进程，但实际上运行的内容却是我们刚刚替换的自己的程序。（这也是我们后面写壳的思路）</p>\n<p>那么既然要替换原程序的内容，我们就得需要修改如下两个点：ImageBase和程序入口点。具体怎么修改，下节课讲制作壳程序的原理的时候再详细说明，这里先说下如何获取外壳程序进程的ImageBase和程序入口点。看下面的程序：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    STARTUPINFO ie_si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t\t\t</span><br><span class=\"line\">    PROCESS_INFORMATION ie_pi;\t\t\t\t\t\t</span><br><span class=\"line\">    ie_si.cb = <span class=\"keyword\">sizeof</span>(ie_si);\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//以挂起的方式创建进程\t\t\t\t\t\t</span></span><br><span class=\"line\">    TCHAR szBuffer[<span class=\"number\">256</span>] = <span class=\"string\">&quot;C:\\\\ipmsg.exe&quot;</span>;\t\t\t\t\t\t</span><br><span class=\"line\">    CreateProcess(\t\t\t\t\t\t</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,                    <span class=\"comment\">// name of executable module\t\t\t\t\t</span></span><br><span class=\"line\">        szBuffer,                <span class=\"comment\">// command line string\t\t\t\t\t</span></span><br><span class=\"line\">        <span class=\"literal\">NULL</span>, \t\t\t\t\t <span class=\"comment\">// SD</span></span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,  \t\t             <span class=\"comment\">// SD\t\t\t</span></span><br><span class=\"line\">        FALSE,                   <span class=\"comment\">// handle inheritance option\t\t\t\t\t</span></span><br><span class=\"line\">        CREATE_SUSPENDED,     \t <span class=\"comment\">// creation flags  \t\t\t\t</span></span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,                    <span class=\"comment\">// new environment block\t\t\t\t\t</span></span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,                    <span class=\"comment\">// current directory name\t\t\t\t\t</span></span><br><span class=\"line\">        &amp;ie_si,                  <span class=\"comment\">// startup information\t\t\t\t\t</span></span><br><span class=\"line\">        &amp;ie_pi                   <span class=\"comment\">// process information\t\t\t\t\t</span></span><br><span class=\"line\">        );\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    CONTEXT contx;  \t\t\t\t\t\t</span><br><span class=\"line\">    contx.ContextFlags = CONTEXT_FULL;  \t\t\t\t\t\t</span><br><span class=\"line\">    GetThreadContext(ie_pi.hThread, &amp;contx);\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取入口点\t\t\t\t\t\t</span></span><br><span class=\"line\">    DWORD dwEntryPoint = contx.Eax;\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取ImageBase\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"type\">char</span>* baseAddress = (CHAR *) contx.Ebx+<span class=\"number\">8</span>;\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(szBuffer,<span class=\"number\">0</span>,<span class=\"number\">256</span>);\t\t\t\t\t\t</span><br><span class=\"line\">    ReadProcessMemory(ie_pi.hProcess,baseAddress,szBuffer,<span class=\"number\">4</span>,<span class=\"literal\">NULL</span>);\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    ResumeThread(ie_pi.hThread);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个程序中，我们想要获取目标进程ipmsg.exe的入口点和ImageBase，可以通过以挂起的方式创建目标进程，然后获取此时目标进程的上下文（通过GetThreadContext函数）。注意，目标进程的<strong>入口点</strong>保存在contx.Eax中，<strong>ImageBase的地址</strong>保存在contx.Ebx+8中，这两个值目前记住就好，想要了解的话需要涉及内核中PEB的知识。另外需要注意的是，contx.Eax中保存的是程序入口点，这个值就是目标程序的入口点，可以直接打印；而contx.Ebx+8中存放的是目标进程ImageBase的地址，但是不能简单的通过*（contx.Ebx+8）获取，因为这个地址不在当前的程序中，而是在目标进程ipmsg.exe中，所以可以通过ReadProcessMemory函数来读取目标进程的地址来获取。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"Win32：加密壳的编写","url":"/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/","content":"<p>这节课来完成对壳程序的编写。壳可以分成两类：加密壳和压缩壳，加密壳又可以分成两类：分别是二进制壳和源代码加密壳。对于二进制壳来所，它并不改变代码的指令，而是对整个PE文件结构做一个扭曲变形，并且对关键代码进行加密。但是对于所有这种二进制壳，不管怎么变形，当这个程序执行时，在内存中拉伸后一定是要恢复原状的。想要脱这种二进制壳，需要跟着它的汇编指令执行到在内存中展开后，将内存dump出来，再修改OEP到正常程序的入口点，即可完成脱壳。本节课我们就来完成对这种二进制壳的编写。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p><u>特别说明，在本篇文章中，壳程序称为<strong>shell</strong>，准备加密的程序称为<strong>src</strong>。</u></p>\n<p>对于这种二进制壳，有以下两种编写方法：</p>\n<p><strong>一、将PE文件中的各种表移动出来，再加密（本节课不做这个）</strong></p>\n<ol>\n<li>新增一个节，移动各种表</li>\n<li>对原来PE文件加密</li>\n<li>这时候程序还不能跑起来，因为OEP还在被加密的文件中，系统不认识，需要在最后追加一段代码</li>\n<li>这个代码作用为解密，解完密后跳转到原来的OEP</li>\n</ol>\n<p>但这时候有一个问题：在解密代码中有可能会用到别的DLL的函数，这个DLL又可能还没有被导入进来，或者原来的PE文件压根没有这个DLL文件要导入，因此需要自己在解密代码中导入需要用到的DLL。</p>\n<p>还有一个问题，解密代码中会有可能有全局变量，地址都是写死的，若解密代码没有加到预定的位置，就不能用了。这种情况需要使用win32汇编来编写解密代码。</p>\n<p><strong>二、不移动各种表，直接加密整个文件</strong></p>\n<ol>\n<li>将SRC文件读入内存，加密</li>\n<li>将加密后的文件追加到Shell文件新增的节中</li>\n</ol>\n<p>此时加壳结束。这时生成的程序中，被加密的SRC程序就是一堆被加密的数据，静态分析是看不出来的，但是动态分析一步一步跟是可以分析的。</p>\n<p>现在有一个问题，这个程序的主体是壳子程序，双击之后跑起来的是壳子，不是被加密的SRC程序。因此要在壳子程序中写解壳程序。因此完成这个加壳的过程，需要加壳程序与解壳程序两步。</p>\n<h1 id=\"加壳程序的编写\"><a href=\"#加壳程序的编写\" class=\"headerlink\" title=\"加壳程序的编写\"></a>加壳程序的编写</h1><p>步骤如下：</p>\n<ol>\n<li>获取Shell程序的路径</li>\n<li>获取src程序的路径</li>\n<li>将src程序读取到内存中，加密</li>\n<li>在Shell程序中新增一个节，并将加密后的src程序追加到Shell程序的新增节中</li>\n<li>加壳完毕</li>\n</ol>\n<p>图解如下：</p>\n<p><img src=\"/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/1.PNG\"></p>\n<p>此时生成的文件还是原来的那个壳子程序，仅仅是在一个新增的节中写入了一堆数据，根本看不到我们加密的程序，只用静态分析的话是无法分析出我们加密的程序的，同时如果被加密的程序是病毒的话，杀毒软件也无法杀死我们的程序（文件免杀）。</p>\n<p>加密程序代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现软件加壳，其中拉伸、增加节、还原的函数代码在前面几节课中已经给出</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Add_Protect</span><span class=\"params\">(<span class=\"type\">char</span>* shell_Filename, <span class=\"type\">char</span>* src_Filename)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1、获得shell壳子程序路径，已经在参数中给出</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//2、在shell程序中新增一个节</span></span><br><span class=\"line\">    <span class=\"type\">char</span>* shell_ImageBuffer = File_To_Image(shell_Filename);           <span class=\"comment\">//拉伸</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* shell_ImageBuffer2 = AddSection(shell_ImageBuffer, <span class=\"number\">0x100000</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* shell_NewBuffer = image_to_file(shell_ImageBuffer2);</span><br><span class=\"line\"></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)shell_NewBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//3、获取src程序路径，已经在参数中给出</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//4、将src程序读取到内存中，加密</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_Buffer = ReadMem_Exe(src_Filename);</span><br><span class=\"line\">\tFILE* src_fp = fopen(src_Filename, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> src_size = getlength(src_fp);</span><br><span class=\"line\">\t<span class=\"comment\">//这里应该是加密函数，对src文件进行加密，这里为了简便起见，只做取反运算</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; src_size; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*(src_Buffer + i) = ~(*(src_Buffer + i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//5、将加密后的src程序追加到shell程序中新增的节中</span></span><br><span class=\"line\">\t<span class=\"comment\">//定位到shell程序最后一个节</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_Section = (<span class=\"type\">char</span>*)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (<span class=\"type\">int</span>)shell_NewBuffer);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(src_Section, src_Buffer, src_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//6、存盘</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize = (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData) + (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData);</span><br><span class=\"line\">\tFILE* pfp = fopen(<span class=\"string\">&quot;C:\\\\Documents and Settings\\\\easy\\\\桌面\\\\Shell_test.exe&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\tfwrite(shell_NewBuffer, size, <span class=\"number\">1</span>, pfp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将文件读入内存中，并返回该块内存首地址</span></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">ReadMem_Exe</span><span class=\"params\">(<span class=\"type\">char</span>* Filename)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE* fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tfp = fopen(Filename, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!fp)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;无法打开 EXE 文件!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsize = getlength(fp);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* FileBuffer = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\tfread(FileBuffer, size, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FileBuffer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取文件大小</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getlength</span><span class=\"params\">(FILE* fp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">\tsize = ftell(fp);</span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0</span>, SEEK_SET);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，想要这个文件运行起来后执行我们的加密程序，还需要下面的解密过程。</p>\n<h1 id=\"解密过程的编写\"><a href=\"#解密过程的编写\" class=\"headerlink\" title=\"解密过程的编写\"></a>解密过程的编写</h1><p>解密过程的代码实际上就是壳子程序的代码</p>\n<ol>\n<li><p>获取shell程序的路径</p>\n</li>\n<li><p>获取src的数据</p>\n<p>(1). 定位到shell文件最后一个节</p>\n<p>(2). 将数据取出，并解密</p>\n</li>\n<li><p>拉伸PE：将解密后的PE文件在内存中拉伸，并存储到缓冲区中</p>\n</li>\n<li><p>以挂起方式运行shell程序</p>\n<p>(1). 以挂起方式创建shell进程，并得到主线程的context</p>\n<p>(2). 卸载外壳程序的文件镜像(<strong>ZwUnmapViewOfSection</strong>函数)。卸载内存镜像后，得到一个干净的4GB空间，可以直接从内存启动一个进程，而不像CreateProcess一样涉及从磁盘上读取</p>\n<p>(3). 在指定的位置(src的ImageBase)申请指定大小(src的SizeOfImage)的内存(<strong>VirtualAllocEx</strong>函数)</p>\n<p>(4). 如果创建失败，查看src是否包含重定位表，如果包含重定位表，就在任意位置申请src的SizeOfImage大小的内存，然后修复重定位表</p>\n<p>(5). 如果在指定位置申请内存失败，并且没有重定位表的数据，直接返回失败</p>\n<p>(6). 如果内存申请成功，将新的数据复制到内存中</p>\n<p>(7). 修正运行环境的基址和入口地址</p>\n<p>(8). 恢复主线程执行</p>\n</li>\n</ol>\n<p>示例代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个简单的壳程序</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(linker,<span class=\"string\">&quot;/subsystem:\\&quot;windows\\&quot;  /entry:\\&quot;mainCRTStartup\\&quot;&quot;</span>   ) </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//一、获取SHELL程序的路径</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* shell_path;</span><br><span class=\"line\">\tshell_path = _getcwd(<span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//将上面获得的路径中的&#x27;\\&#x27;变成&#x27;/&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">strlen</span>(shell_path); j++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(shell_path[j] == <span class=\"string\">&#x27;\\\\&#x27;</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tshell_path[j] = <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">strcat</span>(shell_path, <span class=\"string\">&quot;/Shell_test.exe&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//二、获得SRC数据</span></span><br><span class=\"line\">\t<span class=\"comment\">//将shell程序读入内存</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* shell_FileBuffer = ReadMem_Exe(shell_path); </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!shell_FileBuffer)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;读取文件失败\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//定位各个文件头部分</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)shell_FileBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t<span class=\"comment\">//定位最后一个节</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* Last_Section = (<span class=\"type\">char</span>*)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (<span class=\"type\">int</span>)shell_FileBuffer);</span><br><span class=\"line\">\t<span class=\"comment\">//将最后一个节的数据取出来并解密，放进缓冲区中</span></span><br><span class=\"line\">\t<span class=\"comment\">//解密</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x100000</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*(Last_Section + i) = ~(*(Last_Section + i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//定位各个文件头部分</span></span><br><span class=\"line\">\tdos_header* src_pdh = (dos_header*)Last_Section;</span><br><span class=\"line\">\tpe_header* src_pph = (pe_header*)(src_pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)src_pdh);</span><br><span class=\"line\">\toptional_pe_header* src_poph = (optional_pe_header*)((<span class=\"type\">int</span>)(src_pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)src_pdh);</span><br><span class=\"line\">\t<span class=\"type\">int</span> src_size = src_poph-&gt;SizeOfImage;\t\t\t\t\t <span class=\"comment\">//获取src的SizeOfImage</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_ImageBase = (<span class=\"type\">char</span>*)src_poph-&gt;ImageBase;        <span class=\"comment\">//获取src的ImageBase</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_FileBuffer = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(src_size);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(src_FileBuffer, Last_Section, src_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//三、拉伸PE</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_ImageBuffer = File_To_Image(src_FileBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//四、以挂起方式运行Shell进程，注意是壳子本身这个进程!</span></span><br><span class=\"line\">\t<span class=\"comment\">//0、以挂起方式创建Shell进程</span></span><br><span class=\"line\">\tSTARTUPINFO ie_si = &#123;<span class=\"number\">0</span>&#125;;   \t\t</span><br><span class=\"line\">\tPROCESS_INFORMATION ie_pi;\t\t</span><br><span class=\"line\">\tie_si.cb = <span class=\"keyword\">sizeof</span>(ie_si);\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tCreateProcess(</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, </span><br><span class=\"line\">\t\tshell_path, </span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,  \t\t</span><br><span class=\"line\">\t\tFALSE,                   \t\t</span><br><span class=\"line\">\t\tCREATE_SUSPENDED,     \t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,                    \t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,                    \t\t</span><br><span class=\"line\">\t\t&amp;ie_si,                  \t\t</span><br><span class=\"line\">\t\t&amp;ie_pi                  \t\t</span><br><span class=\"line\">\t\t);\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、获得外壳程序的Context，留着后面备用</span></span><br><span class=\"line\">\tCONTEXT context;</span><br><span class=\"line\">\tcontext.ContextFlags = CONTEXT_FULL;</span><br><span class=\"line\">\t::GetThreadContext(ie_pi.hThread,&amp;context);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、卸载外壳程序的文件镜像(ZwUnmapViewOfSection)</span></span><br><span class=\"line\">\t<span class=\"comment\">// 获取 ZwUnmapViewOfSection 函数指针</span></span><br><span class=\"line\">\tHMODULE hModuleNt = LoadLibrary(<span class=\"string\">&quot;ntdll.dll&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hModuleNt == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;获取ntdll句柄失败\\n&quot;</span>);</span><br><span class=\"line\">\t\tTerminateThread(ie_pi.hThread, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> <span class=\"title function_\">DWORD</span><span class=\"params\">(WINAPI *_TZwUnmapViewOfSection)</span><span class=\"params\">(HANDLE, PVOID)</span>;</span><br><span class=\"line\">\t_TZwUnmapViewOfSection pZwUnmapViewOfSection = (_TZwUnmapViewOfSection)GetProcAddress(hModuleNt, <span class=\"string\">&quot;ZwUnmapViewOfSection&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pZwUnmapViewOfSection == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;获取 ZwUnmapViewOfSection 函数指针失败\\n&quot;</span>);</span><br><span class=\"line\">\t\tTerminateThread(ie_pi.hThread, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpZwUnmapViewOfSection(ie_pi.hProcess, GetModuleHandle(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//3、在指定的位置(src的ImageBase)申请指定大小(src的SizeOfImage)的内存(VirtualAllocEx)</span></span><br><span class=\"line\">\tLPVOID pImageBase = VirtualAllocEx(ie_pi.hProcess, (LPVOID)src_ImageBase, src_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pImageBase != src_ImageBase)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;VirtualAllocEx 错误码: 0x%X\\n&quot;</span>, GetLastError()); <span class=\"comment\">// 0x1e7 试图访问无效地址</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;申请到的指针: 0x%X, 期望的地址: 0x%X\\n&quot;</span>, (DWORD)pImageBase, src_ImageBase);</span><br><span class=\"line\">\t\tTerminateThread(ie_pi.hThread, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//4、如果成功，将Src的PE文件拉伸 复制到该空间中</span></span><br><span class=\"line\">\t<span class=\"comment\">//memcpy(src_ImageBase, src_ImageBuffer, src_size);</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> flag = WriteProcessMemory(ie_pi.hProcess, (LPVOID)src_ImageBase, src_ImageBuffer, src_size, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!flag)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;写入源程序内存镜像失败\\n&quot;</span>);</span><br><span class=\"line\">\t\tTerminateThread(ie_pi.hThread, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//5、修改外壳程序的Context</span></span><br><span class=\"line\">\t<span class=\"comment\">//将Context的OPE 改成 Src的OEP</span></span><br><span class=\"line\">\tcontext.Eax = (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)(src_poph-&gt;AddressOfEntryPoint + src_ImageBase);</span><br><span class=\"line\">\t<span class=\"comment\">//将Context的ImageBase 改成 Src的ImageBase</span></span><br><span class=\"line\">\tWriteProcessMemory(ie_pi.hProcess, (LPVOID)(context.Ebx + <span class=\"number\">8</span>), &amp;src_ImageBase, <span class=\"number\">4</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//6、设置Context 并恢复主线程</span></span><br><span class=\"line\">\tcontext.ContextFlags = CONTEXT_FULL;</span><br><span class=\"line\">\tSetThreadContext(ie_pi.hThread, &amp;context);</span><br><span class=\"line\">\tResumeThread(ie_pi.hThread);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/2.PNG\"></p>\n<p>下面的ShellCode.exe即为我们的壳子程序，MY_PE by win32.exe为我们要保护的程序，加壳后生成的程序为Shell_test.exe，双击这个生成的程序，发现正常运行我们被保护的程序：</p>\n<p><img src=\"/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/3.PNG\"></p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"Win32：线程控制与CONTEXT结构","url":"/2022/05/10/Win32%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8ECONTEXT%E7%BB%93%E6%9E%84/","content":"<p>线程是Windows系统的基础，一个进程里面至少有一个线程。有关线程的创建方法，本文不做赘述。在创建完线程后，如何才能使该线程结束或是暂停呢？本文将对windows线程进行剖析。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"线程控制\"><a href=\"#线程控制\" class=\"headerlink\" title=\"线程控制\"></a>线程控制</h1><p><strong>终止线程</strong></p>\n<p>1、::ExitThread(DWORD dwExitCode);</p>\n<p>每一个线程都会另外开辟一个堆栈，而这种方式会释放掉当前线程的堆栈，但是在线程中new申请堆空间的内存不会被释放掉。参数dwExitCode可以指定线程的退出码，也就是线程的返回值。该值可以通过GetExitCodeThread函数获取对应线程的退出码。这种方式为<strong>同步调用</strong>。</p>\n<p>2、线程函数返回</p>\n<p>该方式指线程自己执行完毕结束，结束前有机会做任何事，例如释放申请的堆空间。这种方式是推荐使用的最好的方式。</p>\n<p>3、::TerminateThread(hThread,dwExitCode);       ::WaitForSingleObject(hThread,INFINITE);</p>\n<p>前两种方法都需要自己写结束条件，且需要用全局变量来判断。这种不需要，且不会清理掉进程堆栈。这种方式为<strong>异步调用</strong>。</p>\n<p><strong>挂起线程</strong></p>\n<p>::SuspendThread(hThread);</p>\n<p><strong>恢复线程</strong></p>\n<p>::ResumeThread(hThread);</p>\n<p>了解了上面控制线程的几个函数，下面来实现一个小例子，如下图</p>\n<p><img src=\"/2022/05/10/Win32%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8ECONTEXT%E7%BB%93%E6%9E%84/1.PNG\"></p>\n<p>点击开始时，编辑框中的数字从0开始自增1，分别点击其他三个按钮完成对线程相应的控制。代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Thread.cpp : Defines the entry point for the application.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;resource.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">HWND hEdit;</span><br><span class=\"line\">HANDLE hThread1;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL CALLBACK <span class=\"title function_\">MainDlgProc</span><span class=\"params\">(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD WINAPI <span class=\"title function_\">ThreadProc1</span><span class=\"params\">(LPVOID lpParameter)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取文本框内容</span></span><br><span class=\"line\">\tTCHAR szBuffer[<span class=\"number\">10</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tDWORD dwIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tDWORD dwCount;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(dwIndex &lt; <span class=\"number\">10000</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tGetWindowText(hEdit,szBuffer,<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">sscanf</span>( szBuffer, <span class=\"string\">&quot;%d&quot;</span>, &amp;dwCount );</span><br><span class=\"line\">\t\tdwCount++;\t\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(szBuffer,<span class=\"number\">0</span>,<span class=\"number\">10</span>);\t\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">sprintf</span>(szBuffer,<span class=\"string\">&quot;%d&quot;</span>,dwCount);\t</span><br><span class=\"line\">\t\tSetWindowText(hEdit,szBuffer);\t</span><br><span class=\"line\">\t\tSleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">\t\tdwIndex++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> APIENTRY <span class=\"title function_\">WinMain</span><span class=\"params\">(HINSTANCE hInstance,</span></span><br><span class=\"line\"><span class=\"params\">                     HINSTANCE hPrevInstance,</span></span><br><span class=\"line\"><span class=\"params\">                     LPSTR     lpCmdLine,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">int</span>       nCmdShow)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> Place code here.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tDialogBox(hInstance, MAKEINTRESOURCE(IDD_DIALOG_MAIN), <span class=\"literal\">NULL</span>, MainDlgProc);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 主对话框回调函数 */</span></span><br><span class=\"line\">BOOL CALLBACK <span class=\"title function_\">MainDlgProc</span><span class=\"params\">(\t\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t\t\t HWND hDlg,\t\t\t<span class=\"comment\">// handle to dialog box\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t\t\t UINT uMsg,\t\t\t<span class=\"comment\">// message\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t\t\t WPARAM wParam,\t\t<span class=\"comment\">// first message parameter\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t\t\t LPARAM lParam\t\t<span class=\"comment\">// second message parameter\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t\t\t )</span>\t\t\t</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>(uMsg)\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t&#123;\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_INITDIALOG:</span><br><span class=\"line\">\t\thEdit = GetDlgItem(hDlg,IDC_EDIT);</span><br><span class=\"line\">\t\tSetWindowText(hEdit,<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_CLOSE:</span><br><span class=\"line\">\t\tEndDialog(hDlg, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_COMMAND:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (LOWORD (wParam))\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&#123;\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> IDC_BUTTON1:</span><br><span class=\"line\">\t\t\thThread1 = ::CreateThread(<span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, ThreadProc1, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//::CloseHandle(hThread1);</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> IDC_BUTTON2:</span><br><span class=\"line\">\t\t\t::SuspendThread(hThread1);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//::CloseHandle(hThread2);</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> IDC_BUTTON3:</span><br><span class=\"line\">\t\t\t::ResumeThread(hThread1);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> IDC_BUTTON4:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//::TerminateThread(hThread,2);\t\t\t\t</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//::WaitForSingleObject(hThread,INFINITE);</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//::ExitThread(5);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">\t\t&#125;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span> ;\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"CONTEXT结构\"><a href=\"#CONTEXT结构\" class=\"headerlink\" title=\"CONTEXT结构\"></a>CONTEXT结构</h1><p>一个线程的执行依赖于Windows系统为其分配的CPU时间片，当线程被挂起或结束时，系统不再为其分配CPU时间片。由于Windows操作系统是一个<strong>非实时性</strong>的系统，当进程从挂起状态想要变为恢复状态继续执行时，线程不是立即恢复执行的，而是等待调度程序将线程变为可调度状态，线程才能恢复执行。</p>\n<p>现在思考这样一个问题：</p>\n<p>每个线程在执行的时候，都会独自占用一个CPU,当系统中的线程数量 &gt; CPU的数量时，就会存在多个线程共用一个CPU的情况。但CPU每次只能运行一个线程，Windows每隔20毫秒会进行线程的切换，那比如线程A执行到地址：0x2345678，此时eax:1 ecx:2 edx:3 ebx:4…还有eflag标志寄存器中的值等等。。。此时，线程执行时间到了，被切换到了线程B。。。。当线程B的时间片也到了，再切换会线程A时，系统是如何知道该从哪个地址开始执行呢？被切换前用到的各种寄存器的值该如何恢复呢？</p>\n<p>答案就是CONTETX结构。线程被挂起后，它的上下文就保存在了该结构中，该结构包含了特定处理器的寄存器数据。下面给出CONTEXT结构定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">CONTEXT</span> &#123;</span>\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// The flags values within this flag control the contents of\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// a CONTEXT record.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// If the context record is used as an input parameter, then\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// for each portion of the context record controlled by a flag\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// whose value is set, it is assumed that that portion of the\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// context record contains valid context. If the context record\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// is being used to modify a threads context, then only that\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// portion of the threads context will be modified.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// If the context record is used as an IN OUT parameter to capture\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// the context of a thread, then only those portions of the thread&#x27;s\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// context corresponding to set flags will be returned.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// The context record is never used as an OUT only parameter.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD ContextFlags;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// This section is specified/returned if CONTEXT_DEBUG_REGISTERS is\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// set in ContextFlags.  Note that CONTEXT_DEBUG_REGISTERS is NOT\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// included in CONTEXT_FULL.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Dr0;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Dr1;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Dr2;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Dr3;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Dr6;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Dr7;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// This section is specified/returned if the\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// ContextFlags word contians the flag CONTEXT_FLOATING_POINT.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    FLOATING_SAVE_AREA FloatSave;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// This section is specified/returned if the\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// ContextFlags word contians the flag CONTEXT_SEGMENTS.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SegGs;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SegFs;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SegEs;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SegDs;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// This section is specified/returned if the\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// ContextFlags word contians the flag CONTEXT_INTEGER.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Edi;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Esi;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Ebx;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Edx;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Ecx;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Eax;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// This section is specified/returned if the\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// ContextFlags word contians the flag CONTEXT_CONTROL.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Ebp;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Eip;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SegCs;              <span class=\"comment\">// MUST BE SANITIZED\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    DWORD   EFlags;             <span class=\"comment\">// MUST BE SANITIZED\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    DWORD   Esp;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SegSs;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// This section is specified/returned if the ContextFlags word\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// contains the flag CONTEXT_EXTENDED_REGISTERS.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// The format and contexts are processor specific\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    BYTE    ExtendedRegisters[MAXIMUM_SUPPORTED_EXTENSION];\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">&#125; CONTEXT;\t\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>根据上面的定义可以看到，通过对ContextFlags值不同的赋值，就可以得到不同的寄存器的值。</p>\n<p>我们知道，Eip寄存器的作用就是指定CPU要执行指令的地址。因此可以通过修改Eip的值来达到线程切换的目的，来执行自己想要执行的代码。下面的代码即可以完成这个任务(具体的应用以后会讲解，这里只做示范)。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过挂起线程后获取context结构的相关值，来修改Eip寄存器</span></span><br><span class=\"line\"><span class=\"comment\">//挂起线程\t\t\t\t</span></span><br><span class=\"line\">SuspendThread(线程句柄);\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">CONTEXT context\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//设置要获取的类型\t\t\t\t\t\t\t</span></span><br><span class=\"line\">context.ContextFlags = CONTEXT_CONTROL;\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//获取\t\t\t\t\t\t\t</span></span><br><span class=\"line\">BOOL ok = ::GetThreadContext(hThread,&amp;context);\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//设置\t\t\t\t\t\t\t</span></span><br><span class=\"line\">context.Eip = <span class=\"number\">0x401000</span>;\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">SetThreadContext(hThread,&amp;context);\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n","categories":["Windows"],"tags":["Windows"]},{"title":"Win32：进程创建与句柄表","url":"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/","content":"<p>上一章节学习了线程相关的知识。有关线程的同步与互斥，例如临界区与互斥量等的问题，网络上有很多资料，这里不做赘述。本章节我们将要学习进程的创建，了解在进程创建过程中系统都做了哪些事情，以及句柄表在内核中的表现形式。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"进程的创建过程\"><a href=\"#进程的创建过程\" class=\"headerlink\" title=\"进程的创建过程\"></a>进程的创建过程</h1><p>首先来区分一下三个概念：程序、镜像、进程。</p>\n<p>程序就是一个存在于磁盘上的PE格式的文件。镜像就是程序在内存中拉伸后的ImageBuffer，这里面是没有线程的。进程就是在内存中运行着的程序，结构与ImageBuffer一样，但是这里面有线程。</p>\n<p>一个程序是怎样运行起来的？</p>\n<p><img src=\"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/1.PNG\"></p>\n<p>步骤1：当系统启动后，创建一个进程：Explorer.exe 也就是桌面进程。</p>\n<p>步骤2：当用户双击某一个EXE时，Explorer进程使用CreateProcess函数创建被双击的EXE，也就是说，我们在桌面上双击创建的进程都是Explorer进程的子进程。</p>\n<p>下面来研究一下，CreateProcess函数都做了哪些事情</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">BOOL <span class=\"title function_\">CreateProcess</span><span class=\"params\">(\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"params\">  LPCTSTR lpApplicationName,                 <span class=\"comment\">// name of executable module\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPTSTR lpCommandLine,                      <span class=\"comment\">// command line string\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class=\"comment\">// SD\t\t\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPSECURITY_ATTRIBUTES lpThreadAttributes,  <span class=\"comment\">// SD\t\t\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  BOOL bInheritHandles,                      <span class=\"comment\">// handle inheritance option\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  DWORD dwCreationFlags,                     <span class=\"comment\">// creation flags\t\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPVOID lpEnvironment,                      <span class=\"comment\">// new environment block\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPCTSTR lpCurrentDirectory,                <span class=\"comment\">// current directory name\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPSTARTUPINFO lpStartupInfo,               <span class=\"comment\">// startup information\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPPROCESS_INFORMATION lpProcessInformation <span class=\"comment\">// process information，OUT类型\t</span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;\t\t\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p><strong>1、创建内核对象</strong></p>\n<p>当我们在3环调用CreateProcess函数时，实际上是系统在0环(内核层)调用NtCreateProcess，这个函数会在该进程的高2G创建一块内存，用来存放一张表(这张表就是句柄表)。在进程刚刚被创建时，这张表是空的。当我们在这个进程中创建其他的内核对象，比如CreateProcess、CreateThread、CreateEvent、CreateMutex、CreateFile、CreateFileMapping等时，我们会得到这些内核对象的地址。但是如果直接将这些地址返回给3环的程序是不安全的，因为有可能会对这些地址进行恶意或者无意的修改导致错误。因此会对这些地址给一个编号，这个编号就是我们说的句柄。</p>\n<p><img src=\"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/2.PNG\"></p>\n<p><strong>2、分配4GB的虚拟空间(Windows32位)</strong></p>\n<p>这部分内容前面章节已经讲过，直接上图</p>\n<p><img src=\"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/3.PNG\"></p>\n<p><strong>3、创建进程的主线程</strong></p>\n<p>当进程的空间创建完毕，EXE与导入表中的DLL都正确加载完毕后，会创建一个线程。当线程得到CPU的时候，程序就开始指向了，EIP的初始值设定为：ImageBase+OEP。然后程序就可以运行起来了。</p>\n<p>创建成功后，会将进程的句柄和ID、主线程的句柄和ID存储在一个结构中，该结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">PROCESS_INFORMATION</span>\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t\t\t\t\t</span><br><span class=\"line\">   HANDLE hProcess;\t\t\t<span class=\"comment\">//进程句柄\t</span></span><br><span class=\"line\">   HANDLE hThread;\t\t\t<span class=\"comment\">//主线程句柄\t</span></span><br><span class=\"line\">   DWORD dwProcessId;\t\t\t<span class=\"comment\">//进程ID\t</span></span><br><span class=\"line\">   DWORD dwThreadId;\t\t\t<span class=\"comment\">//线程ID\t</span></span><br><span class=\"line\">&#125; PROCESS_INFORMATION;\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>该结构就是CreateProcess函数的最后一个OUT参数。至此，整个进程创建的过程结束。</p>\n<p>可以总结一句比较经典的话：<strong>进程就是4GB，线程就是EIP</strong>。</p>\n<h1 id=\"有关CreateProcess函数\"><a href=\"#有关CreateProcess函数\" class=\"headerlink\" title=\"有关CreateProcess函数\"></a>有关CreateProcess函数</h1><p>这个函数有很多参数，而且每个参数都比较重要，这里先对前两个和后两个参数进行讲解。</p>\n<p>第一个参数为lpApplicationName，也就是要打开的进程名字，应该指定程序的完整路径。</p>\n<p>第二个参数为lpCommandLine，命令行参数，不仅可以指定进程名，还可以指定给要创建的进程传参。</p>\n<p>上面两个参数均可以创建一个进程。代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">VOID <span class=\"title function_\">TestCreateProcessByAPPName</span><span class=\"params\">()</span>\t\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t\t\t</span><br><span class=\"line\">\tSTARTUPINFO si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t\t</span><br><span class=\"line\">    \tPROCESS_INFORMATION pi;\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\tsi.cb = <span class=\"keyword\">sizeof</span>(si);\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\tTCHAR szApplicationName[] =TEXT(<span class=\"string\">&quot;c://program files//internet explorer//iexplore.exe&quot;</span>);\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\tBOOL res = CreateProcess(\t\t\t\t\t</span><br><span class=\"line\">\t\tszApplicationName, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\tFALSE, \t\t\t\t</span><br><span class=\"line\">\t\tCREATE_NEW_CONSOLE, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, &amp;si, &amp;pi); \t\t\t\t  \t\t\t\t\t\t</span><br><span class=\"line\">&#125;\t\t\t\t\t\t</span><br><span class=\"line\">VOID <span class=\"title function_\">TestCreateProcessByCmdline</span><span class=\"params\">()</span>\t\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t\t\t</span><br><span class=\"line\">\tSTARTUPINFO si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t\t</span><br><span class=\"line\">    \tPROCESS_INFORMATION pi;\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\tsi.cb = <span class=\"keyword\">sizeof</span>(si);\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\tTCHAR szCmdline[] =TEXT(<span class=\"string\">&quot;c://program files//internet explorer//iexplore.exe http://www.ifeng.com&quot;</span>);\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\tBOOL res = CreateProcess(\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\tszCmdline, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\tFALSE, \t\t\t\t</span><br><span class=\"line\">\t\tCREATE_NEW_CONSOLE, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, &amp;si, &amp;pi); \t\t\t\t</span><br><span class=\"line\">&#125;\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>倒数第二个参数为lpStartupInfo，是一个结构，用来设定要创建的应用程序的属性。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">STARTUPINFO</span>\t\t\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t\t\t</span><br><span class=\"line\">   DWORD cb;\t\t\t</span><br><span class=\"line\">   PSTR lpReserved;\t\t\t</span><br><span class=\"line\">   PSTR lpDesktop;\t\t\t</span><br><span class=\"line\">   PSTR lpTitle;\t\t\t</span><br><span class=\"line\">   DWORD dwX;\t\t\t</span><br><span class=\"line\">   DWORD dwY;\t\t\t</span><br><span class=\"line\">   DWORD dwXSize;\t\t\t</span><br><span class=\"line\">   DWORD dwYSize;\t\t\t</span><br><span class=\"line\">   DWORD dwXCountChars;\t\t\t</span><br><span class=\"line\">   DWORD dwYCountChars;\t\t\t</span><br><span class=\"line\">   DWORD dwFillAttribute;\t\t\t</span><br><span class=\"line\">   DWORD dwFlags;\t\t\t</span><br><span class=\"line\">   WORD wShowWindow;\t\t\t</span><br><span class=\"line\">   WORD cbReserved2;\t\t\t</span><br><span class=\"line\">   PBYTE lpReserved2;\t\t\t</span><br><span class=\"line\">   HANDLE hStdInput;\t\t\t</span><br><span class=\"line\">   HANDLE hStdOutput;\t\t\t</span><br><span class=\"line\">   HANDLE hStdError;\t\t\t</span><br><span class=\"line\">&#125; STARTUPINFO, *LPSTARTUPINFO;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>一般情况下，只需要对该结构的第一个成员赋值就行了，该值为当前结构的大小。</p>\n<p>最后一个参数lpProcessInformation前面讲解过，也是一个结构，存储了进程与主线程的句柄和ID。下面关于句柄与ID进行一下说明，两者概念很多人容易混淆。</p>\n<p>1、句柄与ID都是系统分配的一个编号，句柄是客户程序使用，ID主要是系统调度时使用。</p>\n<p>2、调用CloseHandle关闭进程或者线程句柄的时候，只是让内核计数器减少一个，并不是终止进程或者线程。<strong>进程或线程将继续运行，直到它自己终止运行</strong>(在我们创建和打开内核对象时，该内核对象计数器会+1，内核对象计数器不为0时代表该内核对象还在被使用中)。</p>\n<p>3、线程与进程ID是不可能相同的，但是并不意味着我们得到了ID就能对其进行操作。因为一个进程结束后再运行起来时，其ID是有可能会变化的，前面的那个ID有可能被赋给了其他进程或线程。因此我们3环的客户程序一般都是通过句柄操作。</p>\n<h1 id=\"进程终止\"><a href=\"#进程终止\" class=\"headerlink\" title=\"进程终止\"></a>进程终止</h1><p>与线程类似，进程终止也有三种方式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、VOID　<span class=\"title function_\">ExitProcess</span><span class=\"params\">(UINT fuExitCode)</span>;\t\t\t\t<span class=\"comment\">//进程自己调用\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"number\">2</span>、BOOL <span class=\"title function_\">TerminateProcess</span><span class=\"params\">(HANDLE hProcess, UINT fuExitCode)</span>;\t<span class=\"comment\">//终止其他进程\t\t\t\t</span></span><br><span class=\"line\"><span class=\"number\">3</span>、ExitThread;\t\t\t\t\t\t\t<span class=\"comment\">//终止进程中的所有线程，进程也会终止\t\t\t</span></span><br></pre></td></tr></table></figure>\n\n<p>可以通过GetExitCodeProcess函数获取进程退出结束的退出码。</p>\n<p>进程终止时的相关操作：</p>\n<p>1、进程中剩余的所有线程全部终止运行</p>\n<p>2、进程指定的所有用户对象均被释放，所有内核对象均被关闭</p>\n<p>3、进程内核对象的状态变成收到通知的状态</p>\n<p>4、进程内核对象的使用计数递减1</p>\n<h1 id=\"句柄的继承\"><a href=\"#句柄的继承\" class=\"headerlink\" title=\"句柄的继承\"></a>句柄的继承</h1><p>如果想要让两个进程共享一个内核对象，一种方法是可以在一个进程中创建一个内核对象，并为这个对象起一个名字，然后在另一个进程中通过这个名字打开这个内核对象。</p>\n<p>还有一种方法是通过句柄继承。前面讲过，一个进程在创建时，会创建一张句柄表。那么通过这个进程创建的子进程就可以继承父进程的句柄表。使得不同的进程拥有相同的内核对象。</p>\n<p>以CreateEvent函数为例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">HANDLE  <span class=\"title function_\">CreateEvent</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">　　LPSECURITY_ATTRIBUTES  lpEventAttributes,<span class=\"comment\">// 安全属性 </span></span></span><br><span class=\"line\"><span class=\"params\">　　BOOL  bManualReset,<span class=\"comment\">// 复位方式</span></span></span><br><span class=\"line\"><span class=\"params\">　　BOOL  bInitialState,<span class=\"comment\">// 初始状态</span></span></span><br><span class=\"line\"><span class=\"params\">　　LPCTSTR  lpName <span class=\"comment\">// 对象名称 </span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数lpEventAttributes为一个结构，表示该内核对象是否能被继承，NULL表示不能继承。</p>\n<p>第二个参数bManualReset为复位方式。TRUE表示手动复位，必须通过ResetEvent手动将事件恢复到无信号状态。FALSE表示自动复位，当一个线程被释放以后，系统将自动将事件状态复位为无信号状态;对于自动复位的Event对象，仅释放第一个等待到该事件的线程，对其它线程无效；手动复位的Event对象对所有线程有效。</p>\n<p>第三个参数bInitialState为初始状态。TRUE，初始状态有信号；FALSE，初始状态无信号。</p>\n<p>第四个参数lpName为对象名称。</p>\n<p>再来看一下这张图：</p>\n<p><img src=\"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/2.PNG\"></p>\n<p>当创建内核对象时，安全属性被赋值的话，上图第三个字段就为1，表示该内核对象可以被继承（<strong>注意这里是可以被继承，而不是被继承了</strong>）。安全属性为NULL的话则是0，代表不能被继承。</p>\n<p>那么子进程如何才能继承得到父进程的句柄表中可以被继承的内核对象呢？这就涉及到了CreateProcess函数的第五个参数bInheritHandles。当该值为TRUE时，才能继承父进程句柄表中那些允许被继承的内核对象，为FALSE时，无法继承父进程的所有内核对象（注意这里是将父进程的句柄表复制一份，而不是将内核对象复制）。</p>\n<p>下面做一个实验，进程A创建一个可被继承的内核对象，然后创建一个子进程B来继承它。在A中设置信号的地方下断点，然后在B进程中监听这个对象是否发信号。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父进程A代码</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> szBuffer[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> szHandle[<span class=\"number\">8</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//若要创建能继承的句柄，父进程必须指定一个SECURITY_ATTRIBUTES结构并对它进行初始化\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t<span class=\"comment\">//三个成员的意义：大小、默认安全属性、是否可以继承\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tSECURITY_ATTRIBUTES sa;\t\t\t\t\t\t\t</span><br><span class=\"line\">\tsa.nLength = <span class=\"keyword\">sizeof</span>(sa);\t\t\t\t\t\t\t</span><br><span class=\"line\">\tsa.lpSecurityDescriptor = <span class=\"literal\">NULL</span>;\t\t\t\t\t\t\t</span><br><span class=\"line\">\tsa.bInheritHandle = TRUE; \t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//创建一个可以被继承的内核对象\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tHANDLE g_hEvent = CreateEvent(&amp;sa, TRUE, FALSE, <span class=\"literal\">NULL</span>);\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//组织命令行参数\tC:/Documents and Settings/easy/桌面/逆向/B/Debug/B.exe\t\t\t</span></span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(szHandle,<span class=\"string\">&quot;%x&quot;</span>,g_hEvent);\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(szBuffer,<span class=\"string\">&quot;C:/Documents and Settings/easy/桌面/逆向/B/Debug/B.exe %s&quot;</span>,szHandle);\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义创建进程需要用的结构体\t\t\t</span></span><br><span class=\"line\">\tSTARTUPINFO si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t</span><br><span class=\"line\">\tPROCESS_INFORMATION pi;\t\t\t</span><br><span class=\"line\">\tsi.cb = <span class=\"keyword\">sizeof</span>(si);\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//创建子进程\t\t\t\t</span></span><br><span class=\"line\">\tBOOL res = CreateProcess(\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t</span><br><span class=\"line\">\t\tszBuffer, \t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t</span><br><span class=\"line\">\t\tTRUE,\t\t\t\t\t<span class=\"comment\">//TRUE说明子进程可以继承父进程的句柄表\t\t\t</span></span><br><span class=\"line\">\t\tCREATE_NEW_CONSOLE, \t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, &amp;si, &amp;pi); </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//设置事件为已通知\t\t\t</span></span><br><span class=\"line\">\tSetEvent(g_hEvent);\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//关闭句柄 内核对象不会被销毁，而是对象计数器-1\t\t\t</span></span><br><span class=\"line\">\tCloseHandle(g_hEvent);  \t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子进程B代码</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> szBuffer[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(szBuffer,argv[<span class=\"number\">1</span>],<span class=\"number\">8</span>);\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tDWORD dwHandle = <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">sscanf</span>(szBuffer,<span class=\"string\">&quot;%x&quot;</span>,&amp;dwHandle);\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,argv[<span class=\"number\">0</span>]);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>,dwHandle);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tHANDLE g_hEvent = (HANDLE)dwHandle;\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;开始等待.....\\n&quot;</span>);\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//当事件变成已通知时 \t\t\t\t</span></span><br><span class=\"line\">\tWaitForSingleObject(g_hEvent, INFINITE);\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\tDWORD dwCode = GetLastError();\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;等到消息.....%x\\n&quot;</span>,dwCode);\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\tgetchar();\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先在A进程中的SetEvent(g_hEvent)处下断点，内核对象event被创建时无信号，B进程会在WaitForSingleObject(g_hEvent, INFINITE)处无限等待直到该对象有信号。</p>\n<p><img src=\"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/4.PNG\"></p>\n<p>在进程A中单步执行，使内核对象有信号，子进程B将会得到信号，代表子进程继承了父进程的内核对象。</p>\n<p><img src=\"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/5.PNG\"></p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"保护模式：10、任务段","url":"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/","content":"<p>先来回顾一下前面所学的内容：在调用门、中断门和陷阱门中，发生权限的切换时，堆栈也会随之切换（从3环的堆栈切换成0环的堆栈），堆栈的切换就带来了ESP和SS的切换。在调用门提权时，压入堆栈的数据依次是：SS、ESP、CS和EIP。那么，EIP和CS由要跳转的地方决定，可是ESP和SS从哪里得到呢？答案就是TSS（Task-state segment）任务状态段。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"对TSS的理解\"><a href=\"#对TSS的理解\" class=\"headerlink\" title=\"对TSS的理解\"></a>对TSS的理解</h1><p>先来看一下TSS的结构：</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/1.PNG\"></p>\n<p>TSS是一块内存，结构如上图所示，大小一共为104字节。在上图中可以看到，SS和ESP一共有三组，分别对应了0、1、2环的堆栈，要去几环就拿几环的用。</p>\n<p>在上图的结构中，前四个字节（Previous Task Link）为指向前一个TSS内存的<strong>编号</strong>。然后是0、1、2环的SS和ESP，接着是通用寄存器，后面是各种段寄存器。注意到上面有一个<strong>LDT段选择子</strong>，我们前面讲过段寄存器其中就有一个<strong>LDTR</strong>。既然是段寄存器，就一定有选择子、base和limit。想象一下，当我们用上面这一块TSS来替换全部的寄存器的时候，EAX中写的1就会直接存入EAX寄存器中，但是如果GS中写的是0x23，不是直接将0x23写入GS段寄存器中，而是通过0x23（作为选择子）查表，将查到的64位段描述符扩展成80位，加上16位的0x23，写入96位的GS段寄存器中。同理，TSS中LDT存放的也是一个选择子，对应的是GDT表中的LDT段描述符。因此加载这块TSS时，LDT段选择子会连同对应的LDT段描述符加载到LDTR段寄存器中，这个LDTR就用来描述LDT表的基址和大小。</p>\n<p>联系一下前面的知识，在段选择子中有一个叫做TI的部分，当TI&#x3D;0时查找的是GDT表，这个GDT表可以从GDTR寄存器中获取。同理，当TI&#x3D;1（例如指令mov ds,0x5C）时查找的是LDT表，这个LDT表去哪里找呢？在LDTR中。</p>\n<p>Intel设计TSS的本意，是通过TSS里面存放各种寄存器的值，来达到线程（任务）切换的目的。它的本意是，一个核一张GDT表，随着这个核做任务切换，会由不同的TSS对应不同的任务，一个TSS又对应一个LDT表。因此，对于单核来说，只有一张GDT表，有几个任务就有几个TSS和LDT表。但是Windows并没有按照这个意图来做，而是只用到了TSS中的SS0和ESP0。</p>\n<p>因此，目前就要这样理解：TSS跟任务切换没有关系，不要把二者联系在一起，TSS的意义就是可以同时换掉这一堆寄存器的值，仅此而已。</p>\n<p>注：任务是CPU层面的东西，对应的是操作系统层面的线程。</p>\n<h1 id=\"寻找TSS的流程及相关知识\"><a href=\"#寻找TSS的流程及相关知识\" class=\"headerlink\" title=\"寻找TSS的流程及相关知识\"></a>寻找TSS的流程及相关知识</h1><p>那么CPU如何找到TSS这一块内存呢？看下图：</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/2.PNG\"></p>\n<p>在GDT表中，有一种段描述符叫做TSS段描述符。在操作系统启动时，通过<strong>TR段寄存器</strong>（96位）的段选择子部分找到GDT表中的TSS段描述符，将该描述符加载到TR寄存器的剩余部分。然后通过TR段寄存器中的BASE就得到了TSS的基址，通过Limit就得到了TSS的大小。</p>\n<p><strong>TSS段描述符</strong>结构如下：</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/3.PNG\"></p>\n<p>在GDT表中，当S位（第12位）位0时，就代表这是一个系统段描述符，系统段描述符有很多种（比如调用门、中断门、陷阱门、TSS等），当第8-11位为9或B（1001或1011）时，就代表这是一个TSS段描述符。当为9（1001）时，代表这个TSS段描述符还没有加载到TR寄存器中，为B（1011）代表已经加载到了。</p>\n<p>TR段寄存器的读写：</p>\n<ol>\n<li><p>写TR，即将TSS段描述符加载到TR寄存器</p>\n<p>指令：LTR</p>\n<p>说明：</p>\n<ul>\n<li>用LTR指令去装载的话，仅仅是改变TR寄存器的值(96位)，并没有真正改变TSS。</li>\n<li>LTR指令只能在系统层使用（0环）。</li>\n<li>加载后TSS段描述符会状态位会发生改变，从9（1001）变成B（1011）。</li>\n</ul>\n</li>\n<li><p>读TR</p>\n<p>指令：STR</p>\n<p>说明：如果用STR去读的话，只读了TR的16位 也就是选择子。</p>\n</li>\n</ol>\n<h1 id=\"修改TSS\"><a href=\"#修改TSS\" class=\"headerlink\" title=\"修改TSS\"></a>修改TSS</h1><p>上面介绍了LTR指令只能改变TR寄存器的值，并没有改变真正TSS的位置。CPU通过TR段寄存器来找到TSS。如果我们想用自己的TSS段来替换原来的寄存器，就要修改TR寄存器。TR寄存器的值又是来自TSS段描述符，因此可以通过在GDT表中构造一个TSS段描述符来达到修改TR的目的。</p>\n<p><strong>修改TSS的步骤</strong>：</p>\n<ol>\n<li>自己准备104字节的内存，并赋值。</li>\n<li>构造TSS段描述符：XX00e9XX~XXXX0068。以前学习的段，G位基本上都为1（粒度为4KB），TSS段描述符G位为0（粒度为1字节）。XXXXXXXX为我们自己提供的新的104个字节的地址。</li>\n<li>修改TR段寄存器：<ul>\n<li>如果是在0环，可以使用上面提到的LTR指令。</li>\n<li>如果是在3环，可以使用CALL FAR指令或者JMP FAR指令来修改。</li>\n</ul>\n</li>\n</ol>\n<p>下面以JMP FAR指令来看一下：</p>\n<ul>\n<li>前面讲过JMP FAR去访问代码段的时候，改变的是CS和EIP，例如JMP 0x48：0x12345678，如果0x48是代码段，那么执行后CS&#x3D;0x48，EIP&#x3D;0x12345678。</li>\n<li>如果JMP FAR去访问TSS段的时候，还是上面的指令，0x48是TSS段描述符，则先修改TR寄存器（修改过程就是用0x48指向的TSS段描述符填补TR寄存器），然后用TR.Base指向的TSS段中的值替换当前这些寄存器。</li>\n</ul>\n<p>CALL FAR指令也能修改TR寄存器，区别在于：</p>\n<ol>\n<li>如果使用JMP的话，在TSS表中前4个字节的LINK不变，原来是0后来还是0。但是CALL的话，LINK会自动由CPU写入上一个TSS的段选择子。</li>\n<li>如果使用JMP的话，eflags中的NT位不变为0。CALL的话NT位置1。</li>\n</ol>\n<p>注：NT位影响的是iret指令。</p>\n<ul>\n<li>NT &#x3D; 0时，使用iret，从堆栈中取值，是中断返回。</li>\n<li>NT &#x3D; 1时，使用iret，不是中断返回，会找ptl（TSS的前4个字节，前一个TSS的段选择子）。</li>\n</ul>\n<h1 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a>课后练习</h1><p><strong>问题：</strong></p>\n<p>一、使用CALL去访问一个任务段，并能够正确返回。</p>\n<p>二、使用JMP去访问一个任务段，并能够正确返回。</p>\n<p><strong>答案：</strong></p>\n<p>一、代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\">DWORD dwOk;</span><br><span class=\"line\">DWORD dwESP;</span><br><span class=\"line\">DWORD dwCS;</span><br><span class=\"line\"><span class=\"type\">int</span> High2GValue;</span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) <span class=\"built_in\">MyFunc</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdwOk = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//push fs</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//int 3 \t// int 3 会修改FS</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//pop fs</span></span><br><span class=\"line\">\t\tmov eax, esp</span><br><span class=\"line\">\t\tmov dwESP, eax</span><br><span class=\"line\">\t\tmov ax, cs</span><br><span class=\"line\">\t\tmov word ptr ds : [dwCS], ax</span><br><span class=\"line\">\t\tmov eax, <span class=\"number\">0x8003f00c</span></span><br><span class=\"line\">\t\tmov eax, [eax]</span><br><span class=\"line\">\t\tmov High2GValue, eax</span><br><span class=\"line\">\t\t<span class=\"comment\">//回去的代码</span></span><br><span class=\"line\">\t\tiretd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//构造TSS</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> bu[<span class=\"number\">0x10</span>];</span><br><span class=\"line\">\tDWORD icr3;</span><br><span class=\"line\">\tDWORD TSS[<span class=\"number\">0x68</span>];</span><br><span class=\"line\">\t<span class=\"type\">char</span> buff[<span class=\"number\">6</span>] = &#123; <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x48</span>,<span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;TSS地址: %08X\\n&quot;</span>, TSS);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;设定的ESP堆栈为: %08X\\n&quot;</span>, bu);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;input cr3: \\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%x&quot;</span>, &amp;icr3);\t\t<span class=\"comment\">//通过windbg工具 !process 0 0指令获取，并在此时将构造好的TSS描述符写入</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">0</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// Previous Task Link CPU填充，表示上一个任务的选择子</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">1</span>] = (DWORD)bu;\t\t<span class=\"comment\">// ESP0</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">2</span>] = <span class=\"number\">0x00000010</span>;\t<span class=\"comment\">// SS0</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">3</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// ESP1</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">4</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// SS1</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">5</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// ESP2</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">6</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// SS2</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">7</span>] = (DWORD)icr3;\t<span class=\"comment\">// CR3 学到页就知道是啥了</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">8</span>] = (DWORD)MyFunc;\t<span class=\"comment\">// EIP</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">9</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// EFLAGS</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">10</span>] = <span class=\"number\">0x00000001</span>;\t<span class=\"comment\">// EAX</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">11</span>] = <span class=\"number\">0x00000002</span>;\t<span class=\"comment\">// ECX</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">12</span>] = <span class=\"number\">0x00000003</span>;\t<span class=\"comment\">// EDX</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">13</span>] = <span class=\"number\">0x00000004</span>;\t<span class=\"comment\">// EBX</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">14</span>] = (DWORD)bu;\t<span class=\"comment\">// ESP</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">15</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// EBP</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">16</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// ESI</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">17</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// EDI</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">18</span>] = <span class=\"number\">0x00000023</span>;\t<span class=\"comment\">// ES</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">19</span>] = <span class=\"number\">0x00000008</span>;\t<span class=\"comment\">// CS 0x0000001B</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">20</span>] = <span class=\"number\">0x00000010</span>;\t<span class=\"comment\">// SS 0x00000023</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">21</span>] = <span class=\"number\">0x00000023</span>;\t<span class=\"comment\">// DS</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">22</span>] = <span class=\"number\">0x00000030</span>;\t<span class=\"comment\">// FS 0x0000003B</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">23</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// GS</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">24</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// LDT Segment Selector</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">25</span>] = <span class=\"number\">0x20ac0000</span>;\t<span class=\"comment\">// I/O Map Base Address</span></span><br><span class=\"line\">\t<span class=\"comment\">//修改TR寄存器</span></span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcall fword ptr[buff]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ok: %d    ESP: %x    CS: %x\\n&quot;</span>, dwOk, dwESP, dwCS);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>, High2GValue);</span><br><span class=\"line\">\t<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来分析一下这段代码的执行流程：想要通过CALL FAR访问任务段，首先要自己构造一个TSS内存块，这里我们用数组来构造。里面的ESP0和ESP就填入我们自己申请的bu[0x10]堆栈，并将CS赋值为0x00000008；然后将EIP（即访问任务段后要执行的代码）写成MyFunc函数地址，并分别给通用寄存器赋值。还有一个要点是CR3的值，需要我们在windbg中输入!process 0 0获取该进程的DirBase得到，如下图：</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/4.PNG\"></p>\n<p>然后代码通过call fword ptr[buff] 指令查询GDT表的选择子为0x48的位置，我们需要在这里构造TSS段描述符，结合已经打印出来的TSS数组的地址，构造如下图：</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/5.PNG\"></p>\n<p>执行结果如下图：</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/6.PNG\"></p>\n<p>可以看到，代码通过访问TSS段描述符，使用我们自己构造的TSS段，成功提权并执行了我们的函数，读取了高2G内存。关于提权，我们在TSS中给CS赋值为0x08（0000 1000），CPL&#x3D;0，选择子对应的代码段选择子DPL&#x3D;0，因此提权。如果我们在TSS中给CS赋值为0x1B（0001 1011），那么CPL&#x3D;3，对应的代码段DPL&#x3D;3，不提权。</p>\n<p>此外，我还想验证一下在进入TSS前后4个通用寄存器的变化情况以及堆栈的情况，因此做如下改进：在进入TSS之前将EXA、ECX、EDX、EBX分别赋值为9、8、7、6，在TSS数组中给它们分别赋值1、2、3、4，并且在进入到函数MyFunc()后push几个值，并下断点，最后返回，观察情况。</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/8.PNG\"></p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/9.PNG\"></p>\n<p>在MyFunc()函数中断下来后，可以看到这几个寄存器都被我们构造的TSS替换了，并且当我们向此时的堆栈中压入值时，压入的地址是我们设定的bu[0x10]数组。</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/7.PNG\"></p>\n<p>当代码从MyFunc()中返回后，可以看到这几个通用寄存器又被替换回来了。为什么会替换回来了呢？因为这些值被保存在上一个TSS中，在使用CALL FAR去访问TSS的时候，CPU填充PTL，同时NT位置1，使用iretd非中断返回，通过PTL寻找上一个TSS，替换回原来的寄存器。</p>\n<p>在上面的实验中，有如下两个值得注意的点：</p>\n<ul>\n<li>我这里为0环申请的堆栈为bu[0x10]，首地址为0x12ff70，但是由于压栈是从高地址向低地址，所以在给TSS中的ESP0和ESP赋值时，应该写入的是bu数组的最高地址(DWORD)bu + 0x10，我这里写错了。</li>\n<li>在MyFunc()函数使用int 3指令，由于该指令会修改FS寄存器，因此在该指令前后应该保存并弹出fs，但是我这里不清楚为什么还是会蓝屏。因此在这里使用int 3指令需要小心，至于为什么后面再研究研究。</li>\n</ul>\n<p>二、代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\">DWORD dwOk;</span><br><span class=\"line\">DWORD dwESP;</span><br><span class=\"line\">DWORD dwCS;</span><br><span class=\"line\"><span class=\"type\">int</span> High2GValue;</span><br><span class=\"line\">BYTE PrevTr[<span class=\"number\">6</span>];\t<span class=\"comment\">// 旧TR，供裸函数返回</span></span><br><span class=\"line\"><span class=\"comment\">//0x401020</span></span><br><span class=\"line\"><span class=\"type\">void</span> __declspec(naked) <span class=\"built_in\">MyFunc</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdwOk = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmov eax, esp</span><br><span class=\"line\">\t\tmov dwESP, eax</span><br><span class=\"line\">\t\tmov ax, cs</span><br><span class=\"line\">\t\tmov word ptr ds : [dwCS], ax</span><br><span class=\"line\">\t\tmov eax, <span class=\"number\">0x8003f00c</span></span><br><span class=\"line\">\t\tmov eax, [eax]</span><br><span class=\"line\">\t\tmov High2GValue, eax</span><br><span class=\"line\">\t\t<span class=\"comment\">//回去的代码</span></span><br><span class=\"line\">\t\tjmp fword ptr[PrevTr]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//构造TSS</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> bu[<span class=\"number\">0x1000</span>];</span><br><span class=\"line\">\tDWORD icr3;</span><br><span class=\"line\">\tDWORD TSS[<span class=\"number\">0x68</span>];</span><br><span class=\"line\">\t<span class=\"type\">char</span> buff[<span class=\"number\">6</span>] = &#123; <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0x48</span>,<span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;TSS地址: %08X\\n&quot;</span>, TSS);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;设定的ESP堆栈为: %08X\\n&quot;</span>, bu + <span class=\"number\">0x900</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;input cr3: \\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%x&quot;</span>, &amp;icr3);\t\t<span class=\"comment\">//通过windbg工具 !process 0 0指令获取</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">0</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// Previous Task Link CPU填充，表示上一个任务的选择子</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">1</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// ESP0</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">2</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// SS0</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">3</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// ESP1</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">4</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// SS1</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">5</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// ESP2</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">6</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// SS2</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">7</span>] = (DWORD)icr3;\t<span class=\"comment\">// CR3 学到页就知道是啥了</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">8</span>] = (DWORD)MyFunc; <span class=\"comment\">// EIP</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">9</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// EFLAGS</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">10</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// EAX</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">11</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// ECX</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">12</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// EDX</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">13</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// EBX</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">14</span>] = (DWORD)bu + <span class=\"number\">0x900</span>; <span class=\"comment\">// ESP</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">15</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// EBP</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">16</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// ESI</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">17</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// EDI</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">18</span>] = <span class=\"number\">0x00000023</span>;\t<span class=\"comment\">// ES</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">19</span>] = <span class=\"number\">0x00000008</span>;\t<span class=\"comment\">// CS 0x00000008</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">20</span>] = <span class=\"number\">0x00000010</span>;\t<span class=\"comment\">// SS 0x00000023</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">21</span>] = <span class=\"number\">0x00000023</span>;\t<span class=\"comment\">// DS</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">22</span>] = <span class=\"number\">0x00000030</span>;\t<span class=\"comment\">// FS 0x0000003B</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">23</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// GS</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">24</span>] = <span class=\"number\">0x00000000</span>;\t<span class=\"comment\">// LDT Segment Selector</span></span><br><span class=\"line\">\tTSS[<span class=\"number\">25</span>] = <span class=\"number\">0x20ac0000</span>;\t<span class=\"comment\">// I/O Map Base Address</span></span><br><span class=\"line\">\t<span class=\"comment\">//修改TR寄存器</span></span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//保存原来的TR段寄存器中的选择子</span></span><br><span class=\"line\">\t\tstr ax</span><br><span class=\"line\">\t\tlea edi, [PrevTr + <span class=\"number\">4</span>]</span><br><span class=\"line\">\t\tmov[edi], ax</span><br><span class=\"line\">\t\tjmp fword ptr[buff]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ok: %d    ESP: %x    CS: %x\\n&quot;</span>, dwOk, dwESP, dwCS);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>, High2GValue);</span><br><span class=\"line\">\t<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码的执行流程跟使用CALL时一样，先在0x48对应的位置构造TSS段描述符，然后获取该进程的CR3，就可以跳转到MyFunc函数并成功提权执行，执行结果如下：</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/10.PNG\"></p>\n<p>需要注意的是返回方式，在CALL FAR进入任务段时，在我们构造的TSS中会自动填充Pre Task Link字段（即原来的TR），并且NT位置1，直接使用iretd返回即可。但是通过JMP FAR访问任务段的话，既没有自动填充PreTR，NT位也没有置1，使用iretd返回的话会当成中断返回来使用，因此需要依次向栈中压入SS ESP EFLAGS CS EIP再使用iretd返回，比较麻烦。</p>\n<p>返回的另一种方式，就是仍然通过JMP FAR的方式返回。既然还是跳回来，那么我们就需要在跳走前保存TR，使用指令str可以将此时TR中的段选择子保存起来，然后写入数组中，返回的时候直接JMP FAR到原来的TR就可以找到原来的TSS，就可以跳回来了。</p>\n<p>我在保存TR的时候下了个断点，得到ax的值，然后在GDT中寻找对应的描述符，验证一下：</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/11.PNG\"></p>\n<p>ax&#x3D;0x28（0010 1000），索引为5，看一下GDT表：</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/12.PNG\"></p>\n<p>这里的描述符为80008b04&#96;200020ab，确实是一个TSS段描述符，TSS的地址为80042000，在windbg中看一下：</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/13.PNG\"></p>\n<p>这就是当前的TSS段。</p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：11、任务门","url":"/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/","content":"<p>上节课学习了任务段，知道了我们使用CALL FAR和JMP FAR指令通过任务段描述符跳转到TSS段来替换全部寄存器。这节课我们来学习如何通过任务门来访问任务段。那么这就首先带来了一个问题，明明我们都已经可以通过CALL FAR和JMP FAR指令访问任务段了，为什么还需要任务门呢？</p>\n<span id=\"more\"></span>\n\n<h1 id=\"任务门\"><a href=\"#任务门\" class=\"headerlink\" title=\"任务门\"></a>任务门</h1><p>先来回顾一下，在IDT表中，有三种门描述符，分别是：中断门、陷阱门和任务门。任务门描述符结构如下：</p>\n<p><img src=\"/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/1.PNG\"></p>\n<p>结合上图，我们构造的任务门形式应该为：0000e500&#96;XXXX0000，X部分为TSS段选择子。</p>\n<p>注意任务门描述符中的TSS段选择子的部分，填充的是位于GDT表中的TSS段描述符的选择子（上一节课是通过CALL 与JMP指令来找到TSS段描述符，这是通过任务门中的TSS段选择子来寻找），跨表了。</p>\n<p>任务门执行流程：</p>\n<ol>\n<li>INT N</li>\n<li>查IDT表，找到任务门描述符</li>\n<li>根据任务门描述符中的选择子，查GDT表，找到TSS段描述符</li>\n<li>根据TSS段描述符覆盖TR段寄存器</li>\n<li>找到TSS段，覆盖寄存器，执行EIP所指向的位置。</li>\n<li>iretd返回</li>\n</ol>\n<h1 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h1><p><strong>题目：</strong></p>\n<ol>\n<li>实现任务门访问任务段进0环</li>\n<li>实现任务门访问任务段进1环</li>\n</ol>\n<p><strong>答案：</strong></p>\n<p>1、代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">DWORD dwOk;</span><br><span class=\"line\">DWORD dwESP;</span><br><span class=\"line\">DWORD dwCS;</span><br><span class=\"line\">int High2GValue;</span><br><span class=\"line\">//0x401020</span><br><span class=\"line\">void __declspec(naked) MyFunc()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdwOk = 1;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmov eax, esp</span><br><span class=\"line\">\t\tmov dwESP, eax</span><br><span class=\"line\">\t\tmov ax, cs</span><br><span class=\"line\">\t\tmov word ptr ds : [dwCS], ax</span><br><span class=\"line\">\t\tmov eax, 0x8003f00c</span><br><span class=\"line\">\t\tmov eax, [eax]</span><br><span class=\"line\">\t\tmov High2GValue, eax</span><br><span class=\"line\">\t\t//回去的代码</span><br><span class=\"line\">\t\tiretd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//构造TSS</span><br><span class=\"line\">\tchar bu[0x10];</span><br><span class=\"line\">\tDWORD icr3;</span><br><span class=\"line\">\tDWORD TSS[0x68];</span><br><span class=\"line\">\tprintf(&quot;TSS地址: %08X\\n&quot;, TSS);</span><br><span class=\"line\">\tprintf(&quot;设定的ESP堆栈为: %08X\\n&quot;, bu);</span><br><span class=\"line\">\tprintf(&quot;input cr3: \\n&quot;);</span><br><span class=\"line\">\tscanf(&quot;%x&quot;, &amp;icr3);\t//通过windbg工具 !process 0 0指令获取</span><br><span class=\"line\">\tTSS[0] = 0x00000000; // Previous Task Link CPU填充，表示上一个任务的选择子</span><br><span class=\"line\">\tTSS[1] = (DWORD)bu; // ESP0</span><br><span class=\"line\">\tTSS[2] = 0x00000010; // SS0</span><br><span class=\"line\">\tTSS[3] = 0x00000000; // ESP1</span><br><span class=\"line\">\tTSS[4] = 0x00000000; // SS1</span><br><span class=\"line\">\tTSS[5] = 0x00000000; // ESP2</span><br><span class=\"line\">\tTSS[6] = 0x00000000; // SS2</span><br><span class=\"line\">\tTSS[7] = (DWORD)icr3; // CR3 学到页就知道是啥了</span><br><span class=\"line\">\tTSS[8] = 0x00401020; // EIP</span><br><span class=\"line\">\tTSS[9] = 0x00000000; // EFLAGS</span><br><span class=\"line\">\tTSS[10] = 0x00000000; // EAX</span><br><span class=\"line\">\tTSS[11] = 0x00000000; // ECX</span><br><span class=\"line\">\tTSS[12] = 0x00000000; // EDX</span><br><span class=\"line\">\tTSS[13] = 0x00000000; // EBX</span><br><span class=\"line\">\tTSS[14] = (DWORD)bu;  // ESP</span><br><span class=\"line\">\tTSS[15] = 0x00000000; // EBP</span><br><span class=\"line\">\tTSS[16] = 0x00000000; // ESI</span><br><span class=\"line\">\tTSS[17] = 0x00000000; // EDI</span><br><span class=\"line\">\tTSS[18] = 0x00000023; // ES</span><br><span class=\"line\">\tTSS[19] = 0x00000008; // CS 0x0000001B</span><br><span class=\"line\">\tTSS[20] = 0x00000010; // SS 0x00000023</span><br><span class=\"line\">\tTSS[21] = 0x00000023; // DS</span><br><span class=\"line\">\tTSS[22] = 0x00000030; // FS 0x0000003B</span><br><span class=\"line\">\tTSS[23] = 0x00000000; // GS</span><br><span class=\"line\">\tTSS[24] = 0x00000000; // LDT Segment Selector</span><br><span class=\"line\">\tTSS[25] = 0x20ac0000; // I/O Map Base Address</span><br><span class=\"line\">\t//修改TR寄存器</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint 0x20</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;ok: %d    ESP: %x    CS: %x\\n&quot;, dwOk, dwESP, dwCS);</span><br><span class=\"line\">\tprintf(&quot;%x\\n&quot;, High2GValue);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在IDT表中构造的任务门和在GDT表中构造的TSS任务段描述符分别如下：</p>\n<p><img src=\"/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/2.PNG\"></p>\n<p><img src=\"/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/3.PNG\"></p>\n<p>执行流程与前面CALL FAR到任务段一样。执行结果如下，并且成功提权进入0环。</p>\n<p><img src=\"/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/4.PNG\"></p>\n<p>2、首先构造需要进到一环的所有段寄存器，并写入GDT表中如下位置：</p>\n<p><img src=\"/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/5.PNG\"></p>\n<p>ES、DS不用改。</p>\n<p>SS用00cfb300 0000ffff写入8003f0b0处，对应的选择子为0x1011 0001（第22个，0xb1）。</p>\n<p>CS用00cfbb00 0000ffff写入8003f0b8处，对应的选择子为0x1011 1001（第23个，0xb9）。</p>\n<p>FS用ffc0b3df f0000001写入8003f0c0处，对应的选择子为0x1100 0001（第24个，0xc1）。</p>\n<p>修改的方法就是找到原来进入0环时的选择子，找到对应的描述符，将DPL改为1即可。</p>\n<p>代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">DWORD dwOk;</span><br><span class=\"line\">DWORD dwESP;</span><br><span class=\"line\">DWORD dwCS;</span><br><span class=\"line\">void __declspec(naked) MyFunc()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdwOk = 1;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmov eax, esp</span><br><span class=\"line\">\t\tmov dwESP, eax</span><br><span class=\"line\">\t\tmov ax, cs</span><br><span class=\"line\">\t\tmov word ptr ds : [dwCS], ax</span><br><span class=\"line\">\t\t//回去的代码</span><br><span class=\"line\">\t\tiretd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//构造TSS</span><br><span class=\"line\">\tchar bu[0x10];</span><br><span class=\"line\">\tDWORD icr3;</span><br><span class=\"line\">\tDWORD TSS[0x68];</span><br><span class=\"line\">\tprintf(&quot;TSS地址: %08X\\n&quot;, TSS);</span><br><span class=\"line\">\tprintf(&quot;设定的ESP堆栈为: %08X\\n&quot;, bu);</span><br><span class=\"line\">\tprintf(&quot;input cr3: \\n&quot;);</span><br><span class=\"line\">\tscanf(&quot;%x&quot;, &amp;icr3);\t//通过windbg工具 !process 0 0指令获取</span><br><span class=\"line\">\tTSS[0] = 0x00000000; // Previous Task Link CPU填充，表示上一个任务的选择子</span><br><span class=\"line\">\tTSS[1] = 0x00000000; // ESP0</span><br><span class=\"line\">\tTSS[2] = 0x00000000; // SS0</span><br><span class=\"line\">\tTSS[3] = (DWORD)bu; // ESP1</span><br><span class=\"line\">\tTSS[4] = 0x000000b1; // SS1</span><br><span class=\"line\">\tTSS[5] = 0x00000000; // ESP2</span><br><span class=\"line\">\tTSS[6] = 0x00000000; // SS2</span><br><span class=\"line\">\tTSS[7] = (DWORD)icr3; // CR3 学到页就知道是啥了</span><br><span class=\"line\">\tTSS[8] = (DWORD)MyFunc; // EIP</span><br><span class=\"line\">\tTSS[9] = 0x00000000; // EFLAGS</span><br><span class=\"line\">\tTSS[10] = 0x00000000; // EAX</span><br><span class=\"line\">\tTSS[11] = 0x00000000; // ECX</span><br><span class=\"line\">\tTSS[12] = 0x00000000; // EDX</span><br><span class=\"line\">\tTSS[13] = 0x00000000; // EBX</span><br><span class=\"line\">\tTSS[14] = (DWORD)bu; // ESP</span><br><span class=\"line\">\tTSS[15] = 0x00000000; // EBP</span><br><span class=\"line\">\tTSS[16] = 0x00000000; // ESI</span><br><span class=\"line\">\tTSS[17] = 0x00000000; // EDI</span><br><span class=\"line\">\tTSS[18] = 0x00000023; // ES</span><br><span class=\"line\">\tTSS[19] = 0x000000b9; // CS 0x0000001B</span><br><span class=\"line\">\tTSS[20] = 0x000000b1; // SS 0x00000023</span><br><span class=\"line\">\tTSS[21] = 0x00000023; // DS</span><br><span class=\"line\">\tTSS[22] = 0x000000c1; // FS 0x0000003B</span><br><span class=\"line\">\tTSS[23] = 0x00000000; // GS</span><br><span class=\"line\">\tTSS[24] = 0x00000000; // LDT Segment Selector</span><br><span class=\"line\">\tTSS[25] = 0x20ac0000; // I/O Map Base Address</span><br><span class=\"line\">\t//修改TR寄存器</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint 0x20</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;ok: %d    ESP: %x    CS: %x\\n&quot;, dwOk, dwESP, dwCS);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/6.PNG\"></p>\n<p>这里补充一下，TSS中ESP0、1、2的作用在于当使用任务门等手段进入任务段后再次发生由于权限变化导致堆栈切换时，提供对应权限的对应值，而只有ESP和SS才是当进入任务段后的堆栈。</p>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><p><strong>问题：</strong></p>\n<ol>\n<li>在开头已经提过了，为什么已经可以通过JMP FAR和CALL FAR访问任务段了，还需要任务门呢？</li>\n<li>在保护模式中，当CPU检测到异常的时候，会根据异常的类型来查找对应的异常处理函数。比如当指令检测到除0异常时，将默认执行0号中断。请列出处理除0异常的函数的地址。</li>\n<li>在保护模式中，当CPU检测到异常的时候，会根据异常的类型来查找对应的异常处理函数。比如当指令检测到除0异常时，将默认执行0号中断所指定的异常处理程序。但是，异常处理程序本身仍然可能出现异常，如果异常处理程序出现异常的时候（双重错误），CPU会默认执行8号中断，请分析：8号中断是什么？做了什么事情？替换了哪些寄存器？替换后的值是多少？为什么这样设计？</li>\n</ol>\n<p><strong>答案：</strong></p>\n<ol>\n<li><p>JMP FAR 和 CALL FAR 是主动访问任务段。设计任务门是发生错误后执行int指令被动去往对应的错误处理函数。</p>\n</li>\n<li><p>IDT表内容如下：</p>\n<p><img src=\"/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/7.PNG\"></p>\n<p>0号中断为80538e00&#96;0008f19c。这是一个中断门，对应的代码段选择子为0x08，代码偏移为0x8053f19c，因此处理除0异常的函数地址为0x8053f19c。</p>\n</li>\n<li><p>8号中断为00008500&#96;00501198。这是一个任务门，里面的TSS段选择子为0x50。接着观察GDT表0x50（0101 0000，第10项）对应的段选择子，如下图：</p>\n<p><img src=\"/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/8.PNG\"></p>\n<p>这是一个TSS段描述符，TSS段基址为8054af00。查看这个地址内容，如下：</p>\n<p><img src=\"/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/9.PNG\"></p>\n<p>在这个TSS段中，替换的ESP0 &#x3D; 80547f00，SS0 &#x3D; 0x10，CR3 &#x3D; 00b4f000，EIP &#x3D; 805404ce，其他依次对应图中的值。且对应的程序如下：</p>\n<p><img src=\"/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/10.PNG\"></p>\n<p>当程序出现双重错误后，将执行这里的程序，完成任务切换。</p>\n</li>\n</ol>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：12、10-10-12分页","url":"/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/","content":"<p>之前的课程主要学习的是段的机制，其实段的机制还有很多细节，需要我们在实验过程中详细总结。这节课开始，我们将要学习页的机制。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"物理地址与分页方式\"><a href=\"#物理地址与分页方式\" class=\"headerlink\" title=\"物理地址与分页方式\"></a>物理地址与分页方式</h1><p>我们都知道，一个程序的虚拟内存空间为4GB。但是如果多个程序一起运行，比如三个，那么就至少需要12G的内存才能满足，这样不就出问题了吗？</p>\n<p><img src=\"/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/1.PNG\"></p>\n<p>实际上，这一块4GB是“假”的，很多空的地方都没有东西，只有当这个地方需要东西的时候才会映射。</p>\n<p>接下来区分几个概念：<strong>线性地址、有效地址和物理地址</strong>。</p>\n<p>以指令：<strong>MOV eax, dword ptr ds:[0x12345678]</strong> 为例，0x12345678 为有效地址，ds.Base + 0x12345678 为线性地址。</p>\n<p><img src=\"/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/2.PNG\"></p>\n<p>当我们真正执行上面这条指令，去0x12345678去找对应的数据时，是找不到的，因为这个是假的，是虚拟的，需要转换到物理地址上才行。转换的方式分为10 -10-12和2-9-9-12的形式。</p>\n<p>在Windows XP上可以设置为上面两种分页方式中的一种，需要修改boot.ini文件如下：</p>\n<p><img src=\"/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/3.PNG\"></p>\n<p>noexecute为2-9-9-12分页，将no删掉为10-10-12分页。</p>\n<h1 id=\"10-10-12分页\"><a href=\"#10-10-12分页\" class=\"headerlink\" title=\"10-10-12分页\"></a>10-10-12分页</h1><p>实模式与保护模式的区别在于，实模式访问的地址就是物理地址，而保护模式下访问的地址都是假的。</p>\n<p>对于物理内存管理来说，不可能将一整块物理内存都一块管理，而是将物理内存划分成页来管理，一页的大小为4KB。</p>\n<p>对于Windows物理内存来说，虚拟的4GB内存是紧紧依赖于物理内存的，没有了物理内存，虚拟内存也将什么都不是。因此当物理内存快使用完时，会将一部分数据不常用的物理内存拿出来存到一个内存文件中（硬盘上），然后这一部分物理内存就可以给别的程序用了，这一部分的物理内存大小就是一页（4KB）。</p>\n<p>现在想一下，A进程有一个虚拟地址0x12345678，读取这个内存的值的话需要将其转换为物理地址，同时B进程也有一个地址0x12345678，这两个地址肯定对应的物理地址是不一样的，怎么区分呢？</p>\n<p>每个进程里面的虚拟地址就相当于一个索引，而且每个进程有会有一套自己的目录（CR3），转换为物理地址的时候，每个进程就会根据自己的目录，通过索引找到对应的物理地址。</p>\n<p><img src=\"/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/4.PNG\"></p>\n<p>第一级有一张表，基址由CR3指向（物理地址），大小为4KB（4096字节），第一级的这张表每一项大小为4字节（每一项的值为一个地址），因此第一张表有1024项。</p>\n<p>每一项又指向了一张表，因此第二级有1024张表。（在CPU的所有寄存器中，只有一个寄存器中存放的是物理地址，就是CR3）</p>\n<p>那么具体是如何通过索引找到物理地址的呢？虚拟线性地址为8位十六进制数，也就是32位二进制数，这32位从高位到低位分别分割成10-10-12位，前两个10都是对应物理页目录上的索引，找到最终的物理页后，通过最后12位的偏移，就找到了对应的物理地址。</p>\n<p>10-10-12和2-9-9-12分页模式都是32位下的物理内存管理，在64位中都不用了，但是64位的分页模式与2-9-9-12非常像。</p>\n<h1 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h1><p>题目：在10-10-12分页模式下寻找物理内存。</p>\n<p>首先打开记事本程序，输入helloworld，并找到该字符串的地址：</p>\n<p><img src=\"/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/5.PNG\"></p>\n<p>在windbg中找到该记事本程序的CR3物理地址，也就是DirBase：</p>\n<p><img src=\"/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/6.PNG\"></p>\n<p>前面找到的字符串的虚拟地址为01089eb0，按照10-10-12可以拆为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000 0001 00 --- 0x4</span><br><span class=\"line\">00 1000 1001 --- 0x89</span><br><span class=\"line\">EB0</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/6.PNG\"></p>\n<p>0x4为CR3指向的目录中索引为4的项，又因为每一项大小为4字节，因此想要找到该项的物理地址，就要用索引*4。在前两级目录中，每一项指向的是下一级的物理页基址，最后3位十六进制为该物理页的属性，现在不用管，找地址的时候直接清0就行。寻找过程如下图：</p>\n<p><img src=\"/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/7.PNG\"></p>\n<p>因为是Unicode编码，因此一个字符在内存中是两个字节。</p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：13、挂物理页","url":"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/","content":"<p>上节课简单地了解了10-10-12分页机制，这节课继续深入学习。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"PDE与PTE\"><a href=\"#PDE与PTE\" class=\"headerlink\" title=\"PDE与PTE\"></a>PDE与PTE</h1><p>先来看一张直观的图：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/1.PNG\"></p>\n<p>在上图中，第一级为一张表，叫做页目录表（Page Directory Table），基址由CR3指向，里面的每一项都是一个物理地址，宽度为4字节，指向下一级的页表，页目录表中的每一项叫做页目录项（Page Directory Entry）。第二级也为一张表，但是存在很多这样的表，叫做页表（Page Table），里面的每一项叫做页表项（Page Table Entry），也都是一个物理地址，宽度为4字节，指向最终的物理页。</p>\n<p>为什么要按照10-10-12来分呢？一张页目录表和一张页表大小都为4KB（4096字节），每一项为4字节，故页目录表和页表都有1024项，需要10位二进制来寻找；对于最后的页表大小为4096字节，需要12位二进制来寻址。</p>\n<p><strong>PTE（页表项）的特性</strong>：</p>\n<ol>\n<li>可以有PTE不指向物理页（为空）。</li>\n<li>不同的PTE可以指向相同的物理页。</li>\n<li>一个PTE不能同时指向两个物理页。</li>\n</ol>\n<p>现在来思考一个问题：如何判断两个线性地址在不在一个物理页上？（CR3一样）</p>\n<p>答：在同一个进程中，例如对于 0x12345666 和 0x123456888 这两个虚拟地址，通过前20位的索引发现都指向了同一个PDE、PTE和物理页。因此可以得到结论，如果同一个进程中两个线性地址的高5位十六进制都一样（也就是说位于虚拟地址的同一页，大小为1000h），那么一定在同一个物理页。此外，如果高5位不一样，那么它们对应的PDE和PTE一定不是同一个，但是如果它们的PTE值相等的话，也会在同一个物理页上。</p>\n<h1 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h1><p>接下来做一个实验，如下图：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/2.PNG\"></p>\n<p>当我要在地址为0的地方写入数据时，提示写入失败。这是什么原因呢？</p>\n<p>来看一下0地址的PDT与PTT：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/3.PNG\"></p>\n<p>发现该进程的CR3为21365000，然后查找一下0地址PDT与PTT：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/4.PNG\"></p>\n<p>原来，0地址的PTE为0，即没有指向物理页，因此0地址当然不能写入数据。要想向0地址写入数据，必须要给它挂一个物理页，即给它一个有效的PTE。因此我们可以申请一个变量，得到它的地址，找到对应的PTE，并把这个PTE写入0地址的PTE：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/5.PNG\"></p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/6.PNG\"></p>\n<p>然后将变量a对应的PTE写入0地址对应的PTE上：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/7.PNG\"></p>\n<p>然后再运行程序，发现0地址变成可读可写了：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/8.PNG\"></p>\n<p>最后查看物理内存，发现该值也已经写入物理页上了：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/9.PNG\"></p>\n<h1 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h1><p>问题：</p>\n<ol>\n<li>为变量X再映射一个线性地址，并通过这个新的地址读写X的值。</li>\n<li>10-10-12分页模式物理内存能够识别的最多范围是多少？</li>\n</ol>\n<p>答案：</p>\n<p>1、代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">0x66666666</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;变量a的地址为:%p\\n&quot;</span>, &amp;a);</span><br><span class=\"line\">\t<span class=\"type\">int</span>* new_addr = (<span class=\"type\">int</span>*)(((<span class=\"type\">int</span>)&amp;a)&amp;<span class=\"number\">0xfff</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;新地址为:%p\\n&quot;</span>, new_addr);</span><br><span class=\"line\">\t<span class=\"comment\">//先给新地址挂物理页后执行此操作</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;通过新地址改之前的值:%x\\n&quot;</span>, *new_addr);</span><br><span class=\"line\">\t*new_addr = <span class=\"number\">0x12345678</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;通过新地址改之后的值:%x\\n&quot;</span>, a);</span><br><span class=\"line\">\t<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/10.PNG\"></p>\n<p>这个新的地址0x000000F7C与0地址在同一页，因此对应的PDE和PTE是同一个，因此修改0地址的PTE：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/11.PNG\"></p>\n<p>需要将0地址对应的PTE修改成变量a的PTE，a的PTE如下：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/12.PNG\"></p>\n<p>然后将这个值填入0地址对应的PTE：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/13.PNG\"></p>\n<p>继续运行程序，成功通过新地址读写a变量：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/14.PNG\"></p>\n<p>2、物理页由PTE指向，PTE指向的物理页基址最大值为FFFFF000，故最大的物理地址为FFFFFFFF，也就是4G。</p>\n<h1 id=\"出于好奇的有趣实验\"><a href=\"#出于好奇的有趣实验\" class=\"headerlink\" title=\"出于好奇的有趣实验\"></a>出于好奇的有趣实验</h1><p>上课时，海哥讲说如果想要读取另一个进程的数据，可以将自己的CR3改成目标进程的，然后直接读取自己进程中数据的地址，读的就相当于对方进程的数据，但是我们现在还做不到修改CR3。同时我在想另一种方法，反正目标进程的数据已经写在它对应的物理页上了，那我把自己的相同的地址对应的PTE修改成目标进程目标数据的地址对应的PTE，不就可以读对方的数据了吗？</p>\n<p>出于好奇，我做了如下实验：</p>\n<p>A进程代码：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/15.PNG\"></p>\n<p>在A进程中，地址0x0012FF7C的数据为0x12345678，然后启动B进程，B代码如下：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/16.PNG\"></p>\n<p>正常来讲这个代码读出来的应该是B进程中0x12ff7c位置的值，肯定读不到0x12345678。我们找到A进程目标地址对应的PTE：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/17.PNG\"></p>\n<p>将这个PTE写入B进程0x12ff7c对应的PTE的位置：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/18.PNG\"></p>\n<p>然后继续执行B进程，发现能够读取A进程的0x12345678：</p>\n<p><img src=\"/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/19.PNG\"></p>\n<p>虽然我也不知道有啥用，就纯粹出于好奇，做着玩吧。</p>\n<p>但是还有个问题，那就是B进程代码无法正常结束，应该是因为B进程那一页的内存全都映射到A进程的物理页上了，回不来了，所以如果向回来，还要先将PTE改回原来的值。</p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：14、PDE_PTE属性","url":"/2023/03/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A14%E3%80%81PDE-PTE%E5%B1%9E%E6%80%A7/","content":"<p>上节课我们学习了10-10-12分页是如何找到物理内存的，并了解了PDE和PTE，通过修改PTE达到了挂物理页的效果。这节课来学习PDE和PTE的属性。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"PDE和PTE属性\"><a href=\"#PDE和PTE属性\" class=\"headerlink\" title=\"PDE和PTE属性\"></a>PDE和PTE属性</h1><p>先来看一下上节课我们找的PDE和PTE的图：</p>\n<p><img src=\"/2023/03/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A14%E3%80%81PDE-PTE%E5%B1%9E%E6%80%A7/1.PNG\"></p>\n<p>在使用PDE和PTE的时候，我们将它们的低3位十六进制舍弃，并通过补0的方式，获得物理页的基址。这低3位十六进制（12位二进制）就是PDE和PTE的属性，如图：</p>\n<p><img src=\"/2023/03/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A14%E3%80%81PDE-PTE%E5%B1%9E%E6%80%A7/2.PNG\"></p>\n<p>在上一节课中，我们通过给0地址挂物理页的方式，使其能够被读写。其实，0地址能被读写，不仅仅是因为有了对应的物理页，还需要物理页有效并且具有可读写的属性等。<strong>物理页的属性 &#x3D; PDE属性 &amp; PTE属性</strong>。下面我们依次来看这些属性。</p>\n<p><strong>1、P位</strong></p>\n<p>P &#x3D; 0，物理页无效。</p>\n<p>P &#x3D; 1，物理页有效。</p>\n<p>看PDE与PTE时，先看P位，P位为1时才有效。注意，如果PTE中P位&#x3D;0，影响的是一页4KB，而如果是PDE中P位&#x3D;0，影响的是这1024项所指向的页。</p>\n<p><strong>2、R&#x2F;W位</strong></p>\n<p>R&#x2F;W &#x3D; 0，只读。</p>\n<p>R&#x2F;W &#x3D; 1，可读可写。</p>\n<p>这里可以做一个实验，就是一个const只读字符串常量，正常情况下是不允许通过字符串地址对字符串的值进行修改的，但是为什么不能改呢？是谁限制了呢？答案就是页。把地址对应的PDE和PTE里面的属性改为可读可写即可。</p>\n<p><strong>3、U&#x2F;S位</strong></p>\n<p>U&#x2F;S &#x3D; 0，特权用户。</p>\n<p>U&#x2F;S &#x3D; 1，普通用户。</p>\n<p>这里可以做一个实验，通过修改一个高2G线性地址对应的PDE和PTE的属性，实现ring3对高2G的读写。</p>\n<p>注意区分段页。前面学习段时对高2G内存的读写，是通过提权，将ring3提升到ring0来实现的。而现在是不提权，仍然在ring3实现读取。</p>\n<p><strong>4、PS位</strong></p>\n<p>看到上面的属性图中，只有PDE有PS位，说明PS位只对PDE有意，PS &#x3D; PageSize。</p>\n<p>PS &#x3D; 1，说明PDE直接指向物理页，没有PTE，此时虚拟线性地址只能分成两部分，高10位寻找PDE，低22位（10+12）是页内偏移。此时一个物理页的大小为2^22 &#x3D; 4MB，俗称“大页”。</p>\n<p>这里也可以做一个实验：分析线性地址0x8043F00C的PDE属性。</p>\n<p><strong>5、A位</strong></p>\n<p>表示物理页是否被访问过，被访问过置1，即使只访问一个字节也会导致PDE和PTE的A位置1。</p>\n<p><strong>6、D位</strong></p>\n<p>表示物理页是否被写过，也就是俗称的“脏页”。</p>\n<p>D &#x3D; 0，该物理页没有被写过。</p>\n<p>D &#x3D; 1，该物理页被写过。</p>\n<p><strong>7、关于G位、PWT位、PCD位</strong></p>\n<p>学完控制寄存器与TLB才能讲，此处略过。</p>\n<h1 id=\"一些补充\"><a href=\"#一些补充\" class=\"headerlink\" title=\"一些补充\"></a>一些补充</h1><p>在上面PDE和PTE的属性图中，可以看到PDE和PTE中的第9、10、11位没有标识，说明这三位目前没用，是留给操作系统用的。</p>\n<p>此外，再想象一下如下场景：当A进程在自己的线性地址0x12345678处存了一个10，然后操作系统发现物理内存紧张了，正好发现A进程0x12345678地址对应的那个物理页不常用，于是将这个物理页的内容存在了一个文件里，然后将这个物理页挪作他用。此时，A进程0x12345678对应的PTE要改吗？</p>\n<p>要改，因为要是不改的话，下次再读取0x12345678这个的地址的数据，读出来的就不是10了，而是别的进程的内存。那么怎么改呢？首先得将P位改成0，然后CPU再次访问这个地址的时候，会产生缺页异常，对应IDT表中的0xe号中断。不管是PDE还是PTE，只要是CPU见到P位为0，就走e号中断。在这个e号中断中，操作系统就会根据这9、10、11位来判断，这个PTE无效的原因，是因为没有分配还是被换掉了。如果符合物理页被换掉的情况，那么操作系统就给这个PTE挂一个空白的物理页，然后将原先写入的那个内存文件的内容写回到这个空白页上。</p>\n<p><img src=\"/2023/03/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A14%E3%80%81PDE-PTE%E5%B1%9E%E6%80%A7/3.PNG\"></p>\n<p>缺页是无时无刻不在发生的。具体内容我们等到物理内存管理时再讲。</p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：15、PDE_PTE基址","url":"/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/","content":"<p>这节课我们来学习页目录表和页表的基址。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"4GB的拆分\"><a href=\"#4GB的拆分\" class=\"headerlink\" title=\"4GB的拆分\"></a>4GB的拆分</h1><p>我们首先来拆分两个进程的4GB虚拟地址，观察两个进程中相同的虚拟地址对应的PDE、PTE以及物理页，并寻找一些规律。具体的拆分步骤大家可以自己尝试，这里直接说结论：</p>\n<ol>\n<li>在这两个进程中，低2G（00000000 – 7FFFFFFF）对应的PDE与PTE几乎不同。</li>\n<li>在这两个进程中，高2G（80000000 – FFFFFFFF）对应的PDE与PTE几乎相同。</li>\n<li>低2G（00000000 – 7FFFFFFF）的前64K和后64K都是没有映射的。</li>\n<li>在高2G虚拟地址中，可以发现，虚拟地址0xC0300000对应的物理页就是PDT，虚拟地址0xC0000000对应的物理页就是0地址的PTT，并且从这个地址开始后面的每一页都是PTT。</li>\n</ol>\n<p>具体拆分的过程如下：</p>\n<p><img src=\"/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/1.PNG\"></p>\n<p>可以看到，我们的目标进程的CR3为2a06a000，这也就是PDT的物理地址。下面我们来根据这个CR3来拆分0xC030000这个虚拟地址：</p>\n<p><img src=\"/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/2.PNG\"></p>\n<p>在上图中我们可以看到，0xC030000这个地址对应的物理页，与PDT的地址和内容都一样，这个物理页就是PDT。也就是说，在这个进程的4GB虚拟地址空间中，该虚拟地址保存的内容就是PDT表的内容。</p>\n<p>同理我们来拆分一下虚拟地址0xC0000000的物理页：</p>\n<p><img src=\"/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/4.PNG\"></p>\n<p>我们的目标进程的CR3为0x1357d000，当我们想要查看虚拟地址0xC0000000的内容（也就是查看该地址的物理页）时，输入的命令依次为上图中的1、2、3语句，而当我们想要查看0地址对应的PTT时，输入的命令依次为上图中的2、3语句。</p>\n<p>此时我们可以得到结论，0xC0300000存储的是PDT表，0xC0000000存储的是第一张PTT表。</p>\n<h1 id=\"PDT和PTT的基址\"><a href=\"#PDT和PTT的基址\" class=\"headerlink\" title=\"PDT和PTT的基址\"></a>PDT和PTT的基址</h1><p>为什么需要PDT和PTT有基址呢？</p>\n<p>试想一下，在操作系统程序中，当它想让一个地址可以访问的时候，必须要给这个线性地址挂上物理页，也就是填写正确的PDE和PTE。也就是说，程序必须要能够访问PDT和PTT这两张表，才能填写里面的内容。可是，这两张表都位于物理地址上，基址都是物理地址，程序无法访问。因此，在程序4GB进程空间的某个地方，一定保存着PDT和PTT。</p>\n<p>先来看一下在进程的4GB虚拟地址空间中PDT和PTT表的概览图：</p>\n<p><img src=\"/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/6.PNG\"></p>\n<p>下面我们来依次看一下在这4GB虚拟地址空间中的PDT和PTT：</p>\n<p><strong>PDT：</strong></p>\n<ol>\n<li>从虚拟地址 0xC0300000 开始的一页，就是页目录表PDT。</li>\n<li>这个物理页既是页目录表，本身也是页表。</li>\n<li>页目录表是一张特殊的页表，其中的每一项指向的不是普通的物理页，而是指向其他的页表（其中第0x300项指向的是自己这张页表）。</li>\n</ol>\n<p><strong>PTT：</strong></p>\n<p>从前面学习的知识我们知道，每一张PTT都是由PDT中的PDE指向的，那么在进程的4GB虚拟地址空间中，我们是否能通过 0xC0300000 这张PDT找到其他PTT呢？</p>\n<p>答案是不能。因为尽管PTT是由 0xC0300000 这张PDT中的PDE指向的，但里面存的值仍然是物理地址，在程序中还是无法使用这个地址。</p>\n<ol>\n<li>页表被映射到了从 0xC0000000 到 0xC03FFFFF 的4M地址空间。</li>\n<li>在这1024个表中有一张特殊的表：页目录表。</li>\n<li>0xC0000000是第一张页表的地址，后面的页表紧挨着分布。</li>\n</ol>\n<p><strong>公式总结：</strong></p>\n<ol>\n<li><p>什么是PDI和PTI？</p>\n<p>在10-10-12中，第一个10就是PDI，第二个10就是PTI。</p>\n</li>\n<li><p>访问页目录表的公式（修改PDE）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0xC0300000 + PDI*4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>访问页表的公式（修改PTE）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0xC0000000 + PDI*4096 + PTI*4</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>掌握了这两个地址及公式，就掌握了一个进程所有的物理内存的读写权限。</p>\n<h1 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a>课后练习</h1><p><strong>问题：</strong></p>\n<p>一、通过代码实现挂物理页</p>\n<p>二、逆向分析MmlsAddressValid()函数</p>\n<p><strong>答案：</strong></p>\n<p>一、代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span>* addr;</span><br><span class=\"line\"><span class=\"comment\">//提权后执行的函数，地址为0x00401030，有2个参数分别是要挂物理页的地址和要使用的临时的地址</span></span><br><span class=\"line\"><span class=\"type\">void</span> _declspec(naked) <span class=\"built_in\">MakeMemoryPage</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//int 3</span></span><br><span class=\"line\">\t\tpushad\t\t<span class=\"comment\">//8个寄存器，32个字节</span></span><br><span class=\"line\">\t\tpushfd\t\t<span class=\"comment\">//标志寄存器，4个字节</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmov eax,[esp+<span class=\"number\">0x24</span>+<span class=\"number\">0x8</span>]</span><br><span class=\"line\">\t\tshr eax,<span class=\"number\">0</span>ah</span><br><span class=\"line\">\t\t<span class=\"keyword\">and</span> eax,<span class=\"number\">3F</span>FFFCh</span><br><span class=\"line\">\t\tsub eax,<span class=\"number\">40000000</span>h\t<span class=\"comment\">//此时eax为目标PTE的地址</span></span><br><span class=\"line\">\t\tmov eax,[eax]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmov ecx,[esp+<span class=\"number\">0x24</span>+<span class=\"number\">0x8</span>+<span class=\"number\">0x4</span>]</span><br><span class=\"line\">\t\tshr ecx,<span class=\"number\">0</span>ah</span><br><span class=\"line\">\t\t<span class=\"keyword\">and</span> ecx,<span class=\"number\">3F</span>FFFCh</span><br><span class=\"line\">\t\tsub ecx,<span class=\"number\">40000000</span>h\t<span class=\"comment\">//此时ecx指向目标地址对应的PTE</span></span><br><span class=\"line\">\t\tmov [ecx],eax</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpopfd</span><br><span class=\"line\">\t\tpopad</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//int 3</span></span><br><span class=\"line\">\t\tretf <span class=\"number\">0x8</span>\t<span class=\"comment\">//注意堆栈平衡，写错蓝屏</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//先用调用门有参数提权</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = <span class=\"number\">0x66666666</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* Temp_addr = &amp;temp;</span><br><span class=\"line\">\taddr = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buff[<span class=\"number\">6</span>];</span><br><span class=\"line\">\t*(DWORD*)&amp;buff[<span class=\"number\">0</span>] = <span class=\"number\">0x12345678</span>;</span><br><span class=\"line\">\t*(WORD*)&amp;buff[<span class=\"number\">4</span>] = <span class=\"number\">0x48</span>;\t\t<span class=\"comment\">//buff[6] = &#123;0x78, 0x56, 0x34, 0x12, 0x48, 0x00&#125;</span></span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpush addr</span><br><span class=\"line\">\t\tpush Temp_addr</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcall fword ptr[buff]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*addr = <span class=\"number\">0x12345678</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;挂物理页后0地址的值为:%x\\n&quot;</span>, *addr);</span><br><span class=\"line\">\t<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释一下上段代码，首先申请了一个临时变量temp，随便赋值，我们需要将这个临时变量所在的物理页挂给目标地址（这里是0地址），也就是将这个临时变量的地址对应的PTE写入0地址对应的PTE上。因此，我这里将0地址和这个临时变量的地址作为参数压入堆栈，通过调用门有参数提权，进入MakeMemoryPage()函数。在该函数内部，实现PTE的赋值。寻找PTE的方法的解释参考第二题对MmlsAddressValid()函数的逆向分析。</p>\n<p>在windbg中修改GDT表：</p>\n<p><img src=\"/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/7.PNG\"></p>\n<p>运行结果如下：</p>\n<p><img src=\"/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/8.PNG\"></p>\n<p>二、MmlsAddressValid()函数为内核函数，作用为判断地址是否有效</p>\n<p>可以在windbg中，输入u MmIsAddressValid L20查看该函数的汇编代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kd&gt; u MmIsAddressValid L20</span><br><span class=\"line\">nt!MmIsAddressValid:</span><br><span class=\"line\">804e4661 8bff            mov     edi,edi</span><br><span class=\"line\">804e4663 55              push    ebp</span><br><span class=\"line\">804e4664 8bec            mov     ebp,esp</span><br><span class=\"line\">804e4666 8b4d08          mov     ecx,dword ptr [ebp+8]</span><br><span class=\"line\">804e4669 8bc1            mov     eax,ecx</span><br><span class=\"line\">804e466b c1e814          shr     eax,14h</span><br><span class=\"line\">804e466e bafc0f0000      mov     edx,0FFCh</span><br><span class=\"line\">804e4673 23c2            and     eax,edx</span><br><span class=\"line\">804e4675 2d0000d03f      sub     eax,3FD00000h</span><br><span class=\"line\">804e467a 8b00            mov     eax,dword ptr [eax]</span><br><span class=\"line\">804e467c a801            test    al,1</span><br><span class=\"line\">804e467e 0f84d2f10000    je      nt!MmIsAddressValid+0x4f (804f3856)</span><br><span class=\"line\">804e4684 84c0            test    al,al</span><br><span class=\"line\">804e4686 7824            js      nt!MmIsAddressValid+0x53 (804e46ac)</span><br><span class=\"line\">804e4688 c1e90a          shr     ecx,0Ah</span><br><span class=\"line\">804e468b 81e1fcff3f00    and     ecx,3FFFFCh</span><br><span class=\"line\">804e4691 81e900000040    sub     ecx,40000000h</span><br><span class=\"line\">804e4697 8bc1            mov     eax,ecx</span><br><span class=\"line\">804e4699 8b08            mov     ecx,dword ptr [eax]</span><br><span class=\"line\">804e469b f6c101          test    cl,1</span><br><span class=\"line\">804e469e 0f84b2f10000    je      nt!MmIsAddressValid+0x4f (804f3856)</span><br><span class=\"line\">804e46a4 84c9            test    cl,cl</span><br><span class=\"line\">804e46a6 0f88b6de0300    js      nt!MmIsAddressValid+0x3f (80522562)</span><br><span class=\"line\">804e46ac b001            mov     al,1</span><br><span class=\"line\">804e46ae 5d              pop     ebp</span><br><span class=\"line\">804e46af c20400          ret     4</span><br></pre></td></tr></table></figure>\n\n<p>或者在xp下的c:\\windows\\system32\\ 中找到内核程序，用IDA分析。其中ntkrnlpa.exe 为2-9-9-12 分页内核程序，ntoskrnl.exe 为10-10-12 分页内核程序。</p>\n<p><img src=\"/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/9.PNG\"></p>\n<p>用IDA打开该文件，全局搜索Ctrl+t，所搜字符串</p>\n<p><img src=\"/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/10.PNG\"></p>\n<p>函数分析如下：</p>\n<p><img src=\"/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/11.PNG\"></p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：17、TLB","url":"/2023/04/19/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A17%E3%80%81TLB/","content":"<p>测试</p>\n<span id=\"more\"></span>","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：16、2-9-9-12分页","url":"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/","content":"<p>前面学习了10-10-12分页模式，在这种分页模式下，最多可以寻址4GB物理内存。但是随着硬件的发展，4GB的物理内存范围慢慢无法满足要求了，那么怎么才能扩大物理内存的寻址范围呢？Intel涉及了新的分页模式，就是本节课要学习的2-9-9-12分页，又称为PAE（物理地址扩展）分页。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"如何扩大物理内存寻址\"><a href=\"#如何扩大物理内存寻址\" class=\"headerlink\" title=\"如何扩大物理内存寻址\"></a>如何扩大物理内存寻址</h1><p>回顾一下，在10-10-12分页中，为什么物理地址的寻址范围是4GB呢？</p>\n<p>首先规定好了一个物理页的大小为4K（4096字节），每一个物理页基址都是由PTE指定的。在10-10-12中，PTE长度为4字节，也就是32位。因此在这种分页模式下，可寻址的物理内存范围就是 2^32&#x3D;4GB。</p>\n<p>因此，想要增大物理内存范围，就需要扩大PTE的长度。考虑到对其的因素，扩大后的PTE长度为8个字节。这样一来，由于一页的大小还是4K，因此一张PTT表中的PTE数量就变成了512，2^9&#x3D;512，需要9位二进制作为索引就能访问每一个PTE，这就是2-9-9-12中的第二个9。</p>\n<p>同理，PDE也扩展为8字节，PDT表中有512项PDE，也需要9位二进制索引才能访问。</p>\n<p>那么对于32位虚拟线性地址，32-9-9-12&#x3D;2，还剩下两位怎么办呢？看下PAE分页模式的概览图：</p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/1.PNG\"></p>\n<p>PAE模式比原来的10-10-12分页多了一级表，叫做页目录指针表（PDPTT），基址由CR3指向。在这张表中有4项PDPTE，分别指向了其他PDT表。</p>\n<p>这样一来，能寻址的物理地址范围由原来的32位（4G）变成了36位（64G）。</p>\n<p>还有一点需要注意的是，PDPTT这张表是由CR3指向的，而CR3寄存器长度还是32位不变，因此PDPTT这张表一定位于物理地址的4GB以内，而PDT和PTT是可以高于4G的。</p>\n<p>可以在boot.ini文件中，将execute改为noexecute并重启，即可开启PAE分页模式。</p>\n<h1 id=\"结构解析\"><a href=\"#结构解析\" class=\"headerlink\" title=\"结构解析\"></a>结构解析</h1><p><strong>一、PDPTE</strong></p>\n<p>结构如下：</p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/2.PNG\"></p>\n<p>第0位（P位）永远为1；PWT和PCD位得等到TLB等讲完以后再说；Avail留给操作系统用。</p>\n<p>35-12 存储的是PDT页目录表的基址，低12位补0，共36位，得到PDT页目录基址。</p>\n<p><strong>二、PDE</strong></p>\n<p>结构如下：</p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/3.PNG\"></p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/4.PNG\"></p>\n<p>当第7位（PS位）为1时，35-21位是大页的物理地址，36位的物理地址低21位为0。此时PDE直接指向物理页，物理页的大小为2^21&#x3D;2M，且都是2M对齐。</p>\n<p>当PS &#x3D; 0时，35-12位是PTT页表基址,低12位补0，共36位。</p>\n<p>注意第7位（PS位）和第8位（G位），当对应大页时，G位用来标识是否是全局页。当对应小页时，PDE指向的不是物理页，而是PTE，G位永远为0。</p>\n<p><strong>三、PTE</strong></p>\n<p>结构如下：</p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/5.PNG\"></p>\n<p>PTE中35-12是物理页基址，24位，低12位补0。物理页基址+12位的页内偏移指向具体数据。</p>\n<p><strong>四、XD位（DEP防护）</strong></p>\n<p>回想一下，在学习段的时候，在段属性中有一个属性叫做是否可执行，但是在10-10-12模式下页的属性里面没有这个属性。于是就在2-9-9-12模式下新增加了一个属性叫做XD位，来控制是否可执行，让数据的页不能当作代码来执行。</p>\n<p>从汇编代码的角度来说，如何区分可读可写可执行呢？拿mov指令来说，能作为源操作数的是可读的，能作为目的操作数的是可写的，能赋值给EIP的是可执行的。</p>\n<p>XD位位于PDE和PTE的最高位：</p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/16.PNG\"></p>\n<p>当X位置1时，即使EIP指向了数据区，也不会执行。</p>\n<h1 id=\"课堂练习\"><a href=\"#课堂练习\" class=\"headerlink\" title=\"课堂练习\"></a>课堂练习</h1><p>问题：在2-9-9-12分页模式下练习寻找物理地址。</p>\n<p>答案：打开记事本写入字符串，并用ce定位，字符串地址为0x010827B8</p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/6.PNG\"></p>\n<p>0x010827B8拆开为：00&#x2F;00 0001 000&#x2F;0 1000 0010 &#x2F;7B8</p>\n<p>分别对应2-9-9-12为：0            0x8               0x82        0x7B8</p>\n<p>在windbg中查找记事本进程CR3：</p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/7.PNG\"></p>\n<p>查找过程如下：</p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/8.PNG\"></p>\n<h1 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a>课后练习</h1><p><strong>问题：</strong></p>\n<ol>\n<li>给0线性地址挂上物理页</li>\n<li>修改页属性，实现应用层读写高2G内存地址</li>\n<li>逆向分析MmlsAddressValid()函数，找到PAE分页模式下页目录表、页表的基址</li>\n<li>编写代码实现第二题</li>\n</ol>\n<p><strong>答案：</strong></p>\n<p>一、代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = <span class=\"number\">0x66666666</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;临时变量的地址为:%p\\n&quot;</span>, &amp;temp);</span><br><span class=\"line\">\t<span class=\"type\">int</span>* p = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t*p = <span class=\"number\">0x12345678</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0地址的值为:%x\\n&quot;</span>, *p);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/9.PNG\"></p>\n<p>我们使用临时变量的地址 0x0012FF7C 对应的PTE，赋值给0地址对应的PTE即可。</p>\n<p>00&#x2F;00 0000 000&#x2F;1 0010 1111 F7C 对应2-9-9-12为0  0 12F  F7C。</p>\n<p>查看该地址对应的PTE：</p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/10.PNG\"></p>\n<p>我们需要的PTE即为00000000&#96;160c3886，赋值给0地址对应的PTE：</p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/11.PNG\"></p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/12.PNG\"></p>\n<p>成功给0地址挂上物理页，并能够读写。</p>\n<p>二、代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* addr = (<span class=\"type\">int</span>*)<span class=\"number\">0x8003f00c</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;该高2G地址的值为:%x\\n&quot;</span>, *addr);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取 8003f00c 地址对应的PDE和PTE，修改U&#x2F;S位的属性为1即可。</p>\n<p>1000 0000 0000 0011 1111 00C  对应2-9-9-12为2     0    3f   00C</p>\n<p>使用windbg修改U&#x2F;S位：</p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/13.PNG\"></p>\n<p>这里我一开始仅仅修改了PDE和PTE的U&#x2F;S位为1，但是却还是无法读取这个地址的内容。查了一下资料才发现还应该修改PTE的G位。因为当PTE的G位为1时，代表这个小页是全局页，已经缓存在了TLB中，即便现在修改了U&#x2F;S属性，程序使用的还是之前的属性。</p>\n<p>那么为什么PDE的G位不用管呢（虽然我也顺便修改了）？因为只有当PDE的PS&#x3D;1（大页）时，PDE的G位才生效，对应的是大页为全局页。</p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/14.PNG\"></p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/15.PNG\"></p>\n<p>在修改了PDE和PTE的U&#x2F;S位、PTE的G位后，成功读取了高2G的内容。</p>\n<p>三、与10-10-12模式下思路类似，只是一些基址发生了变化。注意要分析的文件为ntkrnlpa.exe</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.text:00439980 var_8           = dword ptr -8</span><br><span class=\"line\">.text:00439980 var_4           = dword ptr -4</span><br><span class=\"line\">.text:00439980 VirtualAddress  = dword ptr  8</span><br><span class=\"line\">.text:00439980</span><br><span class=\"line\">.text:00439980                 mov     edi, edi</span><br><span class=\"line\">.text:00439982                 push    ebp</span><br><span class=\"line\">.text:00439983                 mov     ebp, esp</span><br><span class=\"line\">.text:00439985                 push    ecx</span><br><span class=\"line\">.text:00439986                 push    ecx</span><br><span class=\"line\">.text:00439987                 mov     ecx, [ebp+VirtualAddress] ; ecx = 虚拟地址</span><br><span class=\"line\">.text:0043998A                 push    esi</span><br><span class=\"line\">.text:0043998B                 mov     eax, ecx        ; eax = 虚拟地址</span><br><span class=\"line\">.text:0043998D                 shr     eax, 12h        ; 虚拟地址右移18位</span><br><span class=\"line\">.text:00439990                 mov     esi, 3FF8h</span><br><span class=\"line\">.text:00439995                 and     eax, esi        ; 保留PDI并左移3位，相当于PDI*8，并且保留了2位的那个值并且乘以了4096，相当于找到了第几个PDT，由此可见在虚拟地址中，这4个PDT是连起来的</span><br><span class=\"line\">.text:00439997                 sub     eax, 3FA00000h  ; 第一张PDT虚拟地址为0xC0600000，eax为PDE的地址</span><br><span class=\"line\">.text:0043999C                 mov     edx, [eax]</span><br><span class=\"line\">.text:0043999E                 mov     eax, [eax+4]    ; eax`edx为该虚拟地址对应的PDE</span><br><span class=\"line\">.text:004399A1                 mov     [ebp+var_4], eax ; var4为该虚拟地址的PDE高4字节</span><br><span class=\"line\">.text:004399A4                 mov     eax, edx        ; eax为该虚拟地址的PDE的低4字节</span><br><span class=\"line\">.text:004399A6                 push    edi</span><br><span class=\"line\">.text:004399A7                 and     eax, 1          ; 取PDE的P位</span><br><span class=\"line\">.text:004399AA                 xor     edi, edi</span><br><span class=\"line\">.text:004399AC                 or      eax, edi</span><br><span class=\"line\">.text:004399AE                 jz      short loc_439A11 ; 如果PDE的P位为0，则跳转，返回假</span><br><span class=\"line\">.text:004399B0                 mov     edi, 80h</span><br><span class=\"line\">.text:004399B5                 and     edx, edi        ; 取PDE的PS位</span><br><span class=\"line\">.text:004399B7                 push    0</span><br><span class=\"line\">.text:004399B9                 mov     [ebp+var_8], edx</span><br><span class=\"line\">.text:004399BC                 pop     eax</span><br><span class=\"line\">.text:004399BD                 jz      short loc_4399C3 ; PS = 0跳转到小页处理</span><br><span class=\"line\">.text:004399BF                 test    eax, eax</span><br><span class=\"line\">.text:004399C1                 jz      short loc_439A15 ; PS = 1，大页，跳转到结束，返回1</span><br><span class=\"line\">.text:004399C3</span><br><span class=\"line\">.text:004399C3 loc_4399C3:                             ; CODE XREF: MmIsAddressValid(x)+3D↑j</span><br><span class=\"line\">.text:004399C3                 shr     ecx, 9          ; 虚拟地址右移9位，也就是先右移12位（去掉虚拟地址中的页内偏移部分），然后乘以8</span><br><span class=\"line\">.text:004399C6                 and     ecx, 7FFFF8h</span><br><span class=\"line\">.text:004399CC                 mov     eax, [ecx-3FFFFFFCh] ; eax = [ecx + C0000000 + 4],eax为PTE高4字节</span><br><span class=\"line\">.text:004399D2                 sub     ecx, 40000000h</span><br><span class=\"line\">.text:004399D8                 mov     edx, [ecx]      ; edx为PTE低4字节</span><br><span class=\"line\">.text:004399DA                 mov     [ebp+var_4], eax ; 将PTE高4字节先保存起来</span><br><span class=\"line\">.text:004399DD                 push    ebx</span><br><span class=\"line\">.text:004399DE                 mov     eax, edx</span><br><span class=\"line\">.text:004399E0                 xor     ebx, ebx</span><br><span class=\"line\">.text:004399E2                 and     eax, 1          ; 判断PTE的P位</span><br><span class=\"line\">.text:004399E5                 or      eax, ebx</span><br><span class=\"line\">.text:004399E7                 pop     ebx</span><br><span class=\"line\">.text:004399E8                 jz      short loc_439A11 ; P位为0，返回假</span><br><span class=\"line\">.text:004399EA                 and     edx, edi        ; 前面已经给edi赋值为80h，此处即为取PTE的PAT位</span><br><span class=\"line\">.text:004399EC                 push    0</span><br><span class=\"line\">.text:004399EE                 mov     [ebp+var_8], edx</span><br><span class=\"line\">.text:004399F1                 pop     eax</span><br><span class=\"line\">.text:004399F2                 jz      short loc_439A15</span><br><span class=\"line\">.text:004399F4                 test    eax, eax</span><br><span class=\"line\">.text:004399F6                 jnz     short loc_439A15</span><br><span class=\"line\">.text:004399F8                 and     ecx, esi</span><br><span class=\"line\">.text:004399FA                 mov     ecx, [ecx-3FA00000h]</span><br><span class=\"line\">.text:00439A00                 mov     eax, 81h</span><br><span class=\"line\">.text:00439A05                 and     ecx, eax</span><br><span class=\"line\">.text:00439A07                 xor     edx, edx</span><br><span class=\"line\">.text:00439A09                 cmp     ecx, eax</span><br><span class=\"line\">.text:00439A0B                 jnz     short loc_439A15</span><br><span class=\"line\">.text:00439A0D                 test    edx, edx</span><br><span class=\"line\">.text:00439A0F                 jnz     short loc_439A15</span><br><span class=\"line\">.text:00439A11</span><br><span class=\"line\">.text:00439A11 loc_439A11:                             ; CODE XREF: MmIsAddressValid(x)+2E↑j</span><br><span class=\"line\">.text:00439A11                                         ; MmIsAddressValid(x)+68↑j</span><br><span class=\"line\">.text:00439A11                 xor     al, al</span><br><span class=\"line\">.text:00439A13                 jmp     short loc_439A17</span><br><span class=\"line\">.text:00439A15 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00439A15</span><br><span class=\"line\">.text:00439A15 loc_439A15:                             ; CODE XREF: MmIsAddressValid(x)+41↑j</span><br><span class=\"line\">.text:00439A15                                         ; MmIsAddressValid(x)+72↑j ...</span><br><span class=\"line\">.text:00439A15                 mov     al, 1</span><br><span class=\"line\">.text:00439A17</span><br><span class=\"line\">.text:00439A17 loc_439A17:                             ; CODE XREF: MmIsAddressValid(x)+93↑j</span><br><span class=\"line\">.text:00439A17                 pop     edi</span><br><span class=\"line\">.text:00439A18                 pop     esi</span><br><span class=\"line\">.text:00439A19                 leave</span><br><span class=\"line\">.text:00439A1A                 retn    4</span><br><span class=\"line\">.text:00439A1A __stdcall MmIsAddressValid(x) endp</span><br></pre></td></tr></table></figure>\n\n<p>从上面的分析可以看出，第一张PTT表基址仍然是 0xC0000000，后面的PTT紧挨着分布。直到地址0xC0600000，遇到第一张PDT表，后面连着三张都是PDT表。</p>\n<p>这里可以总结一下PAE模式下获取PDE与PTE的公式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pPDE = 0xC0600000 + ((addr&gt;&gt;18) &amp; 0x3FF8)</span><br><span class=\"line\">pPTE = 0xC0000000 + ((addr&gt;&gt;9) &amp; 0x7FFFF8)</span><br></pre></td></tr></table></figure>\n\n<p>四、代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//该函数用于通过有参调用门提权后修改地址对应物理页的属性</span></span><br><span class=\"line\"><span class=\"comment\">//将PDE和PTE的U/S位置1，PTE的G位置0</span></span><br><span class=\"line\"><span class=\"comment\">//PDE和PTE的寻址方式参考MmIsAddressValid函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> _declspec(naked) ModifyMemoryPageAttr()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpushad</span><br><span class=\"line\">\t\tpushfd</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmov ecx,[esp + <span class=\"number\">0x24</span> + <span class=\"number\">0x8</span>]</span><br><span class=\"line\">\t\tmov eax,ecx</span><br><span class=\"line\">\t\tshr eax,<span class=\"number\">12</span>h</span><br><span class=\"line\">\t\tand eax,<span class=\"number\">3f</span>f8h</span><br><span class=\"line\">\t\tsub eax,<span class=\"number\">3f</span>a00000h</span><br><span class=\"line\">\t\tmov ebx,eax</span><br><span class=\"line\">\t\tmov eax,[eax]</span><br><span class=\"line\">\t\tor eax,<span class=\"number\">4</span></span><br><span class=\"line\">\t\tand ah,<span class=\"number\">0f</span>eh</span><br><span class=\"line\">\t\tmov [ebx],eax</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tshr ecx,<span class=\"number\">9</span></span><br><span class=\"line\">\t\tand ecx,<span class=\"number\">7f</span>fff8h</span><br><span class=\"line\">\t\tsub ecx,<span class=\"number\">40000000</span>h</span><br><span class=\"line\">\t\tmov edx,ecx</span><br><span class=\"line\">\t\tmov ecx,[ecx]</span><br><span class=\"line\">\t\tor ecx,<span class=\"number\">4</span></span><br><span class=\"line\">\t\tand ch,<span class=\"number\">0f</span>eh</span><br><span class=\"line\">\t\tmov [edx],ecx</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpopfd</span><br><span class=\"line\">\t\tpopad</span><br><span class=\"line\">\t\tretf <span class=\"number\">4</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* addr = (<span class=\"type\">int</span>*)<span class=\"number\">0x8003f00c</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buff[] = &#123; <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0x48</span>, <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpush addr</span><br><span class=\"line\">\t\tcall fword ptr[buff]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;haha\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;该高2G地址的值为:%x\\n&quot;</span>, *addr);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在windbg中构造调用门eq 8003f048 0040ec01&#96;00081020，具体由ModifyMemoryPageAttr函数的偏移决定。执行结果如下：</p>\n<p><img src=\"/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/17.PNG\"></p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：1、段寄存器属性探测","url":"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/","content":"<p>开一个新坑，最近正在学习海哥Windows内核方面相关的知识，也已经学习了很多，因此想及时在这里总结复习一下，并持续跟进未来的学习。对于Windows内核来讲，我准备分成保护模式与操作系统两个大模块来学习与总结。保护模式是操作系统的根本，而段页的知识又是保护模式的根本，因此学习好段页很重要（当然前面3环还剩下一些项目，未来也会慢慢总结跟进的）。</p>\n<span id=\"more\"></span>\n\n<p>在实模式下，给出一个地址就是物理地址，这个物理地址的内容可以被随意更改。而保护模式之所以叫保护模式，就是为了保护内存不被随意访问与更改。那么，又是什么限制了对一个内存地址的访问呢？比如下面这句汇编代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MOV DWORD PTR DS:[0xF1234567], EBX</span><br></pre></td></tr></table></figure>\n\n<p>将EBX寄存器的内容送入一个地址（真正的地址是DS.base + 0xF1234567），要满足什么条件才能执行成功呢？一个是DS中的Attribute，也就是段的属性；另一个是0xF1234567所在内存页的属性。我们先来学习段相关的知识。</p>\n<h1 id=\"段寄存器结构\"><a href=\"#段寄存器结构\" class=\"headerlink\" title=\"段寄存器结构\"></a>段寄存器结构</h1><p>上面的DS就是一个CPU中的段寄存器，在CPU中，一共有8个段寄存器，它们分别是：ES CS SS DS FS GS LDTR和TR。段寄存器的结构如下图所示。</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8.PNG\"></p>\n<p>下面是在OD中，各个段寄存器的显示效果：</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/2.PNG\"></p>\n<p>可以看到，这些段寄存器显示出来的值只有2个字节也就是16位，后面的32位表示这是一个大段（关于什么是大段小段，后面会讲），紧跟着后面的0是这个段的base，也就是基址，后面括号里的F表示这个段的limit，也就是段限长，描述了段的范围。当我们执行指令<strong>MOV AX,ES</strong>之后，也能看到结果是将16位的值送入了AX中。</p>\n<p>于是我们可以根据段寄存器的结构图来看，除了可见部分的16位是段寄存器的段选择子，还分别有不可见的16位属性、32位基址和32位段限长，一共96位。</p>\n<p>对于段寄存器的读操作（ES CS SS DS FS GS），比如<strong>MOV AX,ES</strong> 指令，读取的是16位的可见部分；而对于它们的写操作，比如<strong>MOV DS,AX</strong> 指令，写入的是96位。（16位的AX是如何写入96位DS中的呢？后面会讲）</p>\n<p>此外，读LDTR的指令为<strong>SLDT&#x2F;LLDT</strong>，读TR的指令为<strong>STR&#x2F;LTR</strong>。</p>\n<p>下面来看一下各个段寄存器成员：</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/3.PNG\"></p>\n<p>GS段寄存器Windows没有使用，一直为0。FS寄存器很重要，学到进程线程再讲。ES SS和DS存储的都是数据段，属性为可读可写，CS为代码段，属性为可读可执行。</p>\n<h1 id=\"段寄存器属性探测\"><a href=\"#段寄存器属性探测\" class=\"headerlink\" title=\"段寄存器属性探测\"></a>段寄存器属性探测</h1><p>上面介绍了段寄存器一共有96位，那么如何证明呢？</p>\n<h2 id=\"探测Attribute\"><a href=\"#探测Attribute\" class=\"headerlink\" title=\"探测Attribute\"></a>探测Attribute</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">int var = 0;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t__asm\t\t\t\t\t</span><br><span class=\"line\">\t&#123;\t\t\t\t\t</span><br><span class=\"line\">\t\tmov ax,ss\t//cs不行 cs是可读 可执行 但不可写\t</span><br><span class=\"line\">\t\tmov ds,ax\t\t\t\t</span><br><span class=\"line\">\t\tmov dword ptr ds:[var],eax\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，首先读SS，然后写入DS，此时DS寄存器就等同于SS寄存器的内容，然后将EAX的内容送入该段的一个地址中去（其实就是SS.base），程序运行结果如下，可以正常执行。</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/4.PNG\"></p>\n<p>而当我们把SS改变成CS后继续执行程序，当向内存写入的时候，触发了内存访问错误：</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/5.PNG\"></p>\n<p>是什么限制了对这块内存的写入呢？就是CS中的属性部分，该段寄存器不具有可写属性。</p>\n<h2 id=\"探测Base\"><a href=\"#探测Base\" class=\"headerlink\" title=\"探测Base\"></a>探测Base</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">int a = 0;</span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmov ax,fs</span><br><span class=\"line\">\t\tmov es,ax</span><br><span class=\"line\">\t\tmov eax,es:[0]</span><br><span class=\"line\">\t\tmov a,eax</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;%d\\n&quot;, a);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，es&#x3D;fs，按照常理来说，0地址是无法访问的，由于es的段base为0，因此只访问es:[0]会触发内存访问错误，运行结果如下图：</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/6.PNG\"></p>\n<p>而将es赋值成fs之后，由于上面讲过，fs的基址不是0，因此可以访问并成功给a赋值：</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/7.PNG\"></p>\n<h2 id=\"探测Limit\"><a href=\"#探测Limit\" class=\"headerlink\" title=\"探测Limit\"></a>探测Limit</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmov ax,fs</span><br><span class=\"line\">\t\tmov es,ax</span><br><span class=\"line\">\t\tmov eax,es:[0x1000]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>给es赋值后es&#x3D;fs，但由于fs的limit为0xFFF，对超过limit的内存地址访问，会出现内存访问错误：</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/8.PNG\"></p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：2、段描述符与段选择子","url":"/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/","content":"<p>在上一节课中，我们学习了段寄存器的结构，知道了段寄存器除了可见部分的16位段选择子，还有不可见的16位属性、32位基址和32位段限长。上一节课还遗留了一个问题：指令<strong>mov ds,ax</strong>是如何用16位的ax填写96位的段寄存器？这节课我们就来学习相关的知识</p>\n<span id=\"more\"></span>\n\n<p>对于CPU来说，有两张很重要的表，分别是GDT表和IDT表（LDT表Windows没有使用），段描述符就存在段描述符表中。当我们执行类似<strong>mov ds,ax</strong>的指令时，CPU会去查表，16位的ax叫做段选择子，CPU会根据ax的值来决定查找GDT（全局描述符表）还是LDT（局部描述符表），查找表的什么位置。</p>\n<h1 id=\"段描述符\"><a href=\"#段描述符\" class=\"headerlink\" title=\"段描述符\"></a>段描述符</h1><p>段描述符结构如下：</p>\n<p><img src=\"/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/1.PNG\"></p>\n<p>在这张图中，上面代表高4字节，下面代表低4字节，一共8字节64位。在这个结构中，具体哪些位代表什么意思，慢慢我们都会讲到，这里先不纠结。现在只需要做一件事：给定一个段描述符，能够按照上面的结构拆分出来。</p>\n<p>那么GDT表位于什么地方呢？这张表又有多大呢？它们分别位于寄存器gdtr和gdtl中，在windbg中可以通过<strong>r gdtr</strong>和<strong>r gdtl</strong>来查看它们的值：（这里涉及到双机调试，网络上有很多资料，请自行参考）</p>\n<p><img src=\"/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/2.PNG\"></p>\n<p>在这里我们看到了GDT表位于虚拟地址0x8003f000，大小为0x3ff，可以通过dq指令查看该位置的内容：</p>\n<p><img src=\"/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/4.PNG\"></p>\n<p>dq为一次显示8字节（q代表QWORD），在第二项00cf9b00~0000ffff中，前面为高4字节，后面为低4字节，按照格式拆分如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">拆分为64位二进制为：</span><br><span class=\"line\">  0    0    c    f    9    b    0    0    0    0    0    0    f    f    f    f</span><br><span class=\"line\">0000 0000 1100 1111 1001 1011 0000 0000 0000 0000 0000 0000 1111 1111 1111 1111</span><br><span class=\"line\">Base31~24：0000 0000</span><br><span class=\"line\">G：1</span><br><span class=\"line\">D/B：1</span><br><span class=\"line\">L：0</span><br><span class=\"line\">AVL：0</span><br><span class=\"line\">Limit19~16：1111</span><br><span class=\"line\">P：1</span><br><span class=\"line\">DPL：00</span><br><span class=\"line\">S：1</span><br><span class=\"line\">TYPE：1011</span><br><span class=\"line\">Base23~16：0000 0000</span><br><span class=\"line\">Base15~00：0000 0000 0000 0000</span><br><span class=\"line\">Limit15~00：1111 1111 1111 1111</span><br></pre></td></tr></table></figure>\n\n<p>不熟悉的请读者自行挑选段描述符练习拆分。</p>\n<h1 id=\"段选择子\"><a href=\"#段选择子\" class=\"headerlink\" title=\"段选择子\"></a>段选择子</h1><p>段选择子结构如下：</p>\n<p><img src=\"/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/5.PNG\"></p>\n<p>在上图结构中，第0-1位RPL代表请求特权级别，具体什么意思稍后讲，第2位TI代表要查询的表（在Windows下一般都是0，查询GDT表），第3-15位代表索引，表示要查询表的第几项。因此想要查看内存中对应的项的内容，地址应该是GDT表的基址+索引*8。</p>\n<p>在上一节课我们提到了，指令<strong>mov ds,ax</strong>是如何用16位的ax填写96位的ds的呢？刨去段寄存器中可见的16位段选择子，还剩80位，因此CPU会用GDT中对应的段描述符来写入这80位。那么问题来了，这64位是如何填满80位的呢？后面再讲。</p>\n<p>例如，对于段选择子0x23来讲，RPL&#x3D;3，index&#x3D;4，查找的是GDT表序号为4的项（序号从0开始）。</p>\n<p>现在来看RPL，代表的意思是当前的特权级别，有四种情况分别是0 1 2 3。同时注意到在段描述符结构中有一个DPL，代表目标特权级别，意思可以理解成：你既然要访问我这个段，你最少是什么级别。因此，在CPU通过选择子查找到目标段描述符后，会将选择子的RPL与目标段描述符的DPL进行对比，当RPL的级别大于等于DPL时（数值上RPL小于等于DPL），才能够成功访问。例如RPL&#x3D;0，DPL&#x3D;3时就可以成功访问，反过来就不行。</p>\n<p>总结一下，想要修改段寄存器的值，可以使用MOV指令，方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov ax,0x20</span><br><span class=\"line\">mov ds,ax</span><br></pre></td></tr></table></figure>\n\n<p>此外，还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器。对于CS寄存器来讲，没有对应的LCS指令，因为CS为代码段，CS的修改就意味着EIP的更改。因此必须同时改变CS和EIP才行，具体指令后面讲。以LES指令为例，使用方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">       char buffer[6] = &#123;0&#125;;</span><br><span class=\"line\">       __asm &#123;</span><br><span class=\"line\">              // 高 2 字节加载到 ES 寄存器，低 4 字节复制到 ecx 寄存器。fword 表示 6 字节。</span><br><span class=\"line\">              // LDS/LSS/LFS/LGS 用法是类似的。没有LCS指令，要修改CS，需要使用其它指令，这里就不给出。</span><br><span class=\"line\">              // 这行指令是有坑的，不一定可以执行成功，取决于buffer中的值。</span><br><span class=\"line\">              les ecx, fword ptr ds:[buffer]</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：3、段描述符属性","url":"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/","content":"<p>上一节课讲了段描述符和段选择子的结构，这节课来具体讲解段描述符里面的一些位具体代表什么，并且来解决上节课遗留的一个问题：64位的段描述符如何填入96位段寄存器中不可见的80位？</p>\n<span id=\"more\"></span>\n\n<p>先来回顾一下段描述符的结构：</p>\n<p><img src=\"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/1.PNG\"></p>\n<p>下面是段寄存器的结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Segment&#123;</span><br><span class=\"line\">\tWORD Selector;\t\t//段选择子（可见）16位</span><br><span class=\"line\">\tWORD Attributes;\t//段属性  （不可见）16位</span><br><span class=\"line\">\tWORD Base;\t\t\t//段起始地址  （不可见）32位</span><br><span class=\"line\">\tWORD Limit;\t\t\t//段大小  （不可见）32位</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在填入段寄存器时，属性部分写入的是段描述符高4字节中8-23位，共16位；基址部分填入的是段描述符中的基址共32位。现在问题来了，段寄存器的limit部分需要32位，而在段描述符里面limit只有20位，该怎么填入呢？我们从段描述符的属性入手。</p>\n<h1 id=\"P位\"><a href=\"#P位\" class=\"headerlink\" title=\"P位\"></a>P位</h1><p>P位位于段描述符高4字节的第15位，决定了该描述符是否有效。对于一个段描述符，首先就要看它的P位是否为有效位。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">P=0\t无效</span><br><span class=\"line\">P=1\t有效</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/2.PNG\"></p>\n<p>对于上图的GDT表来说，被标出来的部分大于等于8，就意味着P&#x3D;1，是有效的段描述符。</p>\n<h1 id=\"G位\"><a href=\"#G位\" class=\"headerlink\" title=\"G位\"></a>G位</h1><p>G位决定了该段的粒度，前面提到的如何用段描述符20位的limit填入段寄存器32位的limit，就是通过G位来决定的。在段描述符中，20位的limit最大值为FFFFF。</p>\n<p>G&#x3D;0时，limit单位是字节，也就是说该是多少就是多少。20位limit最大为FFFFF，前面补0即可，limit最大为000FFFFF。</p>\n<p>G &#x3D; 1时，limit单位是kb，也就是说，limit每加1，实际上加了1kb也就是FFF。因此limit范围是00000FFF ~ FFFFFFFF。（在后面补FFF）</p>\n<h1 id=\"S位\"><a href=\"#S位\" class=\"headerlink\" title=\"S位\"></a>S位</h1><p>在GDT表中，段描述符分为两类，一类是数据或代码段描述符，另一类是系统段描述符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">S = 0时，该段描述符是系统段描述符</span><br><span class=\"line\">S = 1时，该段描述符是代码段或数据段描述符</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/4.PNG\"></p>\n<p>在上图中，被标出来的部分的最后一个二进制位就是S位。</p>\n<h1 id=\"TYPE域\"><a href=\"#TYPE域\" class=\"headerlink\" title=\"TYPE域\"></a>TYPE域</h1><p>对于S位取不同的值，TYPE域各位有不同的涵义</p>\n<p><strong>1、S &#x3D; 1时，有两种情况，分别是数据段和代码段描述符</strong></p>\n<p>也就是说，在段描述符高4字节的8个16进制数中，第5个数是1001（9）或者1111（F）时，为数据段或者代码段描述符。如下图所示：</p>\n<p><img src=\"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/5.PNG\"></p>\n<p>上图可以看出来又分了两种情况：</p>\n<p>1.1 当第11位 &#x3D; 0时，是数据段。也就是第6个16进制数 &lt; 8。A位代表是否已经被访问过（有没有被加载过）。W位代表是否可写。E位代表拓展方向。E &#x3D; 0时向上拓展，E &#x3D; 1时向下拓展。</p>\n<p>1.2 当第11位 &#x3D; 1时，是代码段。也就是第6个16进制数 &gt; 8。A位代表是否已经被访问过（有没有被加载过）。R位代表是否可读。C位是一致位。C &#x3D; 1时代表一致代码段，C &#x3D; 0时代表非一致代码段。具体C位什么意思，后续介绍。</p>\n<p>对于E位的拓展方向，解释如下图：</p>\n<p><img src=\"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/6.PNG\"></p>\n<p>左边为E &#x3D; 0向上拓展（正常），右边为E &#x3D; 1向下拓展（不正常）。红色代表有效地址，也就是说可以访问的地址。因此与其说是向上或下拓展，不如说是取反。</p>\n<p>对于右边的红色部分具体有多大，还要看另外一个没有讲过的属性来决定，有两种可能分别是64kb和4GB，以后再说。（向下拓展基本没见过）</p>\n<p><strong>2、S &#x3D; 0时，为系统描述符</strong></p>\n<p>系统描述符又分为以下类型：</p>\n<p><img src=\"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/7.PNG\"></p>\n<p>这里面描述的具体分类是什么意思，目前还用不到，后续会讲解。目前只要知道TYPE域各位的含意即可。</p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：4、段权限检查","url":"/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/","content":"<p>上节课讲了段描述符里面的一些位，先来复习一下：对于一个段描述符，先看它的P位是否有效，然后看它的S位和TYPE域来区分该段的类型。这节课继续来学习段描述符的其他位。</p>\n<span id=\"more\"></span>\n\n<p>老规矩，还是先上段描述符的结构图，方面查看和记忆：</p>\n<p><img src=\"/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/1.PNG\"></p>\n<h1 id=\"D-x2F-B位\"><a href=\"#D-x2F-B位\" class=\"headerlink\" title=\"D&#x2F;B位\"></a>D&#x2F;B位</h1><p>D&#x2F;B位比较复杂，加载到不同的段寄存器中的影响是不一样的。</p>\n<p><strong>1、段描述符加载到数据段如：DS、ES</strong></p>\n<p>其含义代表的是段上限的大小。（这也就是昨天提到的向上向下拓展时候影响段上限的位）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">D = 1，段上限为4GB</span><br><span class=\"line\">D = 0，段上限为64KB</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/2.PNG\"></p>\n<p><strong>2、段描述符加载到代码段如CS</strong></p>\n<p>影响的是默认的选址方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">D = 1，默认采用32位寻址方式</span><br><span class=\"line\">D = 0，默认采用16位寻址方式</span><br></pre></td></tr></table></figure>\n\n<p>指令前缀67 改变寻址方式。</p>\n<p><strong>3、段描述符加载到数据段如SS</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">D = 1，隐式堆栈访问指令（如：PUSH POP CALL） 使用32位堆栈指针寄存器ESP</span><br><span class=\"line\">D = 0，隐式堆栈访问指令（如：PUSH POP CALL） 使用16位堆栈指针寄存器SP</span><br></pre></td></tr></table></figure>\n\n<p>跟上面加载到CS道理其实差不多。</p>\n<h1 id=\"段权限检查\"><a href=\"#段权限检查\" class=\"headerlink\" title=\"段权限检查\"></a>段权限检查</h1><p>先来回顾一下几个概念：</p>\n<p><strong>RPL</strong>：请求特权级，存在于16位的段选择子中。</p>\n<p><strong>DPL</strong>：描述了访问该段至少需要什么级别，存在于段描述符中。</p>\n<p>那么如何查看程序处于几环？也就是说，如何查看CPU当前处于哪个级别呢？这里有一个新的概念：</p>\n<p><strong>CPL</strong>：当前特权级，存在于CS和SS中存储的段选择子最后2位。</p>\n<p>这个CPL的意义是，当前CPU执行到某一位置时CPU的级别。如下图：</p>\n<p><img src=\"/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/3.PNG\"></p>\n<p>当CPU执行到80527da8这个地址时，CS值为8（1000），CPL &#x3D; 0。</p>\n<p>有些指令在CPL &#x3D; 3时不能使用，但是在CPL &#x3D; 0时可以使用。</p>\n<p>那么，段权限检查需要满足什么条件才能算成功呢？</p>\n<p>**CPL &lt;&#x3D; DPL 并且 RPL &lt;&#x3D; DPL (数值上的比较)**。注意两个条件必须要同时满足。</p>\n<p><strong>特别说明</strong>：数据段的权限检查与代码段的权限检查不一样。上面的只适用于数据段的权限检查，代码段的权限是如何检查的，在以后的课程中会讲到。</p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：6、代码间的调用-跨段调用","url":"/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/","content":"<p>上节课我们讲解了代码段间跳转JMP FAR指令及其执行流程，该指令可以同时改变CS和EIP。此外，CALL指令也有类似的作用。该指令与JMP类指令的区别在于，CALL FAR指令不仅可以同时改变CS和EIP，同时还会影响堆栈。除此以外，JMP类指令无法从低权限的非一致代码段跳转到高权限的非一致代码段，来提升CPL当前特权级，而CALL FAR指令却可以，就是通过调用门。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"短调用\"><a href=\"#短调用\" class=\"headerlink\" title=\"短调用\"></a>短调用</h1><p>指令格式：CALL 立即数&#x2F;寄存器&#x2F;内存。</p>\n<p><img src=\"/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/1.PNG\"></p>\n<p>这就是普通的函数调用，并没有发生特权级别的变化（即CPL没有发生改变），上图所示的是同一个堆栈。</p>\n<p>发生改变的寄存器为：ESP EIP。</p>\n<h1 id=\"长调用（跨段不提权）\"><a href=\"#长调用（跨段不提权）\" class=\"headerlink\" title=\"长调用（跨段不提权）\"></a>长调用（跨段不提权）</h1><p>指令格式：CALL CS:EIP（EIP是废弃的）</p>\n<p>在这里，CALL FAR后面跟了6个字节，其中高2字节是CS段选择子，低4字节随便写（因为是废弃的）。这里就来问题了，为什么是废弃的？既然是废弃的，那么执行这条指令后会跳到哪里去呢？其实跳到的地方是由CS段选择子指向的<strong>调用门</strong>决定的，具体怎么决定，下节课讲调用门的时候再说。</p>\n<p><img src=\"/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/2.PNG\"></p>\n<p>发生改变的寄存器为：ESP EIP CS。</p>\n<h1 id=\"长调用（跨段并提权）\"><a href=\"#长调用（跨段并提权）\" class=\"headerlink\" title=\"长调用（跨段并提权）\"></a>长调用（跨段并提权）</h1><p>指令格式：CALL CS:EIP（EIP是废弃的）</p>\n<p>虽然指令的格式与上面不提权的情况相同，但是不同的是对应的段描述符的DPL。在不提权的情况下，对应的段描述符DPL&#x3D;3，而在提权的情况下，对应的段描述符（调用门）DPL&#x3D;0。</p>\n<p>我们都知道，在一个程序中，代码的执行必须要用到堆栈，代码与堆栈是不分家的。因此CS和SS的权限必须一致，一个级别一套堆栈，当跳级的时候堆栈也换了一套对应级别的堆栈。</p>\n<p>那么这就带来一个问题，长调用的时候既然切换了堆栈，那么当返回的时候怎么才能找到原来的堆栈呢？为了解决这个问题，程序在调用的时候不仅会将CS和返回地址压入堆栈中，还会将原来3环堆栈的SS和ESP也压入堆栈中（这里的堆栈是0环的堆栈）。如下图：</p>\n<p><img src=\"/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/3.PNG\"></p>\n<p><img src=\"/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/4.PNG\"></p>\n<p>那么现在又会有一个问题：当通过CALL FAR使用调用门发生权限切换的时候，代码段和堆栈都会发生切换，切换后的代码执行位置由调用门所指定，可是0环的堆栈（SS和ESP）去哪里找呢？这两个寄存器在指令中没有体现，而是要去找TSS段。只要提权了，就去找TSS要SS和ESP。具体TSS是啥先不用管。</p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：5、代码间的跳转-段间跳转","url":"/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/","content":"<p>上节课我们学习了访问数据段的时候，段权限是如何检查的，即：**CPL &lt;&#x3D; DPL 并且 RPL &lt;&#x3D; DPL (数值上的比较)**。后面我们来学习访问代码段时，段的权限是如何检查的。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"代码段间跳转的流程\"><a href=\"#代码段间跳转的流程\" class=\"headerlink\" title=\"代码段间跳转的流程\"></a>代码段间跳转的流程</h1><p>通过前面的学习，我们已经知道了段寄存器共有八个，分别是：ES、CS、SS、DS、FS、GS、LDTR和TR。当我们想要修改段寄存器的值时，有<strong>MOV</strong>指令的类似于<strong>LES</strong>的指令。</p>\n<p>但是，对于CS代码段寄存器，却不能用上面这两种方式修改。因为CS的改变意味着EIP的改变，想要改变CS，就必须同时改变EIP（段间跳转），但是可以只改变EIP而不改变CS（段内跳转）。CS.Base + EIP &#x3D; 真正要执行的地址。因此，代码段间的跳转，本质上就是CS寄存器的修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">同时修改CS和EIP的指令（段间跳转）：JMP FAR / CALL FAR / RETF / INT /IRETED</span><br><span class=\"line\">只修改EIP的指令（段内跳转）：JMP / CALL / JCC / RET</span><br></pre></td></tr></table></figure>\n\n<p>既然是跳转到另一个代码段，那么就可以根据目标代码段的种类分为两种情况：一致代码段和非一致代码段。具体怎么区分两种代码段，请参见前面的课程。</p>\n<p>下面我们就来讲解代码段间的跳转（<strong>JMP FAR</strong>）的执行流程：</p>\n<p>首先需要明确的是，JMP FAR指令后面需要跟6个字节，例如：JMP 0x20:0x004183D7，其中，高2字节为0x20，代表段选择子，而低4字节为0x004183D7，代表段内偏移。而JMP指令为段内长跳转，JMP后面跟4字节，为跳转的目标地址。</p>\n<p>以指令<strong>JMP 0x20:0x004183D7</strong>为例，执行流程如下：</p>\n<p><strong>1、拆分段选择子</strong></p>\n<p>0x20为0010 0000，RPL &#x3D; 0，TI &#x3D; 0。查GDT表，index &#x3D; 4</p>\n<p><strong>2、判断该段描述符的种类</strong></p>\n<p>通过index找到GDT中对应的段描述符，只有如下四种段描述符可以跳转成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">代码段、调用门、TSS任务段、任务门（目前只分析代码段）</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、权限检查</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">如果是非一致代码段，要求:CPL == DPL 并且 RPL &lt;= DPL。（windows基本上使用的都是这个）</span><br><span class=\"line\">如果是一致代码段，要求:CPL &gt;= DPL。</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、加载段描述符</strong></p>\n<p>如果通过了上面的权限检查，CPU就会将段描述符加载进CS段寄存器中。</p>\n<p><strong>5、代码执行</strong></p>\n<p>CPU将CS.Base + Offset的值写入EIP中，然后执行CS：EIP处的代码，段间跳转结束。</p>\n<h1 id=\"一致代码段和非一致代码段\"><a href=\"#一致代码段和非一致代码段\" class=\"headerlink\" title=\"一致代码段和非一致代码段\"></a>一致代码段和非一致代码段</h1><p>上面提到了对于跳转到这两种代码段，有着不同的权限检查，那么这两种代码段是什么意思呢？</p>\n<p><strong>一致代码段：也就是共享的段</strong></p>\n<p>一致代码段，通俗地来讲，就是系统用来共享、提供给低特权级的程序使用或调用的代码段。有如下特点：</p>\n<ul>\n<li>特权级别高的程序不允许访问特权级别低的程序的数据：核心态不允许访问用户态的数据。</li>\n<li>特权级别低的程序可以访问到特权级别高的数据，但特权级别CPL不会改变：用户态还是用户态。</li>\n</ul>\n<p><strong>非一致代码段：也就是普通的段</strong></p>\n<p>非一致代码段，就是为了避免被低特权级程序访问而被系统保护起来的代码段。有如下特点：</p>\n<ul>\n<li>只允许同级别的访问。</li>\n<li>绝对禁止不同级别的访问：核心态不是用户态，用户态也不是核心态。</li>\n</ul>\n<p><strong>注意</strong>：直接对代码段进行JMP操作，无论目标是一致还是非一致代码段，CPL都不会发生改变。想要提升CPL的权限，即我就是要访问DPL为0的普通代码段，需要通过调用门等方式。</p>\n<h1 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h1><p>下面来练习通过JMP FAR指令，成功跳转到一致代码段和非一致代码段。</p>\n<p>首先在虚拟机Windows XP中查看GDT表，如下图，并打算在标注出来的位置构造一致代码段和非一致代码段。这个位置位于虚拟地址0x8003f048处，对应的Index为9。</p>\n<p><img src=\"/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/2.PNG\"></p>\n<p>用OD随便打开一个程序，我们只需要更改入口的第一条指令为JMP FAR即可。假如我们准备跳转到下图中标注出来的地址0x0040AA33。</p>\n<p><img src=\"/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/3.PNG\"></p>\n<p>现在构造非一致代码段及其选择子，DPL需要是3，RPL最少为3，这里我们可以取0。因此构造出来的非一致代码段描述符为00cffe00~0000ffff，其选择子为0x48，因此指令应改为：JMP 0x48:0x0040AA33。</p>\n<p><img src=\"/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/4.PNG\"></p>\n<p><img src=\"/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/5.PNG\"></p>\n<p>可以看到，在执行指令后成功通过构造的非一致代码段跳转到目标地址。</p>\n<p>一致代码段同理，感兴趣的可以自行尝试。</p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：8、中断门","url":"/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/","content":"<p>上节课讲的是调用门，我们知道了调用门存在的价值就是提权。但是在Windows系统中，并没有使用调用门，而是使用了中断门，用来实现系统调用和调试相关的工作。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"中断门\"><a href=\"#中断门\" class=\"headerlink\" title=\"中断门\"></a>中断门</h1><p>在Windows中，除了有GDT表以外，还有一张IDT表。与GDT表类似，IDT表也是由一系列描述符组成的，每个描述符也有8个字节。但是与GDT不同的是，GDT的第一项是空，而IDT的第一项不为空。在windbg中可以通过如下指令查看IDT表：</p>\n<p><img src=\"/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/1.PNG\"></p>\n<p>前面讲过，见到CALL FAR这种指令，CPU就会去查GDT表，而见到<strong>INT</strong>这种指令，CPU就会去查IDT表。在CALL FAR指令中，后面跟的值有3个含义：索引、TI、RPL。而在INT指令（如INT 3）中，后面跟的值只有一个含义，那就是索引。因此这里就会有一个问题：为什么中断门这里不需要RPL了呢？这就意味着，调用门的权限检查需要检查RPL和CPL，而中断门只需要检查CPL。</p>\n<p>在GDT表中，描述符分为如下三种：系统段、代码段、数据段。而在IDT表中，也有三种东西：任务门描述符、中断门描述符、陷阱门描述符。中断门结构如下：</p>\n<p><img src=\"/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/2.PNG\"></p>\n<p>在上图中，P&#x3D;1，S&#x3D;0（第12位），TYPE&#x3D;1110（第8-11位），就是中断门。与调用门类似的是，这里中断门的DLP也必须为3，CPL&#x3D;3的代码才能访问这个中断门。因此中断门的基础结构应该是0000ee00~00000000。</p>\n<p>中断门的执行流程为：首先根据INT指令后面的索引查询IDT表，找到对应的中断门描述符。然后通过中断门描述符中的代码段选择子，查询GDT表，找到GDT中对应的代码段描述符。最后结合中断门中的偏移，跳转到目标代码处执行。</p>\n<p><strong>关于堆栈：</strong></p>\n<ol>\n<li>在没有权限切换的情况下，会向堆栈PUSH3个值，分别是：CS、EFLAGS、EIP（返回地址）。</li>\n<li>在有权限切换的情况下，会向堆栈PUSH5个值，分别是：SS、ESP、EFLAGS、CS、EIP。</li>\n</ol>\n<p>注意堆栈中EFLAGS的位置，可以与调用门的堆栈对比看看。</p>\n<p><strong>关于中断返回：</strong></p>\n<p>CALL FAR指令的调用门使用的是<strong>retf</strong>指令返回，而对于中断门来说，<u>正常情况下</u>不能使用retf指令返回，而应该使用<strong>IRET或IRETD</strong>指令返回。（IRET和IRETD其实是有区别的，具体先不讲，下面做实验看看）</p>\n<p><strong>调用门与中断门的区别总结：</strong></p>\n<ol>\n<li>调用门通过CALL FAR指令执行，中断门通过INT 指令执行。</li>\n<li>调用门查询GDT表，而中断门先查询IDT表后查询GDT表，跨表了。</li>\n<li>CALL CS:IP中的CS是段选择子，由三部分组成；但INT N中的N只是索引，中断门不检查RPL，只检查CPL。</li>\n<li>调用门可以有参数，中断门没有参数。</li>\n</ol>\n<h1 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a>课后练习</h1><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li>自己实现中断门。</li>\n<li>在调用门中实现使用IRETD返回，在中断门中实现使用RETF返回。</li>\n</ol>\n<h2 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h2><p>一、首先查看IDT表如下：</p>\n<p><img src=\"/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/3.PNG\"></p>\n<p>在位于0x8003f500的位置有一个空的描述符，我们可以将构造好的中断门写入这里，这里的索引为32，因此可以通过INT 32指令进入这个中断门。</p>\n<p>再来查看GDT表：</p>\n<p><img src=\"/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/4.PNG\"></p>\n<p>我们通过中断门访问标注出来的代码段描述符，该代码段描述符我们前面使用过很多次了，是一个DPL&#x3D;0的代码段，可以用来提权。因此目前的中断门应该构造为0000ee00&#96;00080000。</p>\n<p>代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">DWORD dwHigh2GValue;</span><br><span class=\"line\">//0x401020</span><br><span class=\"line\">void __declspec(naked) FunctionHas0CPL()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tmov eax, 0x8003f00c</span><br><span class=\"line\">\t\t\tmov eax, [eax]</span><br><span class=\"line\">\t\t\tmov dwHigh2GValue, eax</span><br><span class=\"line\">\t\t\tIRETD\t// 这里写成iret 会蓝屏，因为 iret的硬编码是66CF，32位下应该使用iretd，硬编码是CF</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tINT 32 // 进入中断门，查询IDT表第32项</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;%08x\\n&quot;, dwHigh2GValue);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>观察想要跳转的目标函数的地址：</p>\n<p><img src=\"/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/5.PNG\"></p>\n<p>我们的函数FunctionHas0CPL的地址为0x401020，故修改IDT表第32项为0040ee00&#96;00081020：</p>\n<p><img src=\"/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/6.PNG\"></p>\n<p>执行结果如下图：</p>\n<p><img src=\"/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/7.PNG\"></p>\n<p>这里成功通过中断门提权。注意执行中断返回的时候要使用IRETD指令。</p>\n<p>二、（1）代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">DWORD Value;</span><br><span class=\"line\">//0x40DDF0</span><br><span class=\"line\">void _declspec(naked) MyFunc()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmov eax, 0x8003f00c</span><br><span class=\"line\">\t\tmov ebx, [eax]</span><br><span class=\"line\">\t\tmov Value, ebx</span><br><span class=\"line\">\t\tpushfd</span><br><span class=\"line\">\t\tmov eax,[esp]\t\t//eflags</span><br><span class=\"line\">\t\tmov ebx,[esp+4]\t\t//eip</span><br><span class=\"line\">\t\tmov ecx,[esp+8]\t\t//cs</span><br><span class=\"line\">\t\tmov [esp+8],eax</span><br><span class=\"line\">\t\tmov [esp+4],ecx</span><br><span class=\"line\">\t\tmov [esp],ebx</span><br><span class=\"line\">\t\t//retf</span><br><span class=\"line\">\t\tiretd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar buff[6] = &#123;0x78, 0x56, 0x34, 0x12, 0x48, 0x00&#125;;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcall fword ptr[buff]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;%x\\n&quot;, Value);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>核心思想就是利用pushfd指令将eflags入栈，然后交换eflags、eip和cs的位置，使之结构与通过中断门后的堆栈一致，就可以利用iretd返回。结果如下：</p>\n<p><img src=\"/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/8.PNG\"></p>\n<p>二、（2）代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">DWORD Value;</span><br><span class=\"line\">//0x40DDD0</span><br><span class=\"line\">void _declspec(naked) MyFunc()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmov eax, 0x8003f00c</span><br><span class=\"line\">\t\tmov ebx, [eax]</span><br><span class=\"line\">\t\tmov Value, ebx</span><br><span class=\"line\">\t\tmov eax,[esp]\t\t//eip</span><br><span class=\"line\">\t\tmov ebx,[esp+4]\t\t//cs</span><br><span class=\"line\">\t\tmov ecx,[esp+8]\t\t//eflags</span><br><span class=\"line\">\t\tmov [esp],ecx</span><br><span class=\"line\">\t\tmov [esp+4],eax</span><br><span class=\"line\">\t\tmov [esp+8],ebx</span><br><span class=\"line\">\t\tpopfd</span><br><span class=\"line\">\t\tretf</span><br><span class=\"line\">\t\t//iretd</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tINT 32</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;%x\\n&quot;, Value);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与上面类似，核心思想就是先调整位置，然后利用popfd将eflags弹出，最后使用retf返回。执行结果如下：</p>\n<p><img src=\"/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/9.PNG\"></p>\n<p>总结：正常情况下，在调用门中利用retf返回，在中断门中利用iretd返回。但是并不一定必须这样，因为只要知道了这两条返回语句的作用，即可灵活运用。</p>\n<p>retf是分别按顺序弹出保存eip、cs、esp和ss（提权情况下）</p>\n<p>iretd是分别按顺序弹出保存eip、cs、eflags、esp和ss（提权情况下）</p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：7、调用门","url":"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/","content":"<p>上一节课讲解了CALL及CALL FAR指令的格式和堆栈的变化，知道了想要提权可以通过调用门的方式来实现。这节课我们就来具体讲解调用门的结构以及执行流程，并分析在无参和有参的情况下堆栈的区别。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"无参调用门提权\"><a href=\"#无参调用门提权\" class=\"headerlink\" title=\"无参调用门提权\"></a>无参调用门提权</h1><h2 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h2><p>指令格式为：CALL CS:EIP（EIP废弃）</p>\n<ol>\n<li>根据CS的值查GDT表，找到对应的段描述符，这个描述符是一个调用门。</li>\n<li>在调用门描述符中存储着另一个代码段的段选择子，位于低4字节的16-31位。（注意必须是代码段）</li>\n<li>选择子指向的段.Base + 偏移地址，就是真正要执行的地址，偏移地址存储在调用门描述符低4字节0-15位和高4字节16-31位。</li>\n</ol>\n<h2 id=\"调用门描述符结构\"><a href=\"#调用门描述符结构\" class=\"headerlink\" title=\"调用门描述符结构\"></a>调用门描述符结构</h2><p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/1.PNG\"></p>\n<p>注意这里段描述符的DPL，由于我们是用调用门来提权，是从3环访问调用门，然后通过调用门去到指定的代码段，因此调用门的DPL必须是3。如果是0的话，3环的代码无法访问调用门，连敲门的权限都没有了。</p>\n<p>而调用门中的选择子指向的代码段的DPL可以为0，这样就实现了通过调用门来提权。</p>\n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h2><p>下面我们通过代码做实验，实现无参调用门提权读取高2G内存，并观察堆栈与寄存器的变化。</p>\n<p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/2.PNG\"></p>\n<p>首先观察GDT表，在虚拟地址0x8003f048的位置是空白，这里系统没有用到，我们可以在这里构造调用门，调用门的选择子为0100 1000（0x48）。在调用门中，我们打算指向上图中标注出来的位于8003f008处的段描述符，index&#x3D;1，选择子应为0000 1000（0x08），这是一个DPL为0的代码段（注意这个描述符下方是一个DPL为3的代码段，这两个段很常用）。至于偏移，我们还不清楚，先写成0。</p>\n<p>因此，构造完的调用门为：0000EC00 00080000。实验代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">DWORD dwH2GValue;</span><br><span class=\"line\">void _declspec(naked) MyFunc()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint 3</span><br><span class=\"line\">\t\t/*</span><br><span class=\"line\">\t\tpushad</span><br><span class=\"line\">\t\tpushfd</span><br><span class=\"line\">\t\t\tmov eax,0x8003f00c\t//读取高2G内存</span><br><span class=\"line\">\t\t\tmov ebx,[eax]</span><br><span class=\"line\">\t\t\tmov dwH2GValue,ebx</span><br><span class=\"line\">\t\tpopfd</span><br><span class=\"line\">\t\tpopad</span><br><span class=\"line\">\t\t*/\t</span><br><span class=\"line\">\t\tretf\t//注意返回，不能是ret</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar buff[6] = &#123;0x78, 0x56, 0x34, 0x12, 0x48, 0x00&#125;;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcall fword ptr[buff]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;%08x&quot;, dwH2GValue);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先来看一下上面的代码，在main函数中通过CALL FAR指令进入调用门，调用门处的选择子为0x48。然后通过调用门进入我们提权后要执行的函数MyFunc处，这个函数MyFunc是一个裸函数，格式固定必须这么写。提权后即可访问0x8003f00c（高2G）处的内存。</p>\n<p>因此，我们需要获取MyFunc的函数偏移，来写入构造的调用门中的偏移部分，如下图：</p>\n<p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/3.PNG\"></p>\n<p>可以看到我们目标函数的偏移为0x00401030，结合前面构造的调用门，最终构造的结果为0040ec00&#96;00081030，并将这个调用门写入对应位置，如下图：</p>\n<p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/4.PNG\"></p>\n<p>此处我们先来看一下进入调用门提权之前，一些寄存器的值：</p>\n<p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/5.PNG\"></p>\n<p>可以看到，提权之前CS&#x3D;001B，SS&#x3D;0023，说明CPL&#x3D;3，ESP&#x3D;0012FF28，说明此时堆栈位于3环。此时我们进入调用门，转到我们要执行的MyFunc函数，执行到指令int 3后，会中断到0环的调试器中：</p>\n<p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/6.PNG\"></p>\n<p>可以看到，中断的指令为00401030处的int 3指令，就是我们前面要跳转到的MyFunc函数的位置。同时，CS&#x3D;0008，SS&#x3D;0010，说明CPL&#x3D;0，ESP&#x3D;b1c61dd0，说明此时堆栈位于0环。然后我们观察堆栈，可以看到，从低到高依次是：返回地址、原CS、原ESP、原SS，符合上节课讲的堆栈图。继续执行代码，得到结果：</p>\n<p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/7.PNG\"></p>\n<p>代码在通过调用门提权后，成功读取到高2G的内存。</p>\n<h1 id=\"有参调用门提权\"><a href=\"#有参调用门提权\" class=\"headerlink\" title=\"有参调用门提权\"></a>有参调用门提权</h1><p>我们在通过调用门提权的时候，也可以传递参数给要执行的函数，方法就是在进入调用门之前先通过push指令将要传递的参数压入3环的堆栈。同时观察上面调用门的结构图，在高4字节的0-4位的Param Count部分代表的就是参数的数量。在进入调用门时，CPU会根据这个参数数量，将3环堆栈上的参数压入0环的堆栈中。那么此时0环堆栈又是怎样的呢？下面来做实验：</p>\n<p>我们打算传入1和2两个参数，因此将上面构造的调用门中参数数量部分改为2。</p>\n<p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/8.PNG\"></p>\n<p>实验代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">int x;</span><br><span class=\"line\">int y;</span><br><span class=\"line\">void _declspec(naked) MyFunc()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpushad\t\t//8个寄存器，32个字节</span><br><span class=\"line\">\t\tpushfd\t\t//标志寄存器，4个字节</span><br><span class=\"line\">\t\tmov eax,[esp+0x24+0x8+0x4]</span><br><span class=\"line\">\t\tmov dword ptr ds:[x],eax</span><br><span class=\"line\">\t\tmov eax,[esp+0x24+0x8+0x0]</span><br><span class=\"line\">\t\tmov dword ptr ds:[y],eax</span><br><span class=\"line\">\t\tpopfd</span><br><span class=\"line\">\t\tpopad</span><br><span class=\"line\">\t\t//int 3</span><br><span class=\"line\">\t\tretf 0x8\t//注意堆栈平衡，写错蓝屏</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar buff[6] = &#123;0x78, 0x56, 0x34, 0x12, 0x48, 0x00&#125;;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpush 1</span><br><span class=\"line\">\t\tpush 2</span><br><span class=\"line\">\t\tcall fword ptr[buff]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;x = %x  y = %x\\n&quot;, x, y);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们执行代码，中断在MyFunc函数中的int 3指令时，在windbg中查看堆栈如下：</p>\n<p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/9.PNG\"></p>\n<p>在0环堆栈中，由低地址到高地址依次为：返回地址、原CS、参数2、参数1、原ESP、原SS。可以看到，传入的参数是被夹在了中间。这样一来，MyFunc函数中的汇编代码就很好理解了。执行结果如下图：</p>\n<p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/10.PNG\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>当通过门，权限不变的时候，只会PUSH两个值：CS、返回地址。新的CS的值由调用门决定。</li>\n<li>当通过门，权限改变的时候，会PUSH四个值：SS、ESP、CS、返回地址。新的CS的值由调用门决定，新的SS和ESP由TSS提供。</li>\n<li>通过门调用时，要执行哪行代码由调用门决定，但使用RETF返回时，由堆栈中压入的值决定，这就是说，进门时只能按指定路线走，出门时可以翻墙（只要改变堆栈里面的值就可以想去哪去哪）。</li>\n<li>可不可以再建个门出去呢？也就是用Call。当然可以了，前门进，后门出。</li>\n</ol>\n<h1 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h1><p>仔细思考上面总结中的最后两条，并完成下面两道题。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li>在前面实验的基础上进行修改，实现通过翻墙的方式返回到其它地址。</li>\n<li>在前面实验的基础上进行修改，在门中再建一个门跳转到其它地址。</li>\n</ol>\n<p>要求：代码正常执行不蓝屏。</p>\n<h2 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h2><p>一、代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int Value;</span><br><span class=\"line\">int OldEip;</span><br><span class=\"line\">int DestAddr;</span><br><span class=\"line\">//0x401030</span><br><span class=\"line\">void _declspec(naked) MyFunc()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmov eax, 0x8003f00c</span><br><span class=\"line\">\t\tmov ebx, [eax]</span><br><span class=\"line\">\t\tmov Value, ebx</span><br><span class=\"line\">\t\tmov eax,[esp]</span><br><span class=\"line\">\t\tmov OldEip,eax</span><br><span class=\"line\">\t\tmov eax,[DestAddr]\t//这里也可以写成mov eax,DestAddr</span><br><span class=\"line\">\t\tmov [esp],eax</span><br><span class=\"line\">\t\tretf</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void FanQiang()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tMessageBox(0, 0, 0, 0);</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tjmp OldEip</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar buff[6] = &#123;0x78, 0x56, 0x34, 0x12, 0x48, 0x00&#125;;</span><br><span class=\"line\">\tDestAddr = (int)FanQiang;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcall fword ptr[buff]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;%x\\n&quot;, Value);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>思路就是在通过调用门提权进入MyFunc函数后，将0环堆栈顶部的返回地址替换成要跳转的其他函数FanQiang的地址（当然替换前要保存原来的EIP，用来返回原函数继续执行），在函数FanQiang中执行代码，最后jmp回原来的返回地址，即可实现”翻墙“。结果如下：</p>\n<p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/11.PNG\"></p>\n<p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/12.PNG\"></p>\n<p>二、代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int Value1;</span><br><span class=\"line\">int Value2;</span><br><span class=\"line\">char buff1[6] = &#123; 0x00, 0x00, 0x00, 0x00, 0x48, 0x00 &#125;;\t//第一个调用门</span><br><span class=\"line\">char buff2[6] = &#123; 0x00, 0x00, 0x00, 0x00, 0x90, 0x00 &#125;;\t//第二个调用门</span><br><span class=\"line\">//从第一个调用门0x48进来的</span><br><span class=\"line\">void _declspec(naked) MyFunc1()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpushad</span><br><span class=\"line\">\t\tpushfd</span><br><span class=\"line\">\t\tmov eax, 0x8003f00c</span><br><span class=\"line\">\t\tmov ebx, [eax]</span><br><span class=\"line\">\t\tmov Value1, ebx</span><br><span class=\"line\">\t\tpopfd</span><br><span class=\"line\">\t\tpopad</span><br><span class=\"line\">\t\tcall fword ptr[buff2]</span><br><span class=\"line\">\t\tretf</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//从第二个调用门0x90进来的</span><br><span class=\"line\">void _declspec(naked) MyFunc2()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpushad</span><br><span class=\"line\">\t\tpushfd</span><br><span class=\"line\">\t\tmov eax, 0x8003f01c</span><br><span class=\"line\">\t\tmov ebx, [eax]</span><br><span class=\"line\">\t\tmov Value2, ebx</span><br><span class=\"line\">\t\tpopfd</span><br><span class=\"line\">\t\tpopad</span><br><span class=\"line\">\t\tretf</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcall fword ptr[buff1]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;%x %x\\n&quot;, Value1, Value2);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>既然是在门中再建一个门，那么就需要在GDT表的空白位置构造两个调用门，如下：</p>\n<p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/13.PNG\"></p>\n<p>执行结果如下：</p>\n<p><img src=\"/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/14.PNG\"></p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：9、陷阱门","url":"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A9%E3%80%81%E9%99%B7%E9%98%B1%E9%97%A8/","content":"<p>上节课讲到了IDT表，在IDT表中有三种门描述符分别是：中断门描述符、任务门描述符和陷阱门描述符。这节课来学习陷阱门。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"陷阱门\"><a href=\"#陷阱门\" class=\"headerlink\" title=\"陷阱门\"></a>陷阱门</h1><p>先来回顾一下中断门描述符结构：</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A9%E3%80%81%E9%99%B7%E9%98%B1%E9%97%A8/1.PNG\"></p>\n<p>再来看一下陷阱门描述符结构：</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A9%E3%80%81%E9%99%B7%E9%98%B1%E9%97%A8/2.PNG\"></p>\n<p>可以看到陷阱门对比中断门的结构来说，只有TYPE域不一样，中断门为1110，而陷阱门为1111。</p>\n<p>中断门与陷阱门几乎一样，但是只有一点不同：<strong>中断门执行时，将IF位清零，但陷阱门不会</strong>。</p>\n<h1 id=\"IF位\"><a href=\"#IF位\" class=\"headerlink\" title=\"IF位\"></a>IF位</h1><p>EFLAGS寄存器结构如下图所示：</p>\n<p><img src=\"/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A9%E3%80%81%E9%99%B7%E9%98%B1%E9%97%A8/3.PNG\"></p>\n<p>IF标志位于eflags寄存器中的标号为9的位置，也就是从后面查的第10个位置。</p>\n<p>中断分为可屏蔽中断和不可屏蔽中断。IF标志用于控制处理器对<strong>可屏蔽中断</strong>请求的响应。置1以响应可屏蔽中断，置0则禁止可屏蔽中断。IF标志对不可屏蔽中断没有影响。</p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"结构体字节对齐","url":"/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/","content":"<p>本节来分析C语言中结构体的字节对齐</p>\n<span id=\"more\"></span>\n\n<p><strong>1、先来测试几个结构体的大小</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test1</span>\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t</span><br><span class=\"line\">    <span class=\"type\">char</span>  a;\t</span><br><span class=\"line\">    <span class=\"type\">int</span> b;\t</span><br><span class=\"line\">&#125;;\t</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test2</span>\t\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t\t</span><br><span class=\"line\">    <span class=\"type\">int</span> a;\t\t</span><br><span class=\"line\">    __int64 b;\t</span><br><span class=\"line\">    <span class=\"type\">char</span> c;\t\t</span><br><span class=\"line\">&#125;;\t\t</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test3</span>\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t</span><br><span class=\"line\">    <span class=\"type\">int</span> a ;\t</span><br><span class=\"line\">    __int64 b ;\t</span><br><span class=\"line\">    <span class=\"type\">char</span> c ;\t</span><br><span class=\"line\">    <span class=\"type\">char</span> d ;\t</span><br><span class=\"line\">&#125;;\t</span><br></pre></td></tr></table></figure>\n\n<p>运行得到</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sizeof</span>(Test1) = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(Test2) = <span class=\"number\">24</span>;</span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(Test3) = <span class=\"number\">24</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、探究结构体的内存分布</strong></p>\n<p>#pragma pack的基本用法为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> pack(n)\t</span></span><br><span class=\"line\"><span class=\"comment\">//结构体。。。\t</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> pack()</span></span><br><span class=\"line\"><span class=\"comment\">//对齐参数：n为字节对齐数，其取值为1、2、4、8，默认是8。</span></span><br></pre></td></tr></table></figure>\n\n<p>如果这个n值比结构体成员的sizeof值小，那么该成员的偏移量应该以此值为准。</p>\n<p>也就是说，结构体成员的偏移量应该取二者的最小值。</p>\n<p>以前面的Test2结构体为例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test2</span>\t\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t\t</span><br><span class=\"line\">    <span class=\"type\">int</span> a;\t\t</span><br><span class=\"line\">    __int64 b;\t</span><br><span class=\"line\">    <span class=\"type\">char</span> c;\t\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>不同的对齐方式对应的内存分布图如下：</p>\n<p><img src=\"/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/1.PNG\"><img src=\"/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/2.PNG\"><img src=\"/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/3.PNG\"></p>\n<p>由于默认是最后的8字节对齐，因此sizeof(Test2) &#x3D; 24。</p>\n<p><em>在这里给一个建议，按照数据类型由小到大的顺序进行书写。</em></p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]},{"title":"逆向分析：switch语句","url":"/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/","content":"<p>本章探究switch语句的反汇编表现形式及特点。</p>\n<span id=\"more\"></span>\n\n<p><strong>1、先来看看当case分支较少时的反汇编代码</strong></p>\n<p>测试代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Func</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>(x)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        switch(x)</span><br><span class=\"line\">7:        &#123;</span><br><span class=\"line\">0040D708 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class=\"line\">0040D70B 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class=\"line\">0040D70E 83 7D FC 01          cmp         dword ptr [ebp-4],1</span><br><span class=\"line\">0040D712 74 0E                je          Func+32h (0040d722)</span><br><span class=\"line\">0040D714 83 7D FC 02          cmp         dword ptr [ebp-4],2</span><br><span class=\"line\">0040D718 74 17                je          Func+41h (0040d731)</span><br><span class=\"line\">0040D71A 83 7D FC 03          cmp         dword ptr [ebp-4],3</span><br><span class=\"line\">0040D71E 74 20                je          Func+50h (0040d740)</span><br><span class=\"line\">0040D720 EB 2D                jmp         Func+5Fh (0040d74f)</span><br><span class=\"line\">8:        case 1:</span><br><span class=\"line\">9:            printf(&quot;1\\n&quot;);</span><br><span class=\"line\">0040D722 68 74 2F 42 00       push        offset string &quot;1\\n&quot; (00422f74)</span><br><span class=\"line\">0040D727 E8 34 39 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D72C 83 C4 04             add         esp,4</span><br><span class=\"line\">10:           break;</span><br><span class=\"line\">0040D72F EB 2B                jmp         Func+6Ch (0040d75c)</span><br><span class=\"line\">11:       case 2:</span><br><span class=\"line\">12:           printf(&quot;2\\n&quot;);</span><br><span class=\"line\">0040D731 68 70 2F 42 00       push        offset string &quot;2\\n&quot; (00422f70)</span><br><span class=\"line\">0040D736 E8 25 39 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D73B 83 C4 04             add         esp,4</span><br><span class=\"line\">13:           break;</span><br><span class=\"line\">0040D73E EB 1C                jmp         Func+6Ch (0040d75c)</span><br><span class=\"line\">14:       case 3:</span><br><span class=\"line\">15:           printf(&quot;3\\n&quot;);</span><br><span class=\"line\">0040D740 68 0C 21 42 00       push        offset string &quot;3\\n&quot; (0042210c)</span><br><span class=\"line\">0040D745 E8 16 39 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D74A 83 C4 04             add         esp,4</span><br><span class=\"line\">16:           break;</span><br><span class=\"line\">0040D74D EB 0D                jmp         Func+6Ch (0040d75c)</span><br><span class=\"line\">17:       default:</span><br><span class=\"line\">18:           printf(&quot;0\\n&quot;);</span><br><span class=\"line\">0040D74F 68 6C 2F 42 00       push        offset string &quot;%d %d %d&quot; (00422f6c)</span><br><span class=\"line\">0040D754 E8 07 39 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D759 83 C4 04             add         esp,4</span><br><span class=\"line\">19:           break;</span><br><span class=\"line\">20:       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>就目前的情况来看，似乎与if…else语句没什么性能上的差异，只不过是把比较的代码全部放到了前面，但也是挨个依次比较判断。<strong>这种情况下与if…else语句没有本质上的区别</strong>。</p>\n<p><strong>2、逐渐增加case的情况分支，观察反汇编代码的情况(何时生成大表)</strong></p>\n<p>在VC++6.0编译器中，当分支有4个时，反汇编发生了变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        switch(x)</span><br><span class=\"line\">7:        &#123;</span><br><span class=\"line\">0040D7C8 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class=\"line\">0040D7CB 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class=\"line\">0040D7CE 8B 4D FC             mov         ecx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7D1 83 E9 01             sub         ecx,1\t\t;注意这里</span><br><span class=\"line\">0040D7D4 89 4D FC             mov         dword ptr [ebp-4],ecx</span><br><span class=\"line\">0040D7D7 83 7D FC 03          cmp         dword ptr [ebp-4],3</span><br><span class=\"line\">0040D7DB 77 46                ja          $L42202+0Fh (0040d823)</span><br><span class=\"line\">0040D7DD 8B 55 FC             mov         edx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7E0 FF 24 95 41 D8 40 00 jmp         dword ptr [edx*4+40D841h]\t;还有这里</span><br><span class=\"line\">8:        case 1:</span><br><span class=\"line\">9:            printf(&quot;1\\n&quot;);</span><br><span class=\"line\">0040D7E7 68 A8 2F 42 00       push        offset string &quot;1\\n&quot; (00422fa8)</span><br><span class=\"line\">0040D7EC E8 6F 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D7F1 83 C4 04             add         esp,4</span><br><span class=\"line\">10:           break;</span><br><span class=\"line\">0040D7F4 EB 3A                jmp         $L42202+1Ch (0040d830)</span><br><span class=\"line\">11:       case 2:</span><br><span class=\"line\">12:           printf(&quot;2\\n&quot;);</span><br><span class=\"line\">0040D7F6 68 74 2F 42 00       push        offset string &quot;2\\n&quot; (00422f74)</span><br><span class=\"line\">0040D7FB E8 60 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D800 83 C4 04             add         esp,4</span><br><span class=\"line\">13:           break;</span><br><span class=\"line\">0040D803 EB 2B                jmp         $L42202+1Ch (0040d830)</span><br><span class=\"line\">14:       case 3:</span><br><span class=\"line\">15:           printf(&quot;3\\n&quot;);</span><br><span class=\"line\">0040D805 68 70 2F 42 00       push        offset string &quot;3\\n&quot; (00422f70)</span><br><span class=\"line\">0040D80A E8 51 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D80F 83 C4 04             add         esp,4</span><br><span class=\"line\">16:           break;</span><br><span class=\"line\">0040D812 EB 1C                jmp         $L42202+1Ch (0040d830)</span><br><span class=\"line\">17:       case 4:</span><br><span class=\"line\">18:           printf(&quot;4\\n&quot;);</span><br><span class=\"line\">0040D814 68 0C 21 42 00       push        offset string &quot;4\\n&quot; (0042210c)</span><br><span class=\"line\">0040D819 E8 42 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D81E 83 C4 04             add         esp,4</span><br><span class=\"line\">19:           break;</span><br><span class=\"line\">0040D821 EB 0D                jmp         $L42202+1Ch (0040d830)</span><br><span class=\"line\">20:       default:</span><br><span class=\"line\">21:           printf(&quot;0\\n&quot;);</span><br><span class=\"line\">0040D823 68 6C 2F 42 00       push        offset string &quot;%d %d %d\\n&quot; (00422f6c)</span><br><span class=\"line\">0040D828 E8 33 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D82D 83 C4 04             add         esp,4</span><br><span class=\"line\">22:           break;</span><br><span class=\"line\">23:       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里有个问题，以正向的角度来看，根据传进来的值与4比较，如果比4大，那么跳转到default分支。然而在反汇编中，是将传进来的值减去1后(实际上是减去分支中的最小值)与3去比较。</p>\n<p>接着往后分析，如果参数满足其中某一个分支，则不跳转到default，将参数传到了edx中，然后跳转到了一个地址中去。这个地址的样子是这样的：[edx*4+40D841h]。现在来看一下40D841h是什么。</p>\n<p><img src=\"/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/1.PNG\"></p>\n<p>可以看到，在40D841h中存的是一张表，这个表里面有四个地址，分别对应的是switch中的四种情况。edx*4作为一个偏移来找到正确的表项。因此前面ecx-1的目的正是为了让分支的值从0开始，便于计算表的偏移。如果case的值是从2开始的，那么就应该是ecx-2。</p>\n<p>上面生成的这张表就叫<strong>大表</strong>，表项是各个分支语句的地址。</p>\n<p>这里已经可以看出来switch与if…else语句性能的差异了。if…else语句需要判断很多次是否满足条件，而switch在case很多的情况下，只需要一条跳转语句jmp dword ptr [edx*4+40D841h]就够了，性能完爆if…else语句。</p>\n<p>接着做测试，当case的值连接但是顺序混乱时，仍然不影响大表的生成。读者可以自行做测试。</p>\n<p><em>注：不一定每个编译器都是4条case才生成大表，不同编译器有不同的算法。</em></p>\n<p><strong>3、将连续的10项中抹去1项或者2项，观察反汇编有无变化(观察大表空缺位置的处理)</strong></p>\n<p>测试代码及其反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        switch(x)</span><br><span class=\"line\">7:        &#123;</span><br><span class=\"line\">0040D7C8 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class=\"line\">0040D7CB 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class=\"line\">0040D7CE 8B 4D FC             mov         ecx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7D1 83 E9 01             sub         ecx,1</span><br><span class=\"line\">0040D7D4 89 4D FC             mov         dword ptr [ebp-4],ecx</span><br><span class=\"line\">0040D7D7 83 7D FC 09          cmp         dword ptr [ebp-4],9</span><br><span class=\"line\">0040D7DB 0F 87 82 00 00 00    ja          $L42210+0Fh (0040d863)</span><br><span class=\"line\">0040D7E1 8B 55 FC             mov         edx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7E4 FF 24 95 81 D8 40 00 jmp         dword ptr [edx*4+40D881h]</span><br><span class=\"line\">8:        case 1:</span><br><span class=\"line\">9:            printf(&quot;1\\n&quot;);</span><br><span class=\"line\">0040D7EB 68 B8 2F 42 00       push        offset string &quot;1\\n&quot; (00422fb8)</span><br><span class=\"line\">0040D7F0 E8 6B 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D7F5 83 C4 04             add         esp,4</span><br><span class=\"line\">10:           break;</span><br><span class=\"line\">0040D7F8 EB 76                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">11:       case 2:</span><br><span class=\"line\">12:           printf(&quot;2\\n&quot;);</span><br><span class=\"line\">0040D7FA 68 B4 2F 42 00       push        offset string &quot;2\\n&quot; (00422fb4)</span><br><span class=\"line\">0040D7FF E8 5C 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D804 83 C4 04             add         esp,4</span><br><span class=\"line\">13:           break;</span><br><span class=\"line\">0040D807 EB 67                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">14:       case 4:</span><br><span class=\"line\">15:           printf(&quot;4\\n&quot;);</span><br><span class=\"line\">0040D809 68 B0 2F 42 00       push        offset string &quot;5\\n&quot; (00422fb0)</span><br><span class=\"line\">0040D80E E8 4D 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D813 83 C4 04             add         esp,4</span><br><span class=\"line\">16:           break;</span><br><span class=\"line\">0040D816 EB 58                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">17:       case 6:</span><br><span class=\"line\">18:           printf(&quot;6\\n&quot;);</span><br><span class=\"line\">0040D818 68 AC 2F 42 00       push        offset string &quot;6\\n&quot; (00422fac)</span><br><span class=\"line\">0040D81D E8 3E 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D822 83 C4 04             add         esp,4</span><br><span class=\"line\">19:           break;</span><br><span class=\"line\">0040D825 EB 49                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">20:       case 7:</span><br><span class=\"line\">21:           printf(&quot;7\\n&quot;);</span><br><span class=\"line\">0040D827 68 A8 2F 42 00       push        offset string &quot;7\\n&quot; (00422fa8)</span><br><span class=\"line\">0040D82C E8 2F 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D831 83 C4 04             add         esp,4</span><br><span class=\"line\">22:           break;</span><br><span class=\"line\">0040D834 EB 3A                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">23:       case 8:</span><br><span class=\"line\">24:           printf(&quot;8\\n&quot;);</span><br><span class=\"line\">0040D836 68 74 2F 42 00       push        offset string &quot;8\\n&quot; (00422f74)</span><br><span class=\"line\">0040D83B E8 20 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D840 83 C4 04             add         esp,4</span><br><span class=\"line\">25:           break;</span><br><span class=\"line\">0040D843 EB 2B                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">26:       case 9:</span><br><span class=\"line\">27:           printf(&quot;9\\n&quot;);</span><br><span class=\"line\">0040D845 68 70 2F 42 00       push        offset string &quot;9\\n&quot; (00422f70)</span><br><span class=\"line\">0040D84A E8 11 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D84F 83 C4 04             add         esp,4</span><br><span class=\"line\">28:           break;</span><br><span class=\"line\">0040D852 EB 1C                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">29:       case 10:</span><br><span class=\"line\">30:           printf(&quot;10\\n&quot;);</span><br><span class=\"line\">0040D854 68 0C 21 42 00       push        offset string &quot;10\\n&quot; (0042210c)</span><br><span class=\"line\">0040D859 E8 02 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D85E 83 C4 04             add         esp,4</span><br><span class=\"line\">31:           break;</span><br><span class=\"line\">0040D861 EB 0D                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">32:       default:</span><br><span class=\"line\">33:           printf(&quot;0\\n&quot;);</span><br><span class=\"line\">0040D863 68 6C 2F 42 00       push        offset string &quot;%d %d %d\\n&quot; (00422f6c)</span><br><span class=\"line\">0040D868 E8 F3 37 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D86D 83 C4 04             add         esp,4</span><br><span class=\"line\">34:           break;</span><br><span class=\"line\">35:       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在x从1-10的分支中删除掉了3和5两个分支，反汇编代码基本的结构没有改变，仍然生成了大表，查看一下大表</p>\n<p><img src=\"/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/3.PNG\"></p>\n<p>可以发现，表里面仍然有十个地址，观察一下删除掉的3和5分支，可以看到表里面对应的内容为40D863，这个地址为default的地址。因此可以而出结论，在连续数据有个别缺失时，编译器会进行填补，填补的内容为default的地址。</p>\n<p><strong>4、在10项中连续抹去，不要抹去最大值和最小值(观察何时生成小表)</strong></p>\n<p>在上面删除一两项时，编译器会用default的地址填充空缺的位置。但是这样会有一个问题，就是会造成内存的浪费，因为default的地址本来就写在那里，不需要去填充它。因此，编译器不会允许无限制的填充下去。</p>\n<p>经测试，在VC++6.0中，连续空缺6个分支，switch的反汇编会发生变化。</p>\n<p>测试代码及其反汇编如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">switch(x)</span><br><span class=\"line\">7:        &#123;</span><br><span class=\"line\">0040D7C8 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class=\"line\">0040D7CB 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class=\"line\">0040D7CE 8B 4D FC             mov         ecx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7D1 83 E9 01             sub         ecx,1</span><br><span class=\"line\">0040D7D4 89 4D FC             mov         dword ptr [ebp-4],ecx</span><br><span class=\"line\">0040D7D7 83 7D FC 09          cmp         dword ptr [ebp-4],9</span><br><span class=\"line\">0040D7DB 77 4E                ja          $L42202+0Fh (0040d82b)</span><br><span class=\"line\">0040D7DD 8B 45 FC             mov         eax,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7E0 33 D2                xor         edx,edx</span><br><span class=\"line\">0040D7E2 8A 90 5D D8 40 00    mov         dl,byte ptr  (0040d85d)[eax]\t;注意这里</span><br><span class=\"line\">0040D7E8 FF 24 95 49 D8 40 00 jmp         dword ptr [edx*4+40D849h]</span><br><span class=\"line\">8:        case 1:</span><br><span class=\"line\">9:            printf(&quot;1\\n&quot;);</span><br><span class=\"line\">0040D7EF 68 A8 2F 42 00       push        offset string &quot;7\\n&quot; (00422fa8)</span><br><span class=\"line\">0040D7F4 E8 67 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D7F9 83 C4 04             add         esp,4</span><br><span class=\"line\">10:           break;</span><br><span class=\"line\">0040D7FC EB 3A                jmp         $L42202+1Ch (0040d838)</span><br><span class=\"line\">11:       case 8:</span><br><span class=\"line\">12:           printf(&quot;8\\n&quot;);</span><br><span class=\"line\">0040D7FE 68 74 2F 42 00       push        offset string &quot;8\\n&quot; (00422f74)</span><br><span class=\"line\">0040D803 E8 58 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D808 83 C4 04             add         esp,4</span><br><span class=\"line\">13:           break;</span><br><span class=\"line\">0040D80B EB 2B                jmp         $L42202+1Ch (0040d838)</span><br><span class=\"line\">14:       case 9:</span><br><span class=\"line\">15:           printf(&quot;9\\n&quot;);</span><br><span class=\"line\">0040D80D 68 70 2F 42 00       push        offset string &quot;9\\n&quot; (00422f70)</span><br><span class=\"line\">0040D812 E8 49 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D817 83 C4 04             add         esp,4</span><br><span class=\"line\">16:           break;</span><br><span class=\"line\">0040D81A EB 1C                jmp         $L42202+1Ch (0040d838)</span><br><span class=\"line\">17:       case 10:</span><br><span class=\"line\">18:           printf(&quot;10\\n&quot;);</span><br><span class=\"line\">0040D81C 68 0C 21 42 00       push        offset string &quot;10\\n&quot; (0042210c)</span><br><span class=\"line\">0040D821 E8 3A 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D826 83 C4 04             add         esp,4</span><br><span class=\"line\">19:           break;</span><br><span class=\"line\">0040D829 EB 0D                jmp         $L42202+1Ch (0040d838)</span><br><span class=\"line\">20:       default:</span><br><span class=\"line\">21:           printf(&quot;0\\n&quot;);</span><br><span class=\"line\">0040D82B 68 6C 2F 42 00       push        offset string &quot;%d %d %d\\n&quot; (00422f6c)</span><br><span class=\"line\">0040D830 E8 2B 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D835 83 C4 04             add         esp,4</span><br><span class=\"line\">22:           break;</span><br><span class=\"line\">23:       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>大体的结构没有改变，但是这里面多出来了两行，将ecx-1后传给了eax，eax作为索引在小表(0040d85d)处获取内容。然后再将获取到的内容传给edx，edx再作为索引去大表(40D849)得到相应的地址。先来看看大表的内容：<img src=\"/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/4.PNG\"></p>\n<p>可以发现，这时大表里面只有5个地址，分别是四个分支和一个default。小表紧跟在大表的后面。小表里面的0、1、2、3分别索引到大表的内容是四个分支，4索引到的是大表中default的地址。</p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]},{"title":"逆向分析：if语句","url":"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/","content":"<p>最近学习完了滴水海哥的逆向初级课程，复习一下，做一下记录。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"全局变量与局部变量\"><a href=\"#全局变量与局部变量\" class=\"headerlink\" title=\"全局变量与局部变量\"></a>全局变量与局部变量</h1><h2 id=\"全局变量的特点\"><a href=\"#全局变量的特点\" class=\"headerlink\" title=\"全局变量的特点\"></a>全局变量的特点</h2><p>1、全局变量在程序编译完成后地址就已经确定下来了，只要程序启动，全局变量就已经存在了。启动后里面是否有值，取决于声明时是否给定了初始值，如果没有，默认是0。</p>\n<p>2、全局变量的值可以被所有函数所修改，里面存储的是最后一次修改的值。</p>\n<p>3、全局变量所占内存会一直存在，直到整个进程结束。</p>\n<p>4、全局变量的反汇编识别：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MOV 寄存器,byte/word/dword ptr ds:[0x12345678]</span><br></pre></td></tr></table></figure>\n\n<p>通过寄存器的宽度，或者byte&#x2F;word&#x2F;dword 来判断全局变量的宽度。如下图：</p>\n<p><img src=\"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416155522649.png\"></p>\n<h2 id=\"局部变量的特点\"><a href=\"#局部变量的特点\" class=\"headerlink\" title=\"局部变量的特点\"></a>局部变量的特点</h2><p>1、局部变量在程序编译完成后并没有分配固定的地址。</p>\n<p>2、在所属的方法没有被调用时，局部变量并不会分配内存地址，只有当所属的程序被调用了，才会在堆栈中分配内存。</p>\n<p>3、当局部变量所属的方法执行完毕后，局部变量所占用的内存将变成垃圾数据，局部变量消失。</p>\n<p>4、局部变量只能在方法内部使用，函数A无法使用函数B的局部变量。</p>\n<p>5、局部变量的反汇编识别：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ebp-4]</span><br><span class=\"line\">[ebp-8]</span><br><span class=\"line\">[ebp-C]</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"函数参数分析\"><a href=\"#函数参数分析\" class=\"headerlink\" title=\"函数参数分析\"></a>函数参数分析</h1><p>如何判断函数有几个参数，以及分别是什么（一般情况）：</p>\n<p>步骤一：观察调用处的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">push 3</span><br><span class=\"line\">push 2</span><br><span class=\"line\">push 1</span><br><span class=\"line\">call 0040100f</span><br></pre></td></tr></table></figure>\n\n<p>步骤二：找到平衡堆栈的代码继续论证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">call 0040100f</span><br><span class=\"line\">add esp, 0Ch\t\t//外平栈</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ret 4/8/0xC/0x10\t//内平栈</span><br></pre></td></tr></table></figure>\n\n<p>两者综合起来分析即可。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> g_r;\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//外平栈，从右至左的顺序压参数入栈\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">void</span> __cdecl <span class=\"title function_\">Function1</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z)</span>\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\tg_r = x+y+z;\t\t\t</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\"><span class=\"comment\">//内平栈，从右至左的顺序压参数入栈</span></span><br><span class=\"line\"><span class=\"type\">void</span> __stdcall <span class=\"title function_\">Function2</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z)</span>\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\tg_r = x+y+z;\t\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//内平栈，头两个DWORD（4字节）类型或者占更少字节的参数被放入寄存器，其他剩下的参数按从右到左的顺序压入栈</span></span><br><span class=\"line\"><span class=\"comment\">//寄存器一般是ECX和EDX</span></span><br><span class=\"line\"><span class=\"type\">void</span> __fastcall <span class=\"title function_\">Function3</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z)</span>\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\tg_r = x+y+z;\t\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416162401815.png\"></p>\n<p>但是上面的分析是一般情况，可能出现问题：</p>\n<p>1、参数传递未必都是通过堆栈，还可能通过使用寄存器（比如fastcall调用约定）。</p>\n<p>2、函数调用处的代码无法查看，只能看到函数内部的。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00401050   push        ebp\t\t\t\t</span><br><span class=\"line\">00401051   mov         ebp,esp\t\t\t\t</span><br><span class=\"line\">00401053   sub         esp,48h\t\t\t\t</span><br><span class=\"line\">00401056   push        ebx\t\t\t\t</span><br><span class=\"line\">00401057   push        esi\t\t\t\t</span><br><span class=\"line\">00401058   push        edi\t\t\t\t</span><br><span class=\"line\">00401059   push        ecx\t\t\t\t</span><br><span class=\"line\">0040105A   lea         edi,[ebp-48h]\t\t\t\t</span><br><span class=\"line\">0040105D   mov         ecx,12h\t\t\t\t</span><br><span class=\"line\">00401062   mov         eax,0CCCCCCCCh\t\t\t\t</span><br><span class=\"line\">00401067   rep stos    dword ptr [edi]\t\t\t\t</span><br><span class=\"line\">00401069   pop         ecx\t\t\t\t</span><br><span class=\"line\">0040106A   mov         dword ptr [ebp-8],edx\t//注意\t\t\t</span><br><span class=\"line\">0040106D   mov         dword ptr [ebp-4],ecx\t//注意\t\t\t\t</span><br><span class=\"line\">00401070   mov         eax,dword ptr [ebp-4]\t\t\t\t</span><br><span class=\"line\">00401073   add         eax,dword ptr [ebp-8]\t\t\t\t</span><br><span class=\"line\">00401076   add         eax,dword ptr [ebp+8]\t\t\t\t</span><br><span class=\"line\">00401079   mov         [g_x (00427958)],eax\t\t\t\t</span><br><span class=\"line\">0040107E   pop         edi\t\t\t\t</span><br><span class=\"line\">0040107F   pop         esi\t\t\t\t</span><br><span class=\"line\">00401080   pop         ebx\t\t\t\t</span><br><span class=\"line\">00401081   mov         esp,ebp\t\t\t\t</span><br><span class=\"line\">00401083   pop         ebp\t\t\t\t</span><br><span class=\"line\">00401084   ret         4\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析步骤：</strong></p>\n<p>1、不考虑ebp和esp。</p>\n<p>2、只找<strong>给别人赋值的寄存器</strong>，eax&#x2F;ecx&#x2F;edx&#x2F;ebx&#x2F;esi&#x2F;edi。</p>\n<p>3、找到以后追查其来源，如果，该寄存器中的值不是在函数内存赋值的，那一定是传进来的参数。</p>\n<p>公式一：寄存器 + ret  4 &#x3D; 参数个数</p>\n<p>公式二：寄存器 + [ebp+8] +[ebp+0x] &#x3D; 参数个数</p>\n<h1 id=\"if语句逆向分析\"><a href=\"#if语句逆向分析\" class=\"headerlink\" title=\"if语句逆向分析\"></a>if语句逆向分析</h1><p>函数内部代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00401030   push        ebp\t\t\t\t\t</span><br><span class=\"line\">00401031   mov         ebp,esp\t\t\t\t\t</span><br><span class=\"line\">00401033   sub         esp,40h\t\t\t\t\t</span><br><span class=\"line\">00401036   push        ebx\t\t\t\t\t</span><br><span class=\"line\">00401037   push        esi\t\t\t\t\t</span><br><span class=\"line\">00401038   push        edi\t\t\t\t\t</span><br><span class=\"line\">00401039   lea         edi,[ebp-40h]\t\t\t\t\t</span><br><span class=\"line\">0040103C   mov         ecx,10h\t\t\t\t\t</span><br><span class=\"line\">00401041   mov         eax,0CCCCCCCCh\t</span><br><span class=\"line\">--------------------------------------------------------------------</span><br><span class=\"line\">00401046   rep stos    dword ptr [edi]\t\t\t\t\t</span><br><span class=\"line\">00401048   mov         eax,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">0040104B   cmp         eax,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">0040104E   jle         00401059\t\t\t\t\t</span><br><span class=\"line\">00401050   mov         ecx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">00401053   mov         dword ptr [004225c4],ecx\t</span><br><span class=\"line\">--------------------------------------------------------------------</span><br><span class=\"line\">00401059   pop         edi\t\t\t\t\t</span><br><span class=\"line\">0040105A   pop         esi\t\t\t\t\t</span><br><span class=\"line\">0040105B   pop         ebx\t\t\t\t\t</span><br><span class=\"line\">0040105C   mov         esp,ebp\t\t\t\t\t</span><br><span class=\"line\">0040105E   pop         ebp\t\t\t\t\t</span><br><span class=\"line\">0040105F   ret\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数内部功能分析：</strong></p>\n<p>1、分析参数：[ebp+8]：X\t\t[ebp+0Ch]：Y</p>\n<p>2、分析局部变量：无</p>\n<p>3、分析全局变量：mov   dword ptr [004225c4],ecx</p>\n<p>4、功能分析：将参数X存到EAX中，然后比较EAX与参数Y的大小，如果X&lt;&#x3D;Y 那么跳转到00401059的位置，否则，将X的值存储到全局变量中</p>\n<p>5、返回值分析：无</p>\n<h1 id=\"if…else语句逆向分析\"><a href=\"#if…else语句逆向分析\" class=\"headerlink\" title=\"if…else语句逆向分析\"></a>if…else语句逆向分析</h1><p><strong>if…else语句反汇编判断：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">IF_BEGIN:</span><br><span class=\"line\">\t\t先执行各类影响标志位的指令</span><br><span class=\"line\">\t\tjxx ELSE_BEGIN</span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">IF_END:</span><br><span class=\"line\">\t\tjmp END</span><br><span class=\"line\">\t\tELSE_BEGIN：</span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">\t\tELSE_END：</span><br><span class=\"line\">END：</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点分析：</strong></p>\n<p>1、如果不跳转，那么会执行到jmp处，jmp直接跳转到END处</p>\n<p>2、如果跳转，则会直接跳过jmp END处的代码，直接执行后面的代码</p>\n<p><strong>总结：</strong>第一个jxx跳转的地址前面有一个jmp ,可以判断是if…else…语句</p>\n<p><strong>案例分析：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010B0   push        ebp\t\t\t\t\t</span><br><span class=\"line\">004010B1   mov         ebp,esp\t\t\t\t\t</span><br><span class=\"line\">004010B3   sub         esp,44h\t\t\t\t\t</span><br><span class=\"line\">004010B6   push        ebx\t\t\t\t\t</span><br><span class=\"line\">004010B7   push        esi\t\t\t\t\t</span><br><span class=\"line\">004010B8   push        edi\t\t\t\t\t</span><br><span class=\"line\">004010B9   lea         edi,[ebp-44h]\t\t\t\t\t</span><br><span class=\"line\">004010BC   mov         ecx,11h\t\t\t\t\t</span><br><span class=\"line\">004010C1   mov         eax,0CCCCCCCCh\t\t\t\t\t</span><br><span class=\"line\">004010C6   rep stos    dword ptr [edi]\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010C8   mov         eax,[004225c4]\t\t\t\t\t</span><br><span class=\"line\">004010CD   mov         dword ptr [ebp-4],eax\t\t\t\t\t</span><br><span class=\"line\">004010D0   mov         ecx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010D3   cmp         ecx,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010D6   jle         004010e6\t\t\t\t\t</span><br><span class=\"line\">004010D8   mov         edx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010DB   add         edx,dword ptr [ebp-4]\t\t\t\t\t</span><br><span class=\"line\">004010DE   mov         dword ptr [004225c4],edx\t\t\t\t\t</span><br><span class=\"line\">004010E4   jmp         004010f1\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010E6   mov         eax,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010E9   add         eax,dword ptr [ebp-4]\t\t\t\t\t</span><br><span class=\"line\">004010EC   mov         [004225c4],eax\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010F1   pop         edi\t\t\t\t\t</span><br><span class=\"line\">004010F2   pop         esi\t\t\t\t\t</span><br><span class=\"line\">004010F3   pop         ebx\t\t\t\t\t</span><br><span class=\"line\">004010F4   mov         esp,ebp\t\t\t\t\t</span><br><span class=\"line\">004010F6   pop         ebp\t\t\t\t\t</span><br><span class=\"line\">004010F7   ret\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数内部功能分析：</strong></p>\n<p>1、分析参数：[ebp+8]：X\t\t[ebp+0Ch]：Y</p>\n<p>2、分析局部变量：[ebp-4] &#x3D; eax &#x3D; [004225c4]</p>\n<p>3、分析全局变量： [004225c4]：G</p>\n<p>4、功能分析：比较X与Y的大小</p>\n<p>如果X&lt;&#x3D;Y  那么执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010E6   mov         eax,dword ptr [ebp+0Ch]\t\t//Y\t\t\t\t</span><br><span class=\"line\">004010E9   add         eax,dword ptr [ebp-4]\t\t//Y = Y + G\t\t\t</span><br><span class=\"line\">004010EC   mov         [004225c4],eax\t\t\t//G = Y</span><br></pre></td></tr></table></figure>\n\n<p>如果X&gt;Y 那么执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010D8   mov         edx,dword ptr [ebp+8]\t\t//X\t\t\t\t</span><br><span class=\"line\">004010DB   add         edx,dword ptr [ebp-4]\t\t//X = X + G\t\t\t\t\t</span><br><span class=\"line\">004010DE   mov         dword ptr [004225c4],edx\t\t//G = X\t\t\t\t</span><br><span class=\"line\">004010E4   jmp         004010f1</span><br></pre></td></tr></table></figure>\n\n<p>5、返回值分析：无</p>\n<h1 id=\"if…else-if…else语句逆向分析\"><a href=\"#if…else-if…else语句逆向分析\" class=\"headerlink\" title=\"if…else if…else语句逆向分析\"></a>if…else if…else语句逆向分析</h1><p><strong>IF…ELSE IF…ELSE IF..多分支语句的反汇编判断：</strong></p>\n<p><img src=\"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416212606777.png\"></p>\n<p><strong>分析：</strong></p>\n<p>1、当每个条件跳转指令要跳转的地址前面都有jmp 指令</p>\n<p>2、这些jmp指令跳转的地址都是一样的</p>\n<p>3、如果某个分支没有条件判断，则为else部分</p>\n<p><strong>案例分析：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010B0   push        ebp\t\t\t\t\t</span><br><span class=\"line\">004010B1   mov         ebp,esp\t\t\t\t\t</span><br><span class=\"line\">004010B3   sub         esp,4Ch\t\t\t\t\t</span><br><span class=\"line\">004010B6   push        ebx\t\t\t\t\t</span><br><span class=\"line\">004010B7   push        esi\t\t\t\t\t</span><br><span class=\"line\">004010B8   push        edi\t\t\t\t\t</span><br><span class=\"line\">004010B9   lea         edi,[ebp-4Ch]\t\t\t\t\t</span><br><span class=\"line\">004010BC   mov         ecx,13h\t\t\t\t\t</span><br><span class=\"line\">004010C1   mov         eax,0CCCCCCCCh\t\t\t\t\t</span><br><span class=\"line\">004010C6   rep stos    dword ptr [edi]\t</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">004010C8   mov         dword ptr [ebp-4],0\t\t\t\t\t</span><br><span class=\"line\">004010CF   mov         dword ptr [ebp-8],1\t\t\t\t\t</span><br><span class=\"line\">004010D6   mov         dword ptr [ebp-0Ch],2\t\t\t\t\t</span><br><span class=\"line\">004010DD   mov         eax,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010E0   cmp         eax,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010E3   jle         004010f0\t\t\t\t\t</span><br><span class=\"line\">004010E5   mov         ecx,dword ptr [ebp-8]\t\t\t\t\t</span><br><span class=\"line\">004010E8   add         ecx,1\t\t\t\t\t</span><br><span class=\"line\">004010EB   mov         dword ptr [ebp-4],ecx\t\t\t\t\t</span><br><span class=\"line\">004010EE   jmp         00401123\t\t\t\t\t\t//jmp 00401123</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010F0   mov         edx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010F3   cmp         edx,dword ptr [ebp+10h]\t\t\t\t\t</span><br><span class=\"line\">004010F6   jle         00401103\t\t\t\t\t</span><br><span class=\"line\">004010F8   mov         eax,dword ptr [ebp-0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010FB   add         eax,1\t\t\t\t\t</span><br><span class=\"line\">004010FE   mov         dword ptr [ebp-4],eax\t\t\t\t\t</span><br><span class=\"line\">00401101   jmp         00401123\t\t\t\t\t\t//jmp 00401123</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">00401103   mov         ecx,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">00401106   cmp         ecx,dword ptr [ebp+10h]\t\t\t\t\t</span><br><span class=\"line\">00401109   jle         00401116\t\t\t\t\t</span><br><span class=\"line\">0040110B   mov         edx,dword ptr [ebp-8]\t\t\t\t\t</span><br><span class=\"line\">0040110E   add         edx,dword ptr [ebp-0Ch]\t\t\t\t\t</span><br><span class=\"line\">00401111   mov         dword ptr [ebp-4],edx\t\t\t\t\t</span><br><span class=\"line\">00401114   jmp         00401123\t\t\t\t\t\t//jmp 00401123</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">00401116   mov         eax,dword ptr [ebp-0Ch]\t\t\t\t\t</span><br><span class=\"line\">00401119   mov         ecx,dword ptr [ebp-8]\t\t\t\t\t</span><br><span class=\"line\">0040111C   lea         edx,[ecx+eax+1]\t\t\t\t\t</span><br><span class=\"line\">00401120   mov         dword ptr [ebp-4],edx\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">00401123   mov         eax,dword ptr [ebp-4]\t\t\t\t\t</span><br><span class=\"line\">00401126   pop         edi\t\t\t\t\t</span><br><span class=\"line\">00401127   pop         esi\t\t\t\t\t</span><br><span class=\"line\">00401128   pop         ebx\t\t\t\t\t</span><br><span class=\"line\">00401129   mov         esp,ebp\t\t\t\t\t</span><br><span class=\"line\">0040112B   pop         ebp\t\t\t\t\t</span><br><span class=\"line\">0040112C   ret\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数内部功能分析：</strong></p>\n<p>1、分析参数：[ebp+8]：X\t\t[ebp+0Ch]：Y\t\t[ebp-0Ch]：Z</p>\n<p>2、分析局部变量：[ebp-4] &#x3D; A &#x3D; 0\t\t[ebp-8] &#x3D; B &#x3D; 1\t\t[ebp-0C] &#x3D; C &#x3D; 2</p>\n<p>3、分析全局变量：无</p>\n<p>4、功能分析：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(x &gt; y)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = B + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; z)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = C + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; z)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = B + C\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">else</span>\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = B + C + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">return</span> A;\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><em>注意函数返回值的写法，以eax传出。</em></p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]},{"title":"逆向分析：参数、返回值和数组","url":"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%8F%82%E6%95%B0%E3%80%81%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8C%E6%95%B0%E7%BB%84/","content":"<p>这次来分析参数、返回值和数组在反汇编中的表现形式。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"返回值的传递\"><a href=\"#返回值的传递\" class=\"headerlink\" title=\"返回值的传递\"></a>返回值的传递</h1><p>以char、short和int类型的返回值为例，先来看看char类型的返回值，测试代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> g_r = <span class=\"number\">1</span>;\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//返回值类型为char的函数\t\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"title function_\">Fun</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> g_r + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a = Fun();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, a);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Fun函数在反汇编中的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00401030 55                   push        ebp</span><br><span class=\"line\">00401031 8B EC                mov         ebp,esp</span><br><span class=\"line\">00401033 83 EC 40             sub         esp,40h</span><br><span class=\"line\">00401036 53                   push        ebx</span><br><span class=\"line\">00401037 56                   push        esi</span><br><span class=\"line\">00401038 57                   push        edi</span><br><span class=\"line\">00401039 8D 7D C0             lea         edi,[ebp-40h]</span><br><span class=\"line\">0040103C B9 10 00 00 00       mov         ecx,10h</span><br><span class=\"line\">00401041 B8 CC CC CC CC       mov         eax,0CCCCCCCCh</span><br><span class=\"line\">00401046 F3 AB                rep stos    dword ptr [edi]</span><br><span class=\"line\">00401048 0F BE 05 14 6B 42 00 movsx       eax,byte ptr [g_r (00426b14)]\t;注意这里的byte</span><br><span class=\"line\">0040104F 83 C0 01             add         eax,1</span><br><span class=\"line\">00401052 5F                   pop         edi</span><br><span class=\"line\">00401053 5E                   pop         esi</span><br><span class=\"line\">00401054 5B                   pop         ebx</span><br><span class=\"line\">00401055 8B E5                mov         esp,ebp</span><br><span class=\"line\">00401057 5D                   pop         ebp</span><br><span class=\"line\">00401058 C3                   ret</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这里用全局变量的符号位填入eax中，然后再向eax中低8位（byte）填入这个全局变量的值。</p>\n<p>当返回值的类型变为short和int时，byte也相应的变为了word和dword。</p>\n<p>由此可见，返回值的传递类型在汇编与源代码中是一致的。</p>\n<h1 id=\"参数的传递\"><a href=\"#参数的传递\" class=\"headerlink\" title=\"参数的传递\"></a>参数的传递</h1><p>以char、short和int类型的参数为例，先来看看char类型的参数，测试代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Function</span><span class=\"params\">(<span class=\"type\">char</span> x,<span class=\"type\">char</span> y,<span class=\"type\">char</span> z)</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">\tFunction(a, b, c);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在函数调用处查看反汇编代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">11:       char a = 1;\t\t\t\t\t\t\t</span><br><span class=\"line\">00401068 C6 45 FC 01          mov         byte ptr [ebp-4],1\t\t\t\t\t\t\t</span><br><span class=\"line\">12:       char b = 2;\t\t\t\t\t\t\t</span><br><span class=\"line\">0040106C C6 45 F8 02          mov         byte ptr [ebp-8],2\t\t\t\t\t\t\t</span><br><span class=\"line\">13:       char c = 3;\t\t\t\t\t\t\t</span><br><span class=\"line\">00401070 C6 45 F4 03          mov         byte ptr [ebp-0Ch],3\t\t\t\t\t\t\t</span><br><span class=\"line\">14:       Function(a, b, c);\t\t\t\t\t\t\t</span><br><span class=\"line\">00401074 8A 45 F4             mov         al,byte ptr [ebp-0Ch]\t\t\t\t\t\t\t</span><br><span class=\"line\">00401077 50                   push        eax\t\t\t\t\t\t\t</span><br><span class=\"line\">00401078 8A 4D F8             mov         cl,byte ptr [ebp-8]\t\t\t\t\t\t\t</span><br><span class=\"line\">0040107B 51                   push        ecx\t\t\t\t\t\t\t</span><br><span class=\"line\">0040107C 8A 55 FC             mov         dl,byte ptr [ebp-4]\t\t\t\t\t\t\t</span><br><span class=\"line\">0040107F 52                   push        edx\t\t\t\t\t\t\t</span><br><span class=\"line\">00401080 E8 80 FF FF FF       call        @ILT+0(Function) (00401005)\t\t\t\t\t</span><br><span class=\"line\">00401085 83 C4 0C             add         esp,0Ch\t\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，当参数以char类型传递时，虽然是将byte（1个字节）传给了eax，但是在调用函数前仍然push的是eax（4个字节）。当char类型换成short和int时，不同的只是eax寄存器的利用空间。因此，当参数是char和short类型时，造成了空间的浪费。</p>\n<p><em><u>因此建议，传入整数类型的参数时，应该使用int类型（4个字节）。</u></em></p>\n<p>补充一个思考题，代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数定义：\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Plus</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\tx = x + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//入口函数\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = <span class=\"number\">1</span>;\t\t\t\t\t</span><br><span class=\"line\">\tPlus(x);\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,x);\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>这个程序打印出来的结果是1，而不是2。原因在反汇编代码中很容易看出来，在调用函数前，将x重新push了一次到Plus函数的栈中。因此Plus操作的是Plus函数栈中的那个x，而打印原来的x值没有变。</p>\n<h1 id=\"局部变量的内存分配\"><a href=\"#局部变量的内存分配\" class=\"headerlink\" title=\"局部变量的内存分配\"></a>局部变量的内存分配</h1><p>测试程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Function</span><span class=\"params\">()</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> a = <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> b = <span class=\"number\">2</span>;\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">short</span> c = <span class=\"number\">3</span>;\t\t</span><br><span class=\"line\">\t<span class=\"type\">short</span> d = <span class=\"number\">4</span>;\t\t\t\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>测试程序的反汇编代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        char a = 1;</span><br><span class=\"line\">0040F028 C6 45 FC 01          mov         byte ptr [ebp-4],1</span><br><span class=\"line\">7:        char b = 2;</span><br><span class=\"line\">0040F02C C6 45 F8 02          mov         byte ptr [ebp-8],2</span><br><span class=\"line\">8:</span><br><span class=\"line\">9:        short c = 3;</span><br><span class=\"line\">0040F030 66 C7 45 F4 03 00    mov         word ptr [ebp-0Ch],offset Function+24h (0040f034)</span><br><span class=\"line\">10:       short d = 4;</span><br><span class=\"line\">0040F036 66 C7 45 F0 04 00    mov         word ptr [ebp-10h],offset Function+2Ah (0040f03a)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，不管局部变量是char还是short类型，尽管他们在赋值的时候是按照对应的长度byte(1字节)和word(2字节)来赋值，但是这些变量之间的间隔仍然是4字节。因此可以总结如下：</p>\n<p>1、小于32位的局部变量，空间在分配时，按32位分配。</p>\n<p>2、使用时按实际的宽度使用。</p>\n<p>3、不要定义char&#x2F;short类型的局部变量。</p>\n<p>4、<u>参数与局部变量没有本质区别，都是局部变量，都在栈中分配。</u></p>\n<p>5、完全可以把参数当初局部变量使用。</p>\n<h1 id=\"数组的反汇编\"><a href=\"#数组的反汇编\" class=\"headerlink\" title=\"数组的反汇编\"></a>数组的反汇编</h1><p>先来看局部变量是如何入栈的，测试程序及反汇编如下\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        int v_0 = 1;</span><br><span class=\"line\">00401038 C7 45 FC 01 00 00 00 mov         dword ptr [ebp-4],1</span><br><span class=\"line\">7:        int v_1 = 2;</span><br><span class=\"line\">0040103F C7 45 F8 02 00 00 00 mov         dword ptr [ebp-8],2</span><br><span class=\"line\">8:        int v_2 = 3;</span><br><span class=\"line\">00401046 C7 45 F4 03 00 00 00 mov         dword ptr [ebp-0Ch],3</span><br><span class=\"line\">9:        int v_3 = 4;</span><br><span class=\"line\">0040104D C7 45 F0 04 00 00 00 mov         dword ptr [ebp-10h],4</span><br><span class=\"line\">10:       int v_4 = 5;</span><br><span class=\"line\">00401054 C7 45 EC 05 00 00 00 mov         dword ptr [ebp-14h],5</span><br><span class=\"line\">11:       int v_5 = 6;</span><br><span class=\"line\">0040105B C7 45 E8 06 00 00 00 mov         dword ptr [ebp-18h],6</span><br><span class=\"line\">12:       int v_6 = 7;</span><br><span class=\"line\">00401062 C7 45 E4 07 00 00 00 mov         dword ptr [ebp-1Ch],7</span><br><span class=\"line\">13:       int v_7 = 8;</span><br><span class=\"line\">00401069 C7 45 E0 08 00 00 00 mov         dword ptr [ebp-20h],8</span><br><span class=\"line\">14:       int v_8 = 9;</span><br><span class=\"line\">00401070 C7 45 DC 09 00 00 00 mov         dword ptr [ebp-24h],9</span><br><span class=\"line\">15:       int v_9 = 10;</span><br><span class=\"line\">00401077 C7 45 D8 0A 00 00 00 mov         dword ptr [ebp-28h],0Ah</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这些局部变量是按定义顺序依次入栈的。</p>\n<p>然后来看看将它们写成数组时，反汇编是什么样子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        int arr[10] = &#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class=\"line\">00401038 C7 45 D8 01 00 00 00 mov         dword ptr [ebp-28h],1</span><br><span class=\"line\">0040103F C7 45 DC 02 00 00 00 mov         dword ptr [ebp-24h],2</span><br><span class=\"line\">00401046 C7 45 E0 03 00 00 00 mov         dword ptr [ebp-20h],3</span><br><span class=\"line\">0040104D C7 45 E4 04 00 00 00 mov         dword ptr [ebp-1Ch],4</span><br><span class=\"line\">00401054 C7 45 E8 05 00 00 00 mov         dword ptr [ebp-18h],5</span><br><span class=\"line\">0040105B C7 45 EC 06 00 00 00 mov         dword ptr [ebp-14h],6</span><br><span class=\"line\">00401062 C7 45 F0 07 00 00 00 mov         dword ptr [ebp-10h],7</span><br><span class=\"line\">00401069 C7 45 F4 08 00 00 00 mov         dword ptr [ebp-0Ch],8</span><br><span class=\"line\">00401070 C7 45 F8 09 00 00 00 mov         dword ptr [ebp-8],9</span><br><span class=\"line\">00401077 C7 45 FC 0A 00 00 00 mov         dword ptr [ebp-4],0Ah</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，当写成数组时，数据存入栈的顺序是从后向前，即先存最后的10，依次向前。与前面正好相反。</p>\n<h1 id=\"补充几个小练习\"><a href=\"#补充几个小练习\" class=\"headerlink\" title=\"补充几个小练习\"></a>补充几个小练习</h1><p>1、返回值超过32位时，存在哪里？用long long(__int64)类型做实验</p>\n<p>测试代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">__int64 <span class=\"title function_\">Function</span><span class=\"params\">()</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\t__int64 x = <span class=\"number\">0x1234567890</span>;\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x;\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>查看反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        __int64 x = 0x1234567890;</span><br><span class=\"line\">00401038 C7 45 F8 90 78 56 34 mov         dword ptr [ebp-8],34567890h</span><br><span class=\"line\">0040103F C7 45 FC 12 00 00 00 mov         dword ptr [ebp-4],12h</span><br><span class=\"line\">7:        return x;</span><br><span class=\"line\">00401046 8B 45 F8             mov         eax,dword ptr [ebp-8]</span><br><span class=\"line\">00401049 8B 55 FC             mov         edx,dword ptr [ebp-4]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，返回值位64位时，使用了两个寄存器来存储。</p>\n<p>2、探究char arr[3] &#x3D; {1,2,3};与 char arr[4] &#x3D; {1,2,3,4};哪个更节省空间？</p>\n<p>先来看char arr[3] &#x3D; {1,2,3};的反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        char arr[3] = &#123;1, 2, 3&#125;;</span><br><span class=\"line\">00401038 C6 45 FC 01          mov         byte ptr [ebp-4],1</span><br><span class=\"line\">0040103C C6 45 FD 02          mov         byte ptr [ebp-3],2</span><br><span class=\"line\">00401040 C6 45 FE 03          mov         byte ptr [ebp-2],3</span><br></pre></td></tr></table></figure>\n\n<p>然后再来看char arr[4] &#x3D; {1,2,3,4};的反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        char arr[4] = &#123;1, 2, 3, 4&#125;;</span><br><span class=\"line\">00401038 C6 45 FC 01          mov         byte ptr [ebp-4],1</span><br><span class=\"line\">0040103C C6 45 FD 02          mov         byte ptr [ebp-3],2</span><br><span class=\"line\">00401040 C6 45 FE 03          mov         byte ptr [ebp-2],3</span><br><span class=\"line\">00401044 C6 45 FF 04          mov         byte ptr [ebp-1],4</span><br></pre></td></tr></table></figure>\n\n<p>分别看到它们的反汇编代码，占用的总的内存是一样大小的，反而第一种有一个字节没有被使用，浪费掉了。</p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]},{"title":"逆向分析：循环语句","url":"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/","content":"<p>上一次学习了全局变量和局部变量的特点，并分析了if语句在反汇编中的样子，今天来分析<strong>循环语句</strong>。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"do…while循环语句\"><a href=\"#do…while循环语句\" class=\"headerlink\" title=\"do…while循环语句\"></a>do…while循环语句</h1><p>do…while语句语法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//执行代码\t</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(表达式)\t\t</span><br></pre></td></tr></table></figure>\n\n<p>do…while语句反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DO_BEGIN地址:</span><br><span class=\"line\">\t\t影响标志位的指令</span><br><span class=\"line\">\t\tjxx DO_BEGIN</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<p><img src=\"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/1.PNG\"></p>\n<p>总结：</p>\n<p>1、根据条件跳转指令所跳转到的地址，可以得到循环语句块的起始地址。</p>\n<p>2、根据条件跳转指令所在的地址，可以得到循环语句块的结束地址。</p>\n<p>3、条件跳转的逻辑与源码相同。</p>\n<h1 id=\"while循环语句\"><a href=\"#while循环语句\" class=\"headerlink\" title=\"while循环语句\"></a>while循环语句</h1><p>while语句语法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(表达式)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//执行代码\t</span></span><br><span class=\"line\">&#125;\t\t</span><br></pre></td></tr></table></figure>\n\n<p>while语句反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">WHILE_BEGIN:\t\t\t\t\t\t</span><br><span class=\"line\">\t影响标志位的指令\t\t\t\t\t</span><br><span class=\"line\">\tjxx WHILE_END ;条件成立跳转到循环语句块结尾处\t\t\t\t\t</span><br><span class=\"line\">\t......\t\t\t\t\t</span><br><span class=\"line\">\tjmp WHILE_BEGIN ;跳转到条件比较处\t\t\t\t\t</span><br><span class=\"line\">WHILE_END:\t\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<p><img src=\"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/2.PNG\"></p>\n<p>总结：</p>\n<p>1、根据条件跳转指令所跳转到的地址，可以得到循环语句块的结束地址。</p>\n<p>2、根据jmp指令所跳转到的地址，可以得到循环语句块的起始地址。</p>\n<p>3、在还原while 比较时，条件跳转的逻辑与源码相反</p>\n<h1 id=\"for循环语句\"><a href=\"#for循环语句\" class=\"headerlink\" title=\"for循环语句\"></a>for循环语句</h1><p>for语句语法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(表达式<span class=\"number\">1</span>；表达式<span class=\"number\">2</span>；表达式<span class=\"number\">3</span>)\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//执行的代码\t\t</span></span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>for循环的执行次序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">表达式1\t\t\t</span><br><span class=\"line\">表达式2\t\t\t</span><br><span class=\"line\">执行的代码(大括号里面的内容)\t\t\t</span><br><span class=\"line\">表达式3\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">表达式2 //如果表达式2成立\t\t\t</span><br><span class=\"line\">执行的代码(大括号里面的内容)\t\t\t</span><br><span class=\"line\">表达式3\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">表达式2 //如果表达式2成立\t\t\t</span><br><span class=\"line\">执行的代码(大括号里面的内容)\t\t\t</span><br><span class=\"line\">表达式3\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">表达式2 //如果不成立\t\t\t</span><br><span class=\"line\">跳出循环\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<p><img src=\"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/3.PNG\"></p>\n<p>总结：</p>\n<p>1、第一个jmp 指令之前为赋初值部分。</p>\n<p>2、第一个jmp 指令所跳转的地址为循环条件判定部分起始。</p>\n<p>3、判断条件后面的跳转指令条件成立时跳转的循环体外面。</p>\n<p>4、条件判断跳转指令所指向的地址上面有一个jmp，jmp地址为表达式3的起始位置。</p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]}]