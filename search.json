[{"title":"PE研究：PE文件的加载","url":"/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/","content":"<p>PE文件是Windows操作系统下使用的32位可执行文件格式。关于PE文件的结构以及各字段的意义，网络上有很详细的资料，这里不再赘述(或者用到的时候再说明)。本版块主要涉及Windows下的一些小应用。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"PE文件的加载过程\"><a href=\"#PE文件的加载过程\" class=\"headerlink\" title=\"PE文件的加载过程\"></a>PE文件的加载过程</h1><p>首先要知道，PE文件有在磁盘上与在内存中的两种状态。如下图所示</p>\n<p><img src=\"/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/1.PNG\"></p>\n<p>可以看到，这两种状态大体的结构布局是一致的，但是占用的内存大小是不同的，而且两者对齐的大小<strong>有可能</strong>不同。说是有可能，是因为PE文件在磁盘上的对齐方式为FileAlignment，其值可能为0x200h或者0x1000h，而在内存中的对齐方式为SectionAlignment，其值一般为0x1000h。</p>\n<p>Windows系统将PE文件从磁盘读入内存并执行的过程中，就存在上面的这个“拉伸”的过程。DOS头和NT头以及块表位置与大小不变，剩下的各个节按照对齐方式对齐。现在可以将PE文件的加载过程总结如下：</p>\n<p>1、将文件从磁盘读取并拷贝到内存中，这时内存中的布局与在磁盘上的布局是一样的，拷贝在内存中的地址我们一般称为FileBuffer。</p>\n<p>2、根据SizeOfImage的大小，开辟一块缓冲区，将来“拉伸”后的内容就会放到这里面，这个地址我们一般称为ImageBuffer。这块内存会被放入4GB大小的进程空间中。</p>\n<p>3、根据SizeOfHeader的大小，将头信息从FileBuffer拷贝到ImageBuffer。</p>\n<p>4、根据节表中的信息循环将FileBuffer中的节拷贝到ImageBuffer中。</p>\n<p><img src=\"/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/2.PNG\"></p>\n<p>在“拉伸”完毕后，程序还不能跑起来，Windows系统还需要做一些收尾的工作才能运行。后续我们会通过代码来模拟这一过程。</p>\n<h1 id=\"PE文件拉伸与还原的实现\"><a href=\"#PE文件拉伸与还原的实现\" class=\"headerlink\" title=\"PE文件拉伸与还原的实现\"></a>PE文件拉伸与还原的实现</h1><p>前面提到过，一个PE文件从磁盘被读入并拉伸后，还不能立即运行起来。现在我们要实现这样的功能，将PE文件读入内存并拉伸，然后再将拉伸后的内容还原回原来的PE文件并存盘，该文件是可以双击运行的。如图：</p>\n<p><img src=\"/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/3.PNG\"></p>\n<p>各个模块实现代码如下(PE的各结构定义这里不再赘述)</p>\n<p><strong>1、将文件读入内存，并返回FileBuffer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">Read_exe</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE* fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tfp = fopen(<span class=\"string\">&quot;C:\\\\Windows\\\\System32\\\\notepad.exe&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>);\t<span class=\"comment\">//这里存放要读取的PE文件</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!fp)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;无法打开 EXE 文件!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsize = getlength(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FileBuffer = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(FileBuffer != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfread(FileBuffer, size, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Wrong!\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FileBuffer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//获取文件的大小</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getlength</span><span class=\"params\">(FILE* fp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">\tsize = ftell(fp);</span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0</span>, SEEK_SET);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、将读入内存的文件拉伸，并返回ImageBuffer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">file_to_image</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 完成初始化工作 */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FileBuffer = Read_exe();</span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)FileBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew +<span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\t<span class=\"type\">int</span> SizeOfImage = (<span class=\"type\">int</span>)poph-&gt;SizeOfImage;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(SizeOfImage);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(ImageBuffer, <span class=\"number\">0</span>, SizeOfImage);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> size_part1 = <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">//计算头与节表的大小之和</span></span><br><span class=\"line\">\tsize_part1 = ((image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph))-&gt;PointerToRawData;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(ImageBuffer, FileBuffer, size_part1);    <span class=\"comment\">//将文件头与节表复制到imagebuffer中</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> numofsections = (<span class=\"type\">int</span>)(pph-&gt;NumberOfSection);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; numofsections; i++)          <span class=\"comment\">//循环将每个节复制到imagebuffer中</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* des = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)ImageBuffer + pish-&gt;VirtualAddress);</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* src = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)FileBuffer + pish-&gt;PointerToRawData);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> size = (<span class=\"type\">int</span>)(pish-&gt;SizeOfRawData);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(des, src, size);</span><br><span class=\"line\">\t\tpish++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ImageBuffer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、将拉伸后的内容还原为原来的PE文件，并存盘</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>*  <span class=\"title function_\">image_to_file</span><span class=\"params\">(<span class=\"type\">char</span>* ImageBuffer)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 完成初始化工作 */</span></span><br><span class=\"line\">\t<span class=\"comment\">//char* ImageBuffer = file_to_image();</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize = (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData) + (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* NewBuffer = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(NewBuffer, <span class=\"number\">0</span>, size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 计算头与节表的大小之和,将文件头与节表复制到newbuffer中 */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size_part1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize_part1 = (<span class=\"type\">int</span>)pish-&gt;VirtualAddress;</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(NewBuffer, ImageBuffer, size_part1);\t\t<span class=\"comment\">//将文件头与节表复制到Newbuffer中</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> numofsections = (<span class=\"type\">int</span>)(pph-&gt;NumberOfSection);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; numofsections; i++)\t\t\t<span class=\"comment\">//循环将每个节复制到Newbuffer中</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* des = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)NewBuffer + pish-&gt;PointerToRawData);</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* src = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)ImageBuffer + pish-&gt;VirtualAddress);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> size = (<span class=\"type\">int</span>)(pish-&gt;SizeOfRawData);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(des, src, size);</span><br><span class=\"line\">\t\tpish++;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"comment\">//存盘</span></span><br><span class=\"line\">\tFILE* pfp = fopen(<span class=\"string\">&quot;C:\\\\Documents and Settings\\\\easy\\\\桌面\\\\test.exe&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\tfwrite(NewBuffer, size, <span class=\"number\">1</span>, pfp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> NewBuffer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经测试，还原后的文件可以正常运行。</p>\n<h1 id=\"RVA与FOA转化的实现\"><a href=\"#RVA与FOA转化的实现\" class=\"headerlink\" title=\"RVA与FOA转化的实现\"></a>RVA与FOA转化的实现</h1><p>不论是在以后分析PE文件，还是做其他相关的事情，RVA(内存中的偏移)和FOA(文件中的偏移)之间的相互转换都是很重要的。转换大体思路就是先判断该地址是位于PE头还是节中，若是在PE头中，则地址不变，若是在节中，则要找出该地址位于哪个节，然后计算差值即可。</p>\n<p><strong>RVA转换为FOA</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span>* <span class=\"title\">RVA_TO_FOA</span><span class=\"params\">(<span class=\"type\">char</span>* RVA)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* FileBuffer = <span class=\"built_in\">Read_exe</span>();</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = <span class=\"built_in\">file_to_image</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)FileBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">    \t<span class=\"comment\">//如果该地址在头中，则不变</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((<span class=\"type\">int</span>)RVA &lt;= poph-&gt;SizeOfHeaders)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> RVA;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    \t<span class=\"comment\">//如果该地址在节中</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; pph-&gt;NumberOfSection; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            \t<span class=\"comment\">//找出RVA位于哪个节</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((<span class=\"type\">int</span>)RVA &gt;= (pish-&gt;VirtualAddress) &amp;&amp; (<span class=\"type\">int</span>)RVA &lt; (pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">                <span class=\"comment\">//加上差值即可</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">return</span> (RVA - pish-&gt;VirtualAddress) + pish-&gt;PointerToRawData;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tpish++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FOA转换为RVA代码基本一致，只是反过来而已。需要注意的是在ImageBuffer中，判断位于哪个节的依据是VirtualAddress+Misc，而在FileBuffer中判断的依据是PointerToRawData+SizeOfRawData。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"结构体字节对齐","url":"/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/","content":"<p>本节来分析C语言中结构体的字节对齐</p>\n<span id=\"more\"></span>\n\n<p><strong>1、先来测试几个结构体的大小</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test1</span>\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t</span><br><span class=\"line\">    <span class=\"type\">char</span>  a;\t</span><br><span class=\"line\">    <span class=\"type\">int</span> b;\t</span><br><span class=\"line\">&#125;;\t</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test2</span>\t\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t\t</span><br><span class=\"line\">    <span class=\"type\">int</span> a;\t\t</span><br><span class=\"line\">    __int64 b;\t</span><br><span class=\"line\">    <span class=\"type\">char</span> c;\t\t</span><br><span class=\"line\">&#125;;\t\t</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test3</span>\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t</span><br><span class=\"line\">    <span class=\"type\">int</span> a ;\t</span><br><span class=\"line\">    __int64 b ;\t</span><br><span class=\"line\">    <span class=\"type\">char</span> c ;\t</span><br><span class=\"line\">    <span class=\"type\">char</span> d ;\t</span><br><span class=\"line\">&#125;;\t</span><br></pre></td></tr></table></figure>\n\n<p>运行得到</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sizeof</span>(Test1) = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(Test2) = <span class=\"number\">24</span>;</span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(Test3) = <span class=\"number\">24</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、探究结构体的内存分布</strong></p>\n<p>#pragma pack的基本用法为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> pack(n)\t</span></span><br><span class=\"line\"><span class=\"comment\">//结构体。。。\t</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> pack()</span></span><br><span class=\"line\"><span class=\"comment\">//对齐参数：n为字节对齐数，其取值为1、2、4、8，默认是8。</span></span><br></pre></td></tr></table></figure>\n\n<p>如果这个n值比结构体成员的sizeof值小，那么该成员的偏移量应该以此值为准。</p>\n<p>也就是说，结构体成员的偏移量应该取二者的最小值。</p>\n<p>以前面的Test2结构体为例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test2</span>\t\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t\t</span><br><span class=\"line\">    <span class=\"type\">int</span> a;\t\t</span><br><span class=\"line\">    __int64 b;\t</span><br><span class=\"line\">    <span class=\"type\">char</span> c;\t\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>不同的对齐方式对应的内存分布图如下：</p>\n<p><img src=\"/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/1.PNG\"><img src=\"/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/2.PNG\"><img src=\"/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/3.PNG\"></p>\n<p>由于默认是最后的8字节对齐，因此sizeof(Test2) &#x3D; 24。</p>\n<p><em>在这里给一个建议，按照数据类型由小到大的顺序进行书写。</em></p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]},{"title":"赵月凡我爱你","url":"/2022/04/14/%E8%B5%B5%E6%9C%88%E5%87%A1%E6%88%91%E7%88%B1%E4%BD%A0/","content":"<span id=\"more\"></span>\n\n<p>赵月凡么么哒</p>\n","categories":["生活"],"tags":["生活"]},{"title":"逆向分析：if语句","url":"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/","content":"<p>最近学习完了滴水海哥的逆向初级课程，复习一下，做一下记录。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"全局变量与局部变量\"><a href=\"#全局变量与局部变量\" class=\"headerlink\" title=\"全局变量与局部变量\"></a>全局变量与局部变量</h1><h2 id=\"全局变量的特点\"><a href=\"#全局变量的特点\" class=\"headerlink\" title=\"全局变量的特点\"></a>全局变量的特点</h2><p>1、全局变量在程序编译完成后地址就已经确定下来了，只要程序启动，全局变量就已经存在了。启动后里面是否有值，取决于声明时是否给定了初始值，如果没有，默认是0。</p>\n<p>2、全局变量的值可以被所有函数所修改，里面存储的是最后一次修改的值。</p>\n<p>3、全局变量所占内存会一直存在，直到整个进程结束。</p>\n<p>4、全局变量的反汇编识别：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MOV 寄存器,byte/word/dword ptr ds:[0x12345678]</span><br></pre></td></tr></table></figure>\n\n<p>通过寄存器的宽度，或者byte&#x2F;word&#x2F;dword 来判断全局变量的宽度。如下图：</p>\n<p><img src=\"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416155522649.png\"></p>\n<h2 id=\"局部变量的特点\"><a href=\"#局部变量的特点\" class=\"headerlink\" title=\"局部变量的特点\"></a>局部变量的特点</h2><p>1、局部变量在程序编译完成后并没有分配固定的地址。</p>\n<p>2、在所属的方法没有被调用时，局部变量并不会分配内存地址，只有当所属的程序被调用了，才会在堆栈中分配内存。</p>\n<p>3、当局部变量所属的方法执行完毕后，局部变量所占用的内存将变成垃圾数据，局部变量消失。</p>\n<p>4、局部变量只能在方法内部使用，函数A无法使用函数B的局部变量。</p>\n<p>5、局部变量的反汇编识别：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ebp-4]</span><br><span class=\"line\">[ebp-8]</span><br><span class=\"line\">[ebp-C]</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"函数参数分析\"><a href=\"#函数参数分析\" class=\"headerlink\" title=\"函数参数分析\"></a>函数参数分析</h1><p>如何判断函数有几个参数，以及分别是什么（一般情况）：</p>\n<p>步骤一：观察调用处的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">push 3</span><br><span class=\"line\">push 2</span><br><span class=\"line\">push 1</span><br><span class=\"line\">call 0040100f</span><br></pre></td></tr></table></figure>\n\n<p>步骤二：找到平衡堆栈的代码继续论证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">call 0040100f</span><br><span class=\"line\">add esp, 0Ch\t\t//外平栈</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ret 4/8/0xC/0x10\t//内平栈</span><br></pre></td></tr></table></figure>\n\n<p>两者综合起来分析即可。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> g_r;\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//外平栈，从右至左的顺序压参数入栈\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">void</span> __cdecl <span class=\"title function_\">Function1</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z)</span>\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\tg_r = x+y+z;\t\t\t</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\"><span class=\"comment\">//内平栈，从右至左的顺序压参数入栈</span></span><br><span class=\"line\"><span class=\"type\">void</span> __stdcall <span class=\"title function_\">Function2</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z)</span>\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\tg_r = x+y+z;\t\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//内平栈，头两个DWORD（4字节）类型或者占更少字节的参数被放入寄存器，其他剩下的参数按从右到左的顺序压入栈</span></span><br><span class=\"line\"><span class=\"comment\">//寄存器一般是ECX和EDX</span></span><br><span class=\"line\"><span class=\"type\">void</span> __fastcall <span class=\"title function_\">Function3</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z)</span>\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\tg_r = x+y+z;\t\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416162401815.png\"></p>\n<p>但是上面的分析是一般情况，可能出现问题：</p>\n<p>1、参数传递未必都是通过堆栈，还可能通过使用寄存器（比如fastcall调用约定）。</p>\n<p>2、函数调用处的代码无法查看，只能看到函数内部的。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00401050   push        ebp\t\t\t\t</span><br><span class=\"line\">00401051   mov         ebp,esp\t\t\t\t</span><br><span class=\"line\">00401053   sub         esp,48h\t\t\t\t</span><br><span class=\"line\">00401056   push        ebx\t\t\t\t</span><br><span class=\"line\">00401057   push        esi\t\t\t\t</span><br><span class=\"line\">00401058   push        edi\t\t\t\t</span><br><span class=\"line\">00401059   push        ecx\t\t\t\t</span><br><span class=\"line\">0040105A   lea         edi,[ebp-48h]\t\t\t\t</span><br><span class=\"line\">0040105D   mov         ecx,12h\t\t\t\t</span><br><span class=\"line\">00401062   mov         eax,0CCCCCCCCh\t\t\t\t</span><br><span class=\"line\">00401067   rep stos    dword ptr [edi]\t\t\t\t</span><br><span class=\"line\">00401069   pop         ecx\t\t\t\t</span><br><span class=\"line\">0040106A   mov         dword ptr [ebp-8],edx\t//注意\t\t\t</span><br><span class=\"line\">0040106D   mov         dword ptr [ebp-4],ecx\t//注意\t\t\t\t</span><br><span class=\"line\">00401070   mov         eax,dword ptr [ebp-4]\t\t\t\t</span><br><span class=\"line\">00401073   add         eax,dword ptr [ebp-8]\t\t\t\t</span><br><span class=\"line\">00401076   add         eax,dword ptr [ebp+8]\t\t\t\t</span><br><span class=\"line\">00401079   mov         [g_x (00427958)],eax\t\t\t\t</span><br><span class=\"line\">0040107E   pop         edi\t\t\t\t</span><br><span class=\"line\">0040107F   pop         esi\t\t\t\t</span><br><span class=\"line\">00401080   pop         ebx\t\t\t\t</span><br><span class=\"line\">00401081   mov         esp,ebp\t\t\t\t</span><br><span class=\"line\">00401083   pop         ebp\t\t\t\t</span><br><span class=\"line\">00401084   ret         4\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析步骤：</strong></p>\n<p>1、不考虑ebp和esp。</p>\n<p>2、只找<strong>给别人赋值的寄存器</strong>，eax&#x2F;ecx&#x2F;edx&#x2F;ebx&#x2F;esi&#x2F;edi。</p>\n<p>3、找到以后追查其来源，如果，该寄存器中的值不是在函数内存赋值的，那一定是传进来的参数。</p>\n<p>公式一：寄存器 + ret  4 &#x3D; 参数个数</p>\n<p>公式二：寄存器 + [ebp+8] +[ebp+0x] &#x3D; 参数个数</p>\n<h1 id=\"if语句逆向分析\"><a href=\"#if语句逆向分析\" class=\"headerlink\" title=\"if语句逆向分析\"></a>if语句逆向分析</h1><p>函数内部代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00401030   push        ebp\t\t\t\t\t</span><br><span class=\"line\">00401031   mov         ebp,esp\t\t\t\t\t</span><br><span class=\"line\">00401033   sub         esp,40h\t\t\t\t\t</span><br><span class=\"line\">00401036   push        ebx\t\t\t\t\t</span><br><span class=\"line\">00401037   push        esi\t\t\t\t\t</span><br><span class=\"line\">00401038   push        edi\t\t\t\t\t</span><br><span class=\"line\">00401039   lea         edi,[ebp-40h]\t\t\t\t\t</span><br><span class=\"line\">0040103C   mov         ecx,10h\t\t\t\t\t</span><br><span class=\"line\">00401041   mov         eax,0CCCCCCCCh\t</span><br><span class=\"line\">--------------------------------------------------------------------</span><br><span class=\"line\">00401046   rep stos    dword ptr [edi]\t\t\t\t\t</span><br><span class=\"line\">00401048   mov         eax,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">0040104B   cmp         eax,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">0040104E   jle         00401059\t\t\t\t\t</span><br><span class=\"line\">00401050   mov         ecx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">00401053   mov         dword ptr [004225c4],ecx\t</span><br><span class=\"line\">--------------------------------------------------------------------</span><br><span class=\"line\">00401059   pop         edi\t\t\t\t\t</span><br><span class=\"line\">0040105A   pop         esi\t\t\t\t\t</span><br><span class=\"line\">0040105B   pop         ebx\t\t\t\t\t</span><br><span class=\"line\">0040105C   mov         esp,ebp\t\t\t\t\t</span><br><span class=\"line\">0040105E   pop         ebp\t\t\t\t\t</span><br><span class=\"line\">0040105F   ret\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数内部功能分析：</strong></p>\n<p>1、分析参数：[ebp+8]：X\t\t[ebp+0Ch]：Y</p>\n<p>2、分析局部变量：无</p>\n<p>3、分析全局变量：mov   dword ptr [004225c4],ecx</p>\n<p>4、功能分析：将参数X存到EAX中，然后比较EAX与参数Y的大小，如果X&lt;&#x3D;Y 那么跳转到00401059的位置，否则，将X的值存储到全局变量中</p>\n<p>5、返回值分析：无</p>\n<h1 id=\"if…else语句逆向分析\"><a href=\"#if…else语句逆向分析\" class=\"headerlink\" title=\"if…else语句逆向分析\"></a>if…else语句逆向分析</h1><p><strong>if…else语句反汇编判断：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">IF_BEGIN:</span><br><span class=\"line\">\t\t先执行各类影响标志位的指令</span><br><span class=\"line\">\t\tjxx ELSE_BEGIN</span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">IF_END:</span><br><span class=\"line\">\t\tjmp END</span><br><span class=\"line\">\t\tELSE_BEGIN：</span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">\t\tELSE_END：</span><br><span class=\"line\">END：</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点分析：</strong></p>\n<p>1、如果不跳转，那么会执行到jmp处，jmp直接跳转到END处</p>\n<p>2、如果跳转，则会直接跳过jmp END处的代码，直接执行后面的代码</p>\n<p><strong>总结：</strong>第一个jxx跳转的地址前面有一个jmp ,可以判断是if…else…语句</p>\n<p><strong>案例分析：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010B0   push        ebp\t\t\t\t\t</span><br><span class=\"line\">004010B1   mov         ebp,esp\t\t\t\t\t</span><br><span class=\"line\">004010B3   sub         esp,44h\t\t\t\t\t</span><br><span class=\"line\">004010B6   push        ebx\t\t\t\t\t</span><br><span class=\"line\">004010B7   push        esi\t\t\t\t\t</span><br><span class=\"line\">004010B8   push        edi\t\t\t\t\t</span><br><span class=\"line\">004010B9   lea         edi,[ebp-44h]\t\t\t\t\t</span><br><span class=\"line\">004010BC   mov         ecx,11h\t\t\t\t\t</span><br><span class=\"line\">004010C1   mov         eax,0CCCCCCCCh\t\t\t\t\t</span><br><span class=\"line\">004010C6   rep stos    dword ptr [edi]\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010C8   mov         eax,[004225c4]\t\t\t\t\t</span><br><span class=\"line\">004010CD   mov         dword ptr [ebp-4],eax\t\t\t\t\t</span><br><span class=\"line\">004010D0   mov         ecx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010D3   cmp         ecx,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010D6   jle         004010e6\t\t\t\t\t</span><br><span class=\"line\">004010D8   mov         edx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010DB   add         edx,dword ptr [ebp-4]\t\t\t\t\t</span><br><span class=\"line\">004010DE   mov         dword ptr [004225c4],edx\t\t\t\t\t</span><br><span class=\"line\">004010E4   jmp         004010f1\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010E6   mov         eax,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010E9   add         eax,dword ptr [ebp-4]\t\t\t\t\t</span><br><span class=\"line\">004010EC   mov         [004225c4],eax\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010F1   pop         edi\t\t\t\t\t</span><br><span class=\"line\">004010F2   pop         esi\t\t\t\t\t</span><br><span class=\"line\">004010F3   pop         ebx\t\t\t\t\t</span><br><span class=\"line\">004010F4   mov         esp,ebp\t\t\t\t\t</span><br><span class=\"line\">004010F6   pop         ebp\t\t\t\t\t</span><br><span class=\"line\">004010F7   ret\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数内部功能分析：</strong></p>\n<p>1、分析参数：[ebp+8]：X\t\t[ebp+0Ch]：Y</p>\n<p>2、分析局部变量：[ebp-4] &#x3D; eax &#x3D; [004225c4]</p>\n<p>3、分析全局变量： [004225c4]：G</p>\n<p>4、功能分析：比较X与Y的大小</p>\n<p>如果X&lt;&#x3D;Y  那么执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010E6   mov         eax,dword ptr [ebp+0Ch]\t\t//Y\t\t\t\t</span><br><span class=\"line\">004010E9   add         eax,dword ptr [ebp-4]\t\t//Y = Y + G\t\t\t</span><br><span class=\"line\">004010EC   mov         [004225c4],eax\t\t\t//G = Y</span><br></pre></td></tr></table></figure>\n\n<p>如果X&gt;Y 那么执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010D8   mov         edx,dword ptr [ebp+8]\t\t//X\t\t\t\t</span><br><span class=\"line\">004010DB   add         edx,dword ptr [ebp-4]\t\t//X = X + G\t\t\t\t\t</span><br><span class=\"line\">004010DE   mov         dword ptr [004225c4],edx\t\t//G = X\t\t\t\t</span><br><span class=\"line\">004010E4   jmp         004010f1</span><br></pre></td></tr></table></figure>\n\n<p>5、返回值分析：无</p>\n<h1 id=\"if…else-if…else语句逆向分析\"><a href=\"#if…else-if…else语句逆向分析\" class=\"headerlink\" title=\"if…else if…else语句逆向分析\"></a>if…else if…else语句逆向分析</h1><p><strong>IF…ELSE IF…ELSE IF..多分支语句的反汇编判断：</strong></p>\n<p><img src=\"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416212606777.png\"></p>\n<p><strong>分析：</strong></p>\n<p>1、当每个条件跳转指令要跳转的地址前面都有jmp 指令</p>\n<p>2、这些jmp指令跳转的地址都是一样的</p>\n<p>3、如果某个分支没有条件判断，则为else部分</p>\n<p><strong>案例分析：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010B0   push        ebp\t\t\t\t\t</span><br><span class=\"line\">004010B1   mov         ebp,esp\t\t\t\t\t</span><br><span class=\"line\">004010B3   sub         esp,4Ch\t\t\t\t\t</span><br><span class=\"line\">004010B6   push        ebx\t\t\t\t\t</span><br><span class=\"line\">004010B7   push        esi\t\t\t\t\t</span><br><span class=\"line\">004010B8   push        edi\t\t\t\t\t</span><br><span class=\"line\">004010B9   lea         edi,[ebp-4Ch]\t\t\t\t\t</span><br><span class=\"line\">004010BC   mov         ecx,13h\t\t\t\t\t</span><br><span class=\"line\">004010C1   mov         eax,0CCCCCCCCh\t\t\t\t\t</span><br><span class=\"line\">004010C6   rep stos    dword ptr [edi]\t</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">004010C8   mov         dword ptr [ebp-4],0\t\t\t\t\t</span><br><span class=\"line\">004010CF   mov         dword ptr [ebp-8],1\t\t\t\t\t</span><br><span class=\"line\">004010D6   mov         dword ptr [ebp-0Ch],2\t\t\t\t\t</span><br><span class=\"line\">004010DD   mov         eax,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010E0   cmp         eax,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010E3   jle         004010f0\t\t\t\t\t</span><br><span class=\"line\">004010E5   mov         ecx,dword ptr [ebp-8]\t\t\t\t\t</span><br><span class=\"line\">004010E8   add         ecx,1\t\t\t\t\t</span><br><span class=\"line\">004010EB   mov         dword ptr [ebp-4],ecx\t\t\t\t\t</span><br><span class=\"line\">004010EE   jmp         00401123\t\t\t\t\t\t//jmp 00401123</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010F0   mov         edx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010F3   cmp         edx,dword ptr [ebp+10h]\t\t\t\t\t</span><br><span class=\"line\">004010F6   jle         00401103\t\t\t\t\t</span><br><span class=\"line\">004010F8   mov         eax,dword ptr [ebp-0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010FB   add         eax,1\t\t\t\t\t</span><br><span class=\"line\">004010FE   mov         dword ptr [ebp-4],eax\t\t\t\t\t</span><br><span class=\"line\">00401101   jmp         00401123\t\t\t\t\t\t//jmp 00401123</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">00401103   mov         ecx,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">00401106   cmp         ecx,dword ptr [ebp+10h]\t\t\t\t\t</span><br><span class=\"line\">00401109   jle         00401116\t\t\t\t\t</span><br><span class=\"line\">0040110B   mov         edx,dword ptr [ebp-8]\t\t\t\t\t</span><br><span class=\"line\">0040110E   add         edx,dword ptr [ebp-0Ch]\t\t\t\t\t</span><br><span class=\"line\">00401111   mov         dword ptr [ebp-4],edx\t\t\t\t\t</span><br><span class=\"line\">00401114   jmp         00401123\t\t\t\t\t\t//jmp 00401123</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">00401116   mov         eax,dword ptr [ebp-0Ch]\t\t\t\t\t</span><br><span class=\"line\">00401119   mov         ecx,dword ptr [ebp-8]\t\t\t\t\t</span><br><span class=\"line\">0040111C   lea         edx,[ecx+eax+1]\t\t\t\t\t</span><br><span class=\"line\">00401120   mov         dword ptr [ebp-4],edx\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">00401123   mov         eax,dword ptr [ebp-4]\t\t\t\t\t</span><br><span class=\"line\">00401126   pop         edi\t\t\t\t\t</span><br><span class=\"line\">00401127   pop         esi\t\t\t\t\t</span><br><span class=\"line\">00401128   pop         ebx\t\t\t\t\t</span><br><span class=\"line\">00401129   mov         esp,ebp\t\t\t\t\t</span><br><span class=\"line\">0040112B   pop         ebp\t\t\t\t\t</span><br><span class=\"line\">0040112C   ret\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数内部功能分析：</strong></p>\n<p>1、分析参数：[ebp+8]：X\t\t[ebp+0Ch]：Y\t\t[ebp-0Ch]：Z</p>\n<p>2、分析局部变量：[ebp-4] &#x3D; A &#x3D; 0\t\t[ebp-8] &#x3D; B &#x3D; 1\t\t[ebp-0C] &#x3D; C &#x3D; 2</p>\n<p>3、分析全局变量：无</p>\n<p>4、功能分析：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(x &gt; y)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = B + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; z)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = C + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; z)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = B + C\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">else</span>\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = B + C + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">return</span> A;\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><em>注意函数返回值的写法，以eax传出。</em></p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]},{"title":"逆向分析：switch语句","url":"/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/","content":"<p>本章探究switch语句的反汇编表现形式及特点。</p>\n<span id=\"more\"></span>\n\n<p><strong>1、先来看看当case分支较少时的反汇编代码</strong></p>\n<p>测试代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Func</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>(x)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        switch(x)</span><br><span class=\"line\">7:        &#123;</span><br><span class=\"line\">0040D708 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class=\"line\">0040D70B 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class=\"line\">0040D70E 83 7D FC 01          cmp         dword ptr [ebp-4],1</span><br><span class=\"line\">0040D712 74 0E                je          Func+32h (0040d722)</span><br><span class=\"line\">0040D714 83 7D FC 02          cmp         dword ptr [ebp-4],2</span><br><span class=\"line\">0040D718 74 17                je          Func+41h (0040d731)</span><br><span class=\"line\">0040D71A 83 7D FC 03          cmp         dword ptr [ebp-4],3</span><br><span class=\"line\">0040D71E 74 20                je          Func+50h (0040d740)</span><br><span class=\"line\">0040D720 EB 2D                jmp         Func+5Fh (0040d74f)</span><br><span class=\"line\">8:        case 1:</span><br><span class=\"line\">9:            printf(&quot;1\\n&quot;);</span><br><span class=\"line\">0040D722 68 74 2F 42 00       push        offset string &quot;1\\n&quot; (00422f74)</span><br><span class=\"line\">0040D727 E8 34 39 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D72C 83 C4 04             add         esp,4</span><br><span class=\"line\">10:           break;</span><br><span class=\"line\">0040D72F EB 2B                jmp         Func+6Ch (0040d75c)</span><br><span class=\"line\">11:       case 2:</span><br><span class=\"line\">12:           printf(&quot;2\\n&quot;);</span><br><span class=\"line\">0040D731 68 70 2F 42 00       push        offset string &quot;2\\n&quot; (00422f70)</span><br><span class=\"line\">0040D736 E8 25 39 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D73B 83 C4 04             add         esp,4</span><br><span class=\"line\">13:           break;</span><br><span class=\"line\">0040D73E EB 1C                jmp         Func+6Ch (0040d75c)</span><br><span class=\"line\">14:       case 3:</span><br><span class=\"line\">15:           printf(&quot;3\\n&quot;);</span><br><span class=\"line\">0040D740 68 0C 21 42 00       push        offset string &quot;3\\n&quot; (0042210c)</span><br><span class=\"line\">0040D745 E8 16 39 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D74A 83 C4 04             add         esp,4</span><br><span class=\"line\">16:           break;</span><br><span class=\"line\">0040D74D EB 0D                jmp         Func+6Ch (0040d75c)</span><br><span class=\"line\">17:       default:</span><br><span class=\"line\">18:           printf(&quot;0\\n&quot;);</span><br><span class=\"line\">0040D74F 68 6C 2F 42 00       push        offset string &quot;%d %d %d&quot; (00422f6c)</span><br><span class=\"line\">0040D754 E8 07 39 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D759 83 C4 04             add         esp,4</span><br><span class=\"line\">19:           break;</span><br><span class=\"line\">20:       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>就目前的情况来看，似乎与if…else语句没什么性能上的差异，只不过是把比较的代码全部放到了前面，但也是挨个依次比较判断。<strong>这种情况下与if…else语句没有本质上的区别</strong>。</p>\n<p><strong>2、逐渐增加case的情况分支，观察反汇编代码的情况(何时生成大表)</strong></p>\n<p>在VC++6.0编译器中，当分支有4个时，反汇编发生了变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        switch(x)</span><br><span class=\"line\">7:        &#123;</span><br><span class=\"line\">0040D7C8 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class=\"line\">0040D7CB 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class=\"line\">0040D7CE 8B 4D FC             mov         ecx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7D1 83 E9 01             sub         ecx,1\t\t;注意这里</span><br><span class=\"line\">0040D7D4 89 4D FC             mov         dword ptr [ebp-4],ecx</span><br><span class=\"line\">0040D7D7 83 7D FC 03          cmp         dword ptr [ebp-4],3</span><br><span class=\"line\">0040D7DB 77 46                ja          $L42202+0Fh (0040d823)</span><br><span class=\"line\">0040D7DD 8B 55 FC             mov         edx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7E0 FF 24 95 41 D8 40 00 jmp         dword ptr [edx*4+40D841h]\t;还有这里</span><br><span class=\"line\">8:        case 1:</span><br><span class=\"line\">9:            printf(&quot;1\\n&quot;);</span><br><span class=\"line\">0040D7E7 68 A8 2F 42 00       push        offset string &quot;1\\n&quot; (00422fa8)</span><br><span class=\"line\">0040D7EC E8 6F 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D7F1 83 C4 04             add         esp,4</span><br><span class=\"line\">10:           break;</span><br><span class=\"line\">0040D7F4 EB 3A                jmp         $L42202+1Ch (0040d830)</span><br><span class=\"line\">11:       case 2:</span><br><span class=\"line\">12:           printf(&quot;2\\n&quot;);</span><br><span class=\"line\">0040D7F6 68 74 2F 42 00       push        offset string &quot;2\\n&quot; (00422f74)</span><br><span class=\"line\">0040D7FB E8 60 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D800 83 C4 04             add         esp,4</span><br><span class=\"line\">13:           break;</span><br><span class=\"line\">0040D803 EB 2B                jmp         $L42202+1Ch (0040d830)</span><br><span class=\"line\">14:       case 3:</span><br><span class=\"line\">15:           printf(&quot;3\\n&quot;);</span><br><span class=\"line\">0040D805 68 70 2F 42 00       push        offset string &quot;3\\n&quot; (00422f70)</span><br><span class=\"line\">0040D80A E8 51 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D80F 83 C4 04             add         esp,4</span><br><span class=\"line\">16:           break;</span><br><span class=\"line\">0040D812 EB 1C                jmp         $L42202+1Ch (0040d830)</span><br><span class=\"line\">17:       case 4:</span><br><span class=\"line\">18:           printf(&quot;4\\n&quot;);</span><br><span class=\"line\">0040D814 68 0C 21 42 00       push        offset string &quot;4\\n&quot; (0042210c)</span><br><span class=\"line\">0040D819 E8 42 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D81E 83 C4 04             add         esp,4</span><br><span class=\"line\">19:           break;</span><br><span class=\"line\">0040D821 EB 0D                jmp         $L42202+1Ch (0040d830)</span><br><span class=\"line\">20:       default:</span><br><span class=\"line\">21:           printf(&quot;0\\n&quot;);</span><br><span class=\"line\">0040D823 68 6C 2F 42 00       push        offset string &quot;%d %d %d\\n&quot; (00422f6c)</span><br><span class=\"line\">0040D828 E8 33 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D82D 83 C4 04             add         esp,4</span><br><span class=\"line\">22:           break;</span><br><span class=\"line\">23:       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里有个问题，以正向的角度来看，根据传进来的值与4比较，如果比4大，那么跳转到default分支。然而在反汇编中，是将传进来的值减去1后(实际上是减去分支中的最小值)与3去比较。</p>\n<p>接着往后分析，如果参数满足其中某一个分支，则不跳转到default，将参数传到了edx中，然后跳转到了一个地址中去。这个地址的样子是这样的：[edx*4+40D841h]。现在来看一下40D841h是什么。</p>\n<p><img src=\"/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/1.PNG\"></p>\n<p>可以看到，在40D841h中存的是一张表，这个表里面有四个地址，分别对应的是switch中的四种情况。edx*4作为一个偏移来找到正确的表项。因此前面ecx-1的目的正是为了让分支的值从0开始，便于计算表的偏移。如果case的值是从2开始的，那么就应该是ecx-2。</p>\n<p>上面生成的这张表就叫<strong>大表</strong>，表项是各个分支语句的地址。</p>\n<p>这里已经可以看出来switch与if…else语句性能的差异了。if…else语句需要判断很多次是否满足条件，而switch在case很多的情况下，只需要一条跳转语句jmp dword ptr [edx*4+40D841h]就够了，性能完爆if…else语句。</p>\n<p>接着做测试，当case的值连接但是顺序混乱时，仍然不影响大表的生成。读者可以自行做测试。</p>\n<p><em>注：不一定每个编译器都是4条case才生成大表，不同编译器有不同的算法。</em></p>\n<p><strong>3、将连续的10项中抹去1项或者2项，观察反汇编有无变化(观察大表空缺位置的处理)</strong></p>\n<p>测试代码及其反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        switch(x)</span><br><span class=\"line\">7:        &#123;</span><br><span class=\"line\">0040D7C8 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class=\"line\">0040D7CB 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class=\"line\">0040D7CE 8B 4D FC             mov         ecx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7D1 83 E9 01             sub         ecx,1</span><br><span class=\"line\">0040D7D4 89 4D FC             mov         dword ptr [ebp-4],ecx</span><br><span class=\"line\">0040D7D7 83 7D FC 09          cmp         dword ptr [ebp-4],9</span><br><span class=\"line\">0040D7DB 0F 87 82 00 00 00    ja          $L42210+0Fh (0040d863)</span><br><span class=\"line\">0040D7E1 8B 55 FC             mov         edx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7E4 FF 24 95 81 D8 40 00 jmp         dword ptr [edx*4+40D881h]</span><br><span class=\"line\">8:        case 1:</span><br><span class=\"line\">9:            printf(&quot;1\\n&quot;);</span><br><span class=\"line\">0040D7EB 68 B8 2F 42 00       push        offset string &quot;1\\n&quot; (00422fb8)</span><br><span class=\"line\">0040D7F0 E8 6B 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D7F5 83 C4 04             add         esp,4</span><br><span class=\"line\">10:           break;</span><br><span class=\"line\">0040D7F8 EB 76                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">11:       case 2:</span><br><span class=\"line\">12:           printf(&quot;2\\n&quot;);</span><br><span class=\"line\">0040D7FA 68 B4 2F 42 00       push        offset string &quot;2\\n&quot; (00422fb4)</span><br><span class=\"line\">0040D7FF E8 5C 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D804 83 C4 04             add         esp,4</span><br><span class=\"line\">13:           break;</span><br><span class=\"line\">0040D807 EB 67                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">14:       case 4:</span><br><span class=\"line\">15:           printf(&quot;4\\n&quot;);</span><br><span class=\"line\">0040D809 68 B0 2F 42 00       push        offset string &quot;5\\n&quot; (00422fb0)</span><br><span class=\"line\">0040D80E E8 4D 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D813 83 C4 04             add         esp,4</span><br><span class=\"line\">16:           break;</span><br><span class=\"line\">0040D816 EB 58                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">17:       case 6:</span><br><span class=\"line\">18:           printf(&quot;6\\n&quot;);</span><br><span class=\"line\">0040D818 68 AC 2F 42 00       push        offset string &quot;6\\n&quot; (00422fac)</span><br><span class=\"line\">0040D81D E8 3E 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D822 83 C4 04             add         esp,4</span><br><span class=\"line\">19:           break;</span><br><span class=\"line\">0040D825 EB 49                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">20:       case 7:</span><br><span class=\"line\">21:           printf(&quot;7\\n&quot;);</span><br><span class=\"line\">0040D827 68 A8 2F 42 00       push        offset string &quot;7\\n&quot; (00422fa8)</span><br><span class=\"line\">0040D82C E8 2F 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D831 83 C4 04             add         esp,4</span><br><span class=\"line\">22:           break;</span><br><span class=\"line\">0040D834 EB 3A                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">23:       case 8:</span><br><span class=\"line\">24:           printf(&quot;8\\n&quot;);</span><br><span class=\"line\">0040D836 68 74 2F 42 00       push        offset string &quot;8\\n&quot; (00422f74)</span><br><span class=\"line\">0040D83B E8 20 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D840 83 C4 04             add         esp,4</span><br><span class=\"line\">25:           break;</span><br><span class=\"line\">0040D843 EB 2B                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">26:       case 9:</span><br><span class=\"line\">27:           printf(&quot;9\\n&quot;);</span><br><span class=\"line\">0040D845 68 70 2F 42 00       push        offset string &quot;9\\n&quot; (00422f70)</span><br><span class=\"line\">0040D84A E8 11 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D84F 83 C4 04             add         esp,4</span><br><span class=\"line\">28:           break;</span><br><span class=\"line\">0040D852 EB 1C                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">29:       case 10:</span><br><span class=\"line\">30:           printf(&quot;10\\n&quot;);</span><br><span class=\"line\">0040D854 68 0C 21 42 00       push        offset string &quot;10\\n&quot; (0042210c)</span><br><span class=\"line\">0040D859 E8 02 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D85E 83 C4 04             add         esp,4</span><br><span class=\"line\">31:           break;</span><br><span class=\"line\">0040D861 EB 0D                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">32:       default:</span><br><span class=\"line\">33:           printf(&quot;0\\n&quot;);</span><br><span class=\"line\">0040D863 68 6C 2F 42 00       push        offset string &quot;%d %d %d\\n&quot; (00422f6c)</span><br><span class=\"line\">0040D868 E8 F3 37 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D86D 83 C4 04             add         esp,4</span><br><span class=\"line\">34:           break;</span><br><span class=\"line\">35:       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在x从1-10的分支中删除掉了3和5两个分支，反汇编代码基本的结构没有改变，仍然生成了大表，查看一下大表</p>\n<p><img src=\"/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/3.PNG\"></p>\n<p>可以发现，表里面仍然有十个地址，观察一下删除掉的3和5分支，可以看到表里面对应的内容为40D863，这个地址为default的地址。因此可以而出结论，在连续数据有个别缺失时，编译器会进行填补，填补的内容为default的地址。</p>\n<p><strong>4、在10项中连续抹去，不要抹去最大值和最小值(观察何时生成小表)</strong></p>\n<p>在上面删除一两项时，编译器会用default的地址填充空缺的位置。但是这样会有一个问题，就是会造成内存的浪费，因为default的地址本来就写在那里，不需要去填充它。因此，编译器不会允许无限制的填充下去。</p>\n<p>经测试，在VC++6.0中，连续空缺6个分支，switch的反汇编会发生变化。</p>\n<p>测试代码及其反汇编如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">switch(x)</span><br><span class=\"line\">7:        &#123;</span><br><span class=\"line\">0040D7C8 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class=\"line\">0040D7CB 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class=\"line\">0040D7CE 8B 4D FC             mov         ecx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7D1 83 E9 01             sub         ecx,1</span><br><span class=\"line\">0040D7D4 89 4D FC             mov         dword ptr [ebp-4],ecx</span><br><span class=\"line\">0040D7D7 83 7D FC 09          cmp         dword ptr [ebp-4],9</span><br><span class=\"line\">0040D7DB 77 4E                ja          $L42202+0Fh (0040d82b)</span><br><span class=\"line\">0040D7DD 8B 45 FC             mov         eax,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7E0 33 D2                xor         edx,edx</span><br><span class=\"line\">0040D7E2 8A 90 5D D8 40 00    mov         dl,byte ptr  (0040d85d)[eax]\t;注意这里</span><br><span class=\"line\">0040D7E8 FF 24 95 49 D8 40 00 jmp         dword ptr [edx*4+40D849h]</span><br><span class=\"line\">8:        case 1:</span><br><span class=\"line\">9:            printf(&quot;1\\n&quot;);</span><br><span class=\"line\">0040D7EF 68 A8 2F 42 00       push        offset string &quot;7\\n&quot; (00422fa8)</span><br><span class=\"line\">0040D7F4 E8 67 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D7F9 83 C4 04             add         esp,4</span><br><span class=\"line\">10:           break;</span><br><span class=\"line\">0040D7FC EB 3A                jmp         $L42202+1Ch (0040d838)</span><br><span class=\"line\">11:       case 8:</span><br><span class=\"line\">12:           printf(&quot;8\\n&quot;);</span><br><span class=\"line\">0040D7FE 68 74 2F 42 00       push        offset string &quot;8\\n&quot; (00422f74)</span><br><span class=\"line\">0040D803 E8 58 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D808 83 C4 04             add         esp,4</span><br><span class=\"line\">13:           break;</span><br><span class=\"line\">0040D80B EB 2B                jmp         $L42202+1Ch (0040d838)</span><br><span class=\"line\">14:       case 9:</span><br><span class=\"line\">15:           printf(&quot;9\\n&quot;);</span><br><span class=\"line\">0040D80D 68 70 2F 42 00       push        offset string &quot;9\\n&quot; (00422f70)</span><br><span class=\"line\">0040D812 E8 49 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D817 83 C4 04             add         esp,4</span><br><span class=\"line\">16:           break;</span><br><span class=\"line\">0040D81A EB 1C                jmp         $L42202+1Ch (0040d838)</span><br><span class=\"line\">17:       case 10:</span><br><span class=\"line\">18:           printf(&quot;10\\n&quot;);</span><br><span class=\"line\">0040D81C 68 0C 21 42 00       push        offset string &quot;10\\n&quot; (0042210c)</span><br><span class=\"line\">0040D821 E8 3A 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D826 83 C4 04             add         esp,4</span><br><span class=\"line\">19:           break;</span><br><span class=\"line\">0040D829 EB 0D                jmp         $L42202+1Ch (0040d838)</span><br><span class=\"line\">20:       default:</span><br><span class=\"line\">21:           printf(&quot;0\\n&quot;);</span><br><span class=\"line\">0040D82B 68 6C 2F 42 00       push        offset string &quot;%d %d %d\\n&quot; (00422f6c)</span><br><span class=\"line\">0040D830 E8 2B 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D835 83 C4 04             add         esp,4</span><br><span class=\"line\">22:           break;</span><br><span class=\"line\">23:       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>大体的结构没有改变，但是这里面多出来了两行，将ecx-1后传给了eax，eax作为索引在小表(0040d85d)处获取内容。然后再将获取到的内容传给edx，edx再作为索引去大表(40D849)得到相应的地址。先来看看大表的内容：<img src=\"/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/4.PNG\"></p>\n<p>可以发现，这时大表里面只有5个地址，分别是四个分支和一个default。小表紧跟在大表的后面。小表里面的0、1、2、3分别索引到大表的内容是四个分支，4索引到的是大表中default的地址。</p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]},{"title":"逆向分析：参数、返回值和数组","url":"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%8F%82%E6%95%B0%E3%80%81%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8C%E6%95%B0%E7%BB%84/","content":"<p>这次来分析参数、返回值和数组在反汇编中的表现形式。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"返回值的传递\"><a href=\"#返回值的传递\" class=\"headerlink\" title=\"返回值的传递\"></a>返回值的传递</h1><p>以char、short和int类型的返回值为例，先来看看char类型的返回值，测试代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> g_r = <span class=\"number\">1</span>;\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//返回值类型为char的函数\t\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"title function_\">Fun</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> g_r + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a = Fun();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, a);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Fun函数在反汇编中的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00401030 55                   push        ebp</span><br><span class=\"line\">00401031 8B EC                mov         ebp,esp</span><br><span class=\"line\">00401033 83 EC 40             sub         esp,40h</span><br><span class=\"line\">00401036 53                   push        ebx</span><br><span class=\"line\">00401037 56                   push        esi</span><br><span class=\"line\">00401038 57                   push        edi</span><br><span class=\"line\">00401039 8D 7D C0             lea         edi,[ebp-40h]</span><br><span class=\"line\">0040103C B9 10 00 00 00       mov         ecx,10h</span><br><span class=\"line\">00401041 B8 CC CC CC CC       mov         eax,0CCCCCCCCh</span><br><span class=\"line\">00401046 F3 AB                rep stos    dword ptr [edi]</span><br><span class=\"line\">00401048 0F BE 05 14 6B 42 00 movsx       eax,byte ptr [g_r (00426b14)]\t;注意这里的byte</span><br><span class=\"line\">0040104F 83 C0 01             add         eax,1</span><br><span class=\"line\">00401052 5F                   pop         edi</span><br><span class=\"line\">00401053 5E                   pop         esi</span><br><span class=\"line\">00401054 5B                   pop         ebx</span><br><span class=\"line\">00401055 8B E5                mov         esp,ebp</span><br><span class=\"line\">00401057 5D                   pop         ebp</span><br><span class=\"line\">00401058 C3                   ret</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这里用全局变量的符号位填入eax中，然后再向eax中低8位（byte）填入这个全局变量的值。</p>\n<p>当返回值的类型变为short和int时，byte也相应的变为了word和dword。</p>\n<p>由此可见，返回值的传递类型在汇编与源代码中是一致的。</p>\n<h1 id=\"参数的传递\"><a href=\"#参数的传递\" class=\"headerlink\" title=\"参数的传递\"></a>参数的传递</h1><p>以char、short和int类型的参数为例，先来看看char类型的参数，测试代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Function</span><span class=\"params\">(<span class=\"type\">char</span> x,<span class=\"type\">char</span> y,<span class=\"type\">char</span> z)</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">\tFunction(a, b, c);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在函数调用处查看反汇编代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">11:       char a = 1;\t\t\t\t\t\t\t</span><br><span class=\"line\">00401068 C6 45 FC 01          mov         byte ptr [ebp-4],1\t\t\t\t\t\t\t</span><br><span class=\"line\">12:       char b = 2;\t\t\t\t\t\t\t</span><br><span class=\"line\">0040106C C6 45 F8 02          mov         byte ptr [ebp-8],2\t\t\t\t\t\t\t</span><br><span class=\"line\">13:       char c = 3;\t\t\t\t\t\t\t</span><br><span class=\"line\">00401070 C6 45 F4 03          mov         byte ptr [ebp-0Ch],3\t\t\t\t\t\t\t</span><br><span class=\"line\">14:       Function(a, b, c);\t\t\t\t\t\t\t</span><br><span class=\"line\">00401074 8A 45 F4             mov         al,byte ptr [ebp-0Ch]\t\t\t\t\t\t\t</span><br><span class=\"line\">00401077 50                   push        eax\t\t\t\t\t\t\t</span><br><span class=\"line\">00401078 8A 4D F8             mov         cl,byte ptr [ebp-8]\t\t\t\t\t\t\t</span><br><span class=\"line\">0040107B 51                   push        ecx\t\t\t\t\t\t\t</span><br><span class=\"line\">0040107C 8A 55 FC             mov         dl,byte ptr [ebp-4]\t\t\t\t\t\t\t</span><br><span class=\"line\">0040107F 52                   push        edx\t\t\t\t\t\t\t</span><br><span class=\"line\">00401080 E8 80 FF FF FF       call        @ILT+0(Function) (00401005)\t\t\t\t\t</span><br><span class=\"line\">00401085 83 C4 0C             add         esp,0Ch\t\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，当参数以char类型传递时，虽然是将byte（1个字节）传给了eax，但是在调用函数前仍然push的是eax（4个字节）。当char类型换成short和int时，不同的只是eax寄存器的利用空间。因此，当参数是char和short类型时，造成了空间的浪费。</p>\n<p><em><u>因此建议，传入整数类型的参数时，应该使用int类型（4个字节）。</u></em></p>\n<p>补充一个思考题，代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数定义：\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Plus</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\tx = x + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//入口函数\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = <span class=\"number\">1</span>;\t\t\t\t\t</span><br><span class=\"line\">\tPlus(x);\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,x);\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>这个程序打印出来的结果是1，而不是2。原因在反汇编代码中很容易看出来，在调用函数前，将x重新push了一次到Plus函数的栈中。因此Plus操作的是Plus函数栈中的那个x，而打印原来的x值没有变。</p>\n<h1 id=\"局部变量的内存分配\"><a href=\"#局部变量的内存分配\" class=\"headerlink\" title=\"局部变量的内存分配\"></a>局部变量的内存分配</h1><p>测试程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Function</span><span class=\"params\">()</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> a = <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> b = <span class=\"number\">2</span>;\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">short</span> c = <span class=\"number\">3</span>;\t\t</span><br><span class=\"line\">\t<span class=\"type\">short</span> d = <span class=\"number\">4</span>;\t\t\t\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>测试程序的反汇编代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        char a = 1;</span><br><span class=\"line\">0040F028 C6 45 FC 01          mov         byte ptr [ebp-4],1</span><br><span class=\"line\">7:        char b = 2;</span><br><span class=\"line\">0040F02C C6 45 F8 02          mov         byte ptr [ebp-8],2</span><br><span class=\"line\">8:</span><br><span class=\"line\">9:        short c = 3;</span><br><span class=\"line\">0040F030 66 C7 45 F4 03 00    mov         word ptr [ebp-0Ch],offset Function+24h (0040f034)</span><br><span class=\"line\">10:       short d = 4;</span><br><span class=\"line\">0040F036 66 C7 45 F0 04 00    mov         word ptr [ebp-10h],offset Function+2Ah (0040f03a)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，不管局部变量是char还是short类型，尽管他们在赋值的时候是按照对应的长度byte(1字节)和word(2字节)来赋值，但是这些变量之间的间隔仍然是4字节。因此可以总结如下：</p>\n<p>1、小于32位的局部变量，空间在分配时，按32位分配。</p>\n<p>2、使用时按实际的宽度使用。</p>\n<p>3、不要定义char&#x2F;short类型的局部变量。</p>\n<p>4、<u>参数与局部变量没有本质区别，都是局部变量，都在栈中分配。</u></p>\n<p>5、完全可以把参数当初局部变量使用。</p>\n<h1 id=\"数组的反汇编\"><a href=\"#数组的反汇编\" class=\"headerlink\" title=\"数组的反汇编\"></a>数组的反汇编</h1><p>先来看局部变量是如何入栈的，测试程序及反汇编如下\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        int v_0 = 1;</span><br><span class=\"line\">00401038 C7 45 FC 01 00 00 00 mov         dword ptr [ebp-4],1</span><br><span class=\"line\">7:        int v_1 = 2;</span><br><span class=\"line\">0040103F C7 45 F8 02 00 00 00 mov         dword ptr [ebp-8],2</span><br><span class=\"line\">8:        int v_2 = 3;</span><br><span class=\"line\">00401046 C7 45 F4 03 00 00 00 mov         dword ptr [ebp-0Ch],3</span><br><span class=\"line\">9:        int v_3 = 4;</span><br><span class=\"line\">0040104D C7 45 F0 04 00 00 00 mov         dword ptr [ebp-10h],4</span><br><span class=\"line\">10:       int v_4 = 5;</span><br><span class=\"line\">00401054 C7 45 EC 05 00 00 00 mov         dword ptr [ebp-14h],5</span><br><span class=\"line\">11:       int v_5 = 6;</span><br><span class=\"line\">0040105B C7 45 E8 06 00 00 00 mov         dword ptr [ebp-18h],6</span><br><span class=\"line\">12:       int v_6 = 7;</span><br><span class=\"line\">00401062 C7 45 E4 07 00 00 00 mov         dword ptr [ebp-1Ch],7</span><br><span class=\"line\">13:       int v_7 = 8;</span><br><span class=\"line\">00401069 C7 45 E0 08 00 00 00 mov         dword ptr [ebp-20h],8</span><br><span class=\"line\">14:       int v_8 = 9;</span><br><span class=\"line\">00401070 C7 45 DC 09 00 00 00 mov         dword ptr [ebp-24h],9</span><br><span class=\"line\">15:       int v_9 = 10;</span><br><span class=\"line\">00401077 C7 45 D8 0A 00 00 00 mov         dword ptr [ebp-28h],0Ah</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这些局部变量是按定义顺序依次入栈的。</p>\n<p>然后来看看将它们写成数组时，反汇编是什么样子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        int arr[10] = &#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class=\"line\">00401038 C7 45 D8 01 00 00 00 mov         dword ptr [ebp-28h],1</span><br><span class=\"line\">0040103F C7 45 DC 02 00 00 00 mov         dword ptr [ebp-24h],2</span><br><span class=\"line\">00401046 C7 45 E0 03 00 00 00 mov         dword ptr [ebp-20h],3</span><br><span class=\"line\">0040104D C7 45 E4 04 00 00 00 mov         dword ptr [ebp-1Ch],4</span><br><span class=\"line\">00401054 C7 45 E8 05 00 00 00 mov         dword ptr [ebp-18h],5</span><br><span class=\"line\">0040105B C7 45 EC 06 00 00 00 mov         dword ptr [ebp-14h],6</span><br><span class=\"line\">00401062 C7 45 F0 07 00 00 00 mov         dword ptr [ebp-10h],7</span><br><span class=\"line\">00401069 C7 45 F4 08 00 00 00 mov         dword ptr [ebp-0Ch],8</span><br><span class=\"line\">00401070 C7 45 F8 09 00 00 00 mov         dword ptr [ebp-8],9</span><br><span class=\"line\">00401077 C7 45 FC 0A 00 00 00 mov         dword ptr [ebp-4],0Ah</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，当写成数组时，数据存入栈的顺序是从后向前，即先存最后的10，依次向前。与前面正好相反。</p>\n<h1 id=\"补充几个小练习\"><a href=\"#补充几个小练习\" class=\"headerlink\" title=\"补充几个小练习\"></a>补充几个小练习</h1><p>1、返回值超过32位时，存在哪里？用long long(__int64)类型做实验</p>\n<p>测试代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">__int64 <span class=\"title function_\">Function</span><span class=\"params\">()</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\t__int64 x = <span class=\"number\">0x1234567890</span>;\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x;\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>查看反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        __int64 x = 0x1234567890;</span><br><span class=\"line\">00401038 C7 45 F8 90 78 56 34 mov         dword ptr [ebp-8],34567890h</span><br><span class=\"line\">0040103F C7 45 FC 12 00 00 00 mov         dword ptr [ebp-4],12h</span><br><span class=\"line\">7:        return x;</span><br><span class=\"line\">00401046 8B 45 F8             mov         eax,dword ptr [ebp-8]</span><br><span class=\"line\">00401049 8B 55 FC             mov         edx,dword ptr [ebp-4]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，返回值位64位时，使用了两个寄存器来存储。</p>\n<p>2、探究char arr[3] &#x3D; {1,2,3};与 char arr[4] &#x3D; {1,2,3,4};哪个更节省空间？</p>\n<p>先来看char arr[3] &#x3D; {1,2,3};的反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        char arr[3] = &#123;1, 2, 3&#125;;</span><br><span class=\"line\">00401038 C6 45 FC 01          mov         byte ptr [ebp-4],1</span><br><span class=\"line\">0040103C C6 45 FD 02          mov         byte ptr [ebp-3],2</span><br><span class=\"line\">00401040 C6 45 FE 03          mov         byte ptr [ebp-2],3</span><br></pre></td></tr></table></figure>\n\n<p>然后再来看char arr[4] &#x3D; {1,2,3,4};的反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        char arr[4] = &#123;1, 2, 3, 4&#125;;</span><br><span class=\"line\">00401038 C6 45 FC 01          mov         byte ptr [ebp-4],1</span><br><span class=\"line\">0040103C C6 45 FD 02          mov         byte ptr [ebp-3],2</span><br><span class=\"line\">00401040 C6 45 FE 03          mov         byte ptr [ebp-2],3</span><br><span class=\"line\">00401044 C6 45 FF 04          mov         byte ptr [ebp-1],4</span><br></pre></td></tr></table></figure>\n\n<p>分别看到它们的反汇编代码，占用的总的内存是一样大小的，反而第一种有一个字节没有被使用，浪费掉了。</p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]},{"title":"逆向分析：循环语句","url":"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/","content":"<p>上一次学习了全局变量和局部变量的特点，并分析了if语句在反汇编中的样子，今天来分析<strong>循环语句</strong>。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"do…while循环语句\"><a href=\"#do…while循环语句\" class=\"headerlink\" title=\"do…while循环语句\"></a>do…while循环语句</h1><p>do…while语句语法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//执行代码\t</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(表达式)\t\t</span><br></pre></td></tr></table></figure>\n\n<p>do…while语句反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DO_BEGIN地址:</span><br><span class=\"line\">\t\t影响标志位的指令</span><br><span class=\"line\">\t\tjxx DO_BEGIN</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<p><img src=\"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/1.PNG\"></p>\n<p>总结：</p>\n<p>1、根据条件跳转指令所跳转到的地址，可以得到循环语句块的起始地址。</p>\n<p>2、根据条件跳转指令所在的地址，可以得到循环语句块的结束地址。</p>\n<p>3、条件跳转的逻辑与源码相同。</p>\n<h1 id=\"while循环语句\"><a href=\"#while循环语句\" class=\"headerlink\" title=\"while循环语句\"></a>while循环语句</h1><p>while语句语法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(表达式)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//执行代码\t</span></span><br><span class=\"line\">&#125;\t\t</span><br></pre></td></tr></table></figure>\n\n<p>while语句反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">WHILE_BEGIN:\t\t\t\t\t\t</span><br><span class=\"line\">\t影响标志位的指令\t\t\t\t\t</span><br><span class=\"line\">\tjxx WHILE_END ;条件成立跳转到循环语句块结尾处\t\t\t\t\t</span><br><span class=\"line\">\t......\t\t\t\t\t</span><br><span class=\"line\">\tjmp WHILE_BEGIN ;跳转到条件比较处\t\t\t\t\t</span><br><span class=\"line\">WHILE_END:\t\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<p><img src=\"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/2.PNG\"></p>\n<p>总结：</p>\n<p>1、根据条件跳转指令所跳转到的地址，可以得到循环语句块的结束地址。</p>\n<p>2、根据jmp指令所跳转到的地址，可以得到循环语句块的起始地址。</p>\n<p>3、在还原while 比较时，条件跳转的逻辑与源码相反</p>\n<h1 id=\"for循环语句\"><a href=\"#for循环语句\" class=\"headerlink\" title=\"for循环语句\"></a>for循环语句</h1><p>for语句语法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(表达式<span class=\"number\">1</span>；表达式<span class=\"number\">2</span>；表达式<span class=\"number\">3</span>)\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//执行的代码\t\t</span></span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>for循环的执行次序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">表达式1\t\t\t</span><br><span class=\"line\">表达式2\t\t\t</span><br><span class=\"line\">执行的代码(大括号里面的内容)\t\t\t</span><br><span class=\"line\">表达式3\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">表达式2 //如果表达式2成立\t\t\t</span><br><span class=\"line\">执行的代码(大括号里面的内容)\t\t\t</span><br><span class=\"line\">表达式3\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">表达式2 //如果表达式2成立\t\t\t</span><br><span class=\"line\">执行的代码(大括号里面的内容)\t\t\t</span><br><span class=\"line\">表达式3\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">表达式2 //如果不成立\t\t\t</span><br><span class=\"line\">跳出循环\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<p><img src=\"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/3.PNG\"></p>\n<p>总结：</p>\n<p>1、第一个jmp 指令之前为赋初值部分。</p>\n<p>2、第一个jmp 指令所跳转的地址为循环条件判定部分起始。</p>\n<p>3、判断条件后面的跳转指令条件成立时跳转的循环体外面。</p>\n<p>4、条件判断跳转指令所指向的地址上面有一个jmp，jmp地址为表达式3的起始位置。</p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]}]