[{"title":"赵月凡我爱你","url":"/2022/04/14/%E8%B5%B5%E6%9C%88%E5%87%A1%E6%88%91%E7%88%B1%E4%BD%A0/","content":"<span id=\"more\"></span>\n\n<p>赵月凡么么哒</p>\n","categories":["生活"],"tags":["生活"]},{"title":"逆向分析：if语句","url":"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/","content":"<p>最近学习完了滴水海哥的逆向初级课程，复习一下，做一下记录。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"全局变量与局部变量\"><a href=\"#全局变量与局部变量\" class=\"headerlink\" title=\"全局变量与局部变量\"></a>全局变量与局部变量</h1><h2 id=\"全局变量的特点\"><a href=\"#全局变量的特点\" class=\"headerlink\" title=\"全局变量的特点\"></a>全局变量的特点</h2><p>1、全局变量在程序编译完成后地址就已经确定下来了，只要程序启动，全局变量就已经存在了。启动后里面是否有值，取决于声明时是否给定了初始值，如果没有，默认是0。</p>\n<p>2、全局变量的值可以被所有函数所修改，里面存储的是最后一次修改的值。</p>\n<p>3、全局变量所占内存会一直存在，直到整个进程结束。</p>\n<p>4、全局变量的反汇编识别：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MOV 寄存器,byte/word/dword ptr ds:[0x12345678]</span><br></pre></td></tr></table></figure>\n\n<p>通过寄存器的宽度，或者byte&#x2F;word&#x2F;dword 来判断全局变量的宽度。如下图：</p>\n<p><img src=\"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416155522649.png\"></p>\n<h2 id=\"局部变量的特点\"><a href=\"#局部变量的特点\" class=\"headerlink\" title=\"局部变量的特点\"></a>局部变量的特点</h2><p>1、局部变量在程序编译完成后并没有分配固定的地址。</p>\n<p>2、在所属的方法没有被调用时，局部变量并不会分配内存地址，只有当所属的程序被调用了，才会在堆栈中分配内存。</p>\n<p>3、当局部变量所属的方法执行完毕后，局部变量所占用的内存将变成垃圾数据，局部变量消失。</p>\n<p>4、局部变量只能在方法内部使用，函数A无法使用函数B的局部变量。</p>\n<p>5、局部变量的反汇编识别：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ebp-4]</span><br><span class=\"line\">[ebp-8]</span><br><span class=\"line\">[ebp-C]</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"函数参数分析\"><a href=\"#函数参数分析\" class=\"headerlink\" title=\"函数参数分析\"></a>函数参数分析</h1><p>如何判断函数有几个参数，以及分别是什么（一般情况）：</p>\n<p>步骤一：观察调用处的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">push 3</span><br><span class=\"line\">push 2</span><br><span class=\"line\">push 1</span><br><span class=\"line\">call 0040100f</span><br></pre></td></tr></table></figure>\n\n<p>步骤二：找到平衡堆栈的代码继续论证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">call 0040100f</span><br><span class=\"line\">add esp, 0Ch\t\t//外平栈</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ret 4/8/0xC/0x10\t//内平栈</span><br></pre></td></tr></table></figure>\n\n<p>两者综合起来分析即可。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> g_r;\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//外平栈，从右至左的顺序压参数入栈\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">void</span> __cdecl <span class=\"title function_\">Function1</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z)</span>\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\tg_r = x+y+z;\t\t\t</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\"><span class=\"comment\">//内平栈，从右至左的顺序压参数入栈</span></span><br><span class=\"line\"><span class=\"type\">void</span> __stdcall <span class=\"title function_\">Function2</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z)</span>\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\tg_r = x+y+z;\t\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//内平栈，头两个DWORD（4字节）类型或者占更少字节的参数被放入寄存器，其他剩下的参数按从右到左的顺序压入栈</span></span><br><span class=\"line\"><span class=\"comment\">//寄存器一般是ECX和EDX</span></span><br><span class=\"line\"><span class=\"type\">void</span> __fastcall <span class=\"title function_\">Function3</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z)</span>\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\tg_r = x+y+z;\t\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416162401815.png\"></p>\n<p>但是上面的分析是一般情况，可能出现问题：</p>\n<p>1、参数传递未必都是通过堆栈，还可能通过使用寄存器（比如fastcall调用约定）。</p>\n<p>2、函数调用处的代码无法查看，只能看到函数内部的。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00401050   push        ebp\t\t\t\t</span><br><span class=\"line\">00401051   mov         ebp,esp\t\t\t\t</span><br><span class=\"line\">00401053   sub         esp,48h\t\t\t\t</span><br><span class=\"line\">00401056   push        ebx\t\t\t\t</span><br><span class=\"line\">00401057   push        esi\t\t\t\t</span><br><span class=\"line\">00401058   push        edi\t\t\t\t</span><br><span class=\"line\">00401059   push        ecx\t\t\t\t</span><br><span class=\"line\">0040105A   lea         edi,[ebp-48h]\t\t\t\t</span><br><span class=\"line\">0040105D   mov         ecx,12h\t\t\t\t</span><br><span class=\"line\">00401062   mov         eax,0CCCCCCCCh\t\t\t\t</span><br><span class=\"line\">00401067   rep stos    dword ptr [edi]\t\t\t\t</span><br><span class=\"line\">00401069   pop         ecx\t\t\t\t</span><br><span class=\"line\">0040106A   mov         dword ptr [ebp-8],edx\t//注意\t\t\t</span><br><span class=\"line\">0040106D   mov         dword ptr [ebp-4],ecx\t//注意\t\t\t\t</span><br><span class=\"line\">00401070   mov         eax,dword ptr [ebp-4]\t\t\t\t</span><br><span class=\"line\">00401073   add         eax,dword ptr [ebp-8]\t\t\t\t</span><br><span class=\"line\">00401076   add         eax,dword ptr [ebp+8]\t\t\t\t</span><br><span class=\"line\">00401079   mov         [g_x (00427958)],eax\t\t\t\t</span><br><span class=\"line\">0040107E   pop         edi\t\t\t\t</span><br><span class=\"line\">0040107F   pop         esi\t\t\t\t</span><br><span class=\"line\">00401080   pop         ebx\t\t\t\t</span><br><span class=\"line\">00401081   mov         esp,ebp\t\t\t\t</span><br><span class=\"line\">00401083   pop         ebp\t\t\t\t</span><br><span class=\"line\">00401084   ret         4\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析步骤：</strong></p>\n<p>1、不考虑ebp和esp。</p>\n<p>2、只找<strong>给别人赋值的寄存器</strong>，eax&#x2F;ecx&#x2F;edx&#x2F;ebx&#x2F;esi&#x2F;edi。</p>\n<p>3、找到以后追查其来源，如果，该寄存器中的值不是在函数内存赋值的，那一定是传进来的参数。</p>\n<p>公式一：寄存器 + ret  4 &#x3D; 参数个数</p>\n<p>公式二：寄存器 + [ebp+8] +[ebp+0x] &#x3D; 参数个数</p>\n<h1 id=\"if语句逆向分析\"><a href=\"#if语句逆向分析\" class=\"headerlink\" title=\"if语句逆向分析\"></a>if语句逆向分析</h1><p>函数内部代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00401030   push        ebp\t\t\t\t\t</span><br><span class=\"line\">00401031   mov         ebp,esp\t\t\t\t\t</span><br><span class=\"line\">00401033   sub         esp,40h\t\t\t\t\t</span><br><span class=\"line\">00401036   push        ebx\t\t\t\t\t</span><br><span class=\"line\">00401037   push        esi\t\t\t\t\t</span><br><span class=\"line\">00401038   push        edi\t\t\t\t\t</span><br><span class=\"line\">00401039   lea         edi,[ebp-40h]\t\t\t\t\t</span><br><span class=\"line\">0040103C   mov         ecx,10h\t\t\t\t\t</span><br><span class=\"line\">00401041   mov         eax,0CCCCCCCCh\t</span><br><span class=\"line\">--------------------------------------------------------------------</span><br><span class=\"line\">00401046   rep stos    dword ptr [edi]\t\t\t\t\t</span><br><span class=\"line\">00401048   mov         eax,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">0040104B   cmp         eax,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">0040104E   jle         00401059\t\t\t\t\t</span><br><span class=\"line\">00401050   mov         ecx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">00401053   mov         dword ptr [004225c4],ecx\t</span><br><span class=\"line\">--------------------------------------------------------------------</span><br><span class=\"line\">00401059   pop         edi\t\t\t\t\t</span><br><span class=\"line\">0040105A   pop         esi\t\t\t\t\t</span><br><span class=\"line\">0040105B   pop         ebx\t\t\t\t\t</span><br><span class=\"line\">0040105C   mov         esp,ebp\t\t\t\t\t</span><br><span class=\"line\">0040105E   pop         ebp\t\t\t\t\t</span><br><span class=\"line\">0040105F   ret\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数内部功能分析：</strong></p>\n<p>1、分析参数：[ebp+8]：X\t\t[ebp+0Ch]：Y</p>\n<p>2、分析局部变量：无</p>\n<p>3、分析全局变量：mov   dword ptr [004225c4],ecx</p>\n<p>4、功能分析：将参数X存到EAX中，然后比较EAX与参数Y的大小，如果X&lt;&#x3D;Y 那么跳转到00401059的位置，否则，将X的值存储到全局变量中</p>\n<p>5、返回值分析：无</p>\n<h1 id=\"if…else语句逆向分析\"><a href=\"#if…else语句逆向分析\" class=\"headerlink\" title=\"if…else语句逆向分析\"></a>if…else语句逆向分析</h1><p><strong>if…else语句反汇编判断：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">IF_BEGIN:</span><br><span class=\"line\">\t\t先执行各类影响标志位的指令</span><br><span class=\"line\">\t\tjxx ELSE_BEGIN</span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">IF_END:</span><br><span class=\"line\">\t\tjmp END</span><br><span class=\"line\">\t\tELSE_BEGIN：</span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">\t\tELSE_END：</span><br><span class=\"line\">END：</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点分析：</strong></p>\n<p>1、如果不跳转，那么会执行到jmp处，jmp直接跳转到END处</p>\n<p>2、如果跳转，则会直接跳过jmp END处的代码，直接执行后面的代码</p>\n<p><strong>总结：</strong>第一个jxx跳转的地址前面有一个jmp ,可以判断是if…else…语句</p>\n<p><strong>案例分析：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010B0   push        ebp\t\t\t\t\t</span><br><span class=\"line\">004010B1   mov         ebp,esp\t\t\t\t\t</span><br><span class=\"line\">004010B3   sub         esp,44h\t\t\t\t\t</span><br><span class=\"line\">004010B6   push        ebx\t\t\t\t\t</span><br><span class=\"line\">004010B7   push        esi\t\t\t\t\t</span><br><span class=\"line\">004010B8   push        edi\t\t\t\t\t</span><br><span class=\"line\">004010B9   lea         edi,[ebp-44h]\t\t\t\t\t</span><br><span class=\"line\">004010BC   mov         ecx,11h\t\t\t\t\t</span><br><span class=\"line\">004010C1   mov         eax,0CCCCCCCCh\t\t\t\t\t</span><br><span class=\"line\">004010C6   rep stos    dword ptr [edi]\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010C8   mov         eax,[004225c4]\t\t\t\t\t</span><br><span class=\"line\">004010CD   mov         dword ptr [ebp-4],eax\t\t\t\t\t</span><br><span class=\"line\">004010D0   mov         ecx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010D3   cmp         ecx,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010D6   jle         004010e6\t\t\t\t\t</span><br><span class=\"line\">004010D8   mov         edx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010DB   add         edx,dword ptr [ebp-4]\t\t\t\t\t</span><br><span class=\"line\">004010DE   mov         dword ptr [004225c4],edx\t\t\t\t\t</span><br><span class=\"line\">004010E4   jmp         004010f1\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010E6   mov         eax,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010E9   add         eax,dword ptr [ebp-4]\t\t\t\t\t</span><br><span class=\"line\">004010EC   mov         [004225c4],eax\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010F1   pop         edi\t\t\t\t\t</span><br><span class=\"line\">004010F2   pop         esi\t\t\t\t\t</span><br><span class=\"line\">004010F3   pop         ebx\t\t\t\t\t</span><br><span class=\"line\">004010F4   mov         esp,ebp\t\t\t\t\t</span><br><span class=\"line\">004010F6   pop         ebp\t\t\t\t\t</span><br><span class=\"line\">004010F7   ret\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数内部功能分析：</strong></p>\n<p>1、分析参数：[ebp+8]：X\t\t[ebp+0Ch]：Y</p>\n<p>2、分析局部变量：[ebp-4] &#x3D; eax &#x3D; [004225c4]</p>\n<p>3、分析全局变量： [004225c4]：G</p>\n<p>4、功能分析：比较X与Y的大小</p>\n<p>如果X&lt;&#x3D;Y  那么执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010E6   mov         eax,dword ptr [ebp+0Ch]\t\t//Y\t\t\t\t</span><br><span class=\"line\">004010E9   add         eax,dword ptr [ebp-4]\t\t//Y = Y + G\t\t\t</span><br><span class=\"line\">004010EC   mov         [004225c4],eax\t\t\t//G = Y</span><br></pre></td></tr></table></figure>\n\n<p>如果X&gt;Y 那么执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010D8   mov         edx,dword ptr [ebp+8]\t\t//X\t\t\t\t</span><br><span class=\"line\">004010DB   add         edx,dword ptr [ebp-4]\t\t//X = X + G\t\t\t\t\t</span><br><span class=\"line\">004010DE   mov         dword ptr [004225c4],edx\t\t//G = X\t\t\t\t</span><br><span class=\"line\">004010E4   jmp         004010f1</span><br></pre></td></tr></table></figure>\n\n<p>5、返回值分析：无</p>\n<h1 id=\"if…else-if…else语句逆向分析\"><a href=\"#if…else-if…else语句逆向分析\" class=\"headerlink\" title=\"if…else if…else语句逆向分析\"></a>if…else if…else语句逆向分析</h1><p><strong>IF…ELSE IF…ELSE IF..多分支语句的反汇编判断：</strong></p>\n<p><img src=\"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416212606777.png\"></p>\n<p><strong>分析：</strong></p>\n<p>1、当每个条件跳转指令要跳转的地址前面都有jmp 指令</p>\n<p>2、这些jmp指令跳转的地址都是一样的</p>\n<p>3、如果某个分支没有条件判断，则为else部分</p>\n<p><strong>案例分析：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010B0   push        ebp\t\t\t\t\t</span><br><span class=\"line\">004010B1   mov         ebp,esp\t\t\t\t\t</span><br><span class=\"line\">004010B3   sub         esp,4Ch\t\t\t\t\t</span><br><span class=\"line\">004010B6   push        ebx\t\t\t\t\t</span><br><span class=\"line\">004010B7   push        esi\t\t\t\t\t</span><br><span class=\"line\">004010B8   push        edi\t\t\t\t\t</span><br><span class=\"line\">004010B9   lea         edi,[ebp-4Ch]\t\t\t\t\t</span><br><span class=\"line\">004010BC   mov         ecx,13h\t\t\t\t\t</span><br><span class=\"line\">004010C1   mov         eax,0CCCCCCCCh\t\t\t\t\t</span><br><span class=\"line\">004010C6   rep stos    dword ptr [edi]\t</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">004010C8   mov         dword ptr [ebp-4],0\t\t\t\t\t</span><br><span class=\"line\">004010CF   mov         dword ptr [ebp-8],1\t\t\t\t\t</span><br><span class=\"line\">004010D6   mov         dword ptr [ebp-0Ch],2\t\t\t\t\t</span><br><span class=\"line\">004010DD   mov         eax,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010E0   cmp         eax,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010E3   jle         004010f0\t\t\t\t\t</span><br><span class=\"line\">004010E5   mov         ecx,dword ptr [ebp-8]\t\t\t\t\t</span><br><span class=\"line\">004010E8   add         ecx,1\t\t\t\t\t</span><br><span class=\"line\">004010EB   mov         dword ptr [ebp-4],ecx\t\t\t\t\t</span><br><span class=\"line\">004010EE   jmp         00401123\t\t\t\t\t\t//jmp 00401123</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010F0   mov         edx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010F3   cmp         edx,dword ptr [ebp+10h]\t\t\t\t\t</span><br><span class=\"line\">004010F6   jle         00401103\t\t\t\t\t</span><br><span class=\"line\">004010F8   mov         eax,dword ptr [ebp-0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010FB   add         eax,1\t\t\t\t\t</span><br><span class=\"line\">004010FE   mov         dword ptr [ebp-4],eax\t\t\t\t\t</span><br><span class=\"line\">00401101   jmp         00401123\t\t\t\t\t\t//jmp 00401123</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">00401103   mov         ecx,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">00401106   cmp         ecx,dword ptr [ebp+10h]\t\t\t\t\t</span><br><span class=\"line\">00401109   jle         00401116\t\t\t\t\t</span><br><span class=\"line\">0040110B   mov         edx,dword ptr [ebp-8]\t\t\t\t\t</span><br><span class=\"line\">0040110E   add         edx,dword ptr [ebp-0Ch]\t\t\t\t\t</span><br><span class=\"line\">00401111   mov         dword ptr [ebp-4],edx\t\t\t\t\t</span><br><span class=\"line\">00401114   jmp         00401123\t\t\t\t\t\t//jmp 00401123</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">00401116   mov         eax,dword ptr [ebp-0Ch]\t\t\t\t\t</span><br><span class=\"line\">00401119   mov         ecx,dword ptr [ebp-8]\t\t\t\t\t</span><br><span class=\"line\">0040111C   lea         edx,[ecx+eax+1]\t\t\t\t\t</span><br><span class=\"line\">00401120   mov         dword ptr [ebp-4],edx\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">00401123   mov         eax,dword ptr [ebp-4]\t\t\t\t\t</span><br><span class=\"line\">00401126   pop         edi\t\t\t\t\t</span><br><span class=\"line\">00401127   pop         esi\t\t\t\t\t</span><br><span class=\"line\">00401128   pop         ebx\t\t\t\t\t</span><br><span class=\"line\">00401129   mov         esp,ebp\t\t\t\t\t</span><br><span class=\"line\">0040112B   pop         ebp\t\t\t\t\t</span><br><span class=\"line\">0040112C   ret\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数内部功能分析：</strong></p>\n<p>1、分析参数：[ebp+8]：X\t\t[ebp+0Ch]：Y\t\t[ebp-0Ch]：Z</p>\n<p>2、分析局部变量：[ebp-4] &#x3D; A &#x3D; 0\t\t[ebp-8] &#x3D; B &#x3D; 1\t\t[ebp-0C] &#x3D; C &#x3D; 2</p>\n<p>3、分析全局变量：无</p>\n<p>4、功能分析：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(x &gt; y)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = B + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; z)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = C + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; z)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = B + C\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">else</span>\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = B + C + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">return</span> A;\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><em>注意函数返回值的写法，以eax传出。</em></p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]},{"title":"逆向分析：循环语句","url":"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/","content":"<p>上一次学习了全局变量和局部变量的特点，并分析了if语句在反汇编中样子，今天来分析<strong>循环语句</strong>。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"do…while循环语句\"><a href=\"#do…while循环语句\" class=\"headerlink\" title=\"do…while循环语句\"></a>do…while循环语句</h1><p>do…while语句语法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//执行代码\t</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(表达式)\t\t</span><br></pre></td></tr></table></figure>\n\n<p>do…while语句反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DO_BEGIN地址:</span><br><span class=\"line\">\t\t影响标志位的指令</span><br><span class=\"line\">\t\tjxx DO_BEGIN</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<p><img src=\"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/1.PNG\"></p>\n<p>总结：</p>\n<p>1、根据条件跳转指令所跳转到的地址，可以得到循环语句块的起始地址。</p>\n<p>2、根据条件跳转指令所在的地址，可以得到循环语句块的结束地址。</p>\n<p>3、条件跳转的逻辑与源码相同。</p>\n<h1 id=\"while循环语句\"><a href=\"#while循环语句\" class=\"headerlink\" title=\"while循环语句\"></a>while循环语句</h1><p>while语句语法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(表达式)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//执行代码\t</span></span><br><span class=\"line\">&#125;\t\t</span><br></pre></td></tr></table></figure>\n\n<p>while语句反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">WHILE_BEGIN:\t\t\t\t\t\t</span><br><span class=\"line\">\t影响标志位的指令\t\t\t\t\t</span><br><span class=\"line\">\tjxx WHILE_END ;条件成立跳转到循环语句块结尾处\t\t\t\t\t</span><br><span class=\"line\">\t......\t\t\t\t\t</span><br><span class=\"line\">\tjmp WHILE_BEGIN ;跳转到条件比较处\t\t\t\t\t</span><br><span class=\"line\">WHILE_END:\t\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<p><img src=\"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/2.PNG\"></p>\n<p>总结：</p>\n<p>1、根据条件跳转指令所跳转到的地址，可以得到循环语句块的结束地址。</p>\n<p>2、根据jmp指令所跳转到的地址，可以得到循环语句块的起始地址。</p>\n<p>3、在还原while 比较时，条件跳转的逻辑与源码相反</p>\n<h1 id=\"for循环语句\"><a href=\"#for循环语句\" class=\"headerlink\" title=\"for循环语句\"></a>for循环语句</h1><p>for语句语法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(表达式<span class=\"number\">1</span>；表达式<span class=\"number\">2</span>；表达式<span class=\"number\">3</span>)\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//执行的代码\t\t</span></span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>for循环的执行次序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">表达式1\t\t\t</span><br><span class=\"line\">表达式2\t\t\t</span><br><span class=\"line\">执行的代码(大括号里面的内容)\t\t\t</span><br><span class=\"line\">表达式3\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">表达式2 //如果表达式2成立\t\t\t</span><br><span class=\"line\">执行的代码(大括号里面的内容)\t\t\t</span><br><span class=\"line\">表达式3\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">表达式2 //如果表达式2成立\t\t\t</span><br><span class=\"line\">执行的代码(大括号里面的内容)\t\t\t</span><br><span class=\"line\">表达式3\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">表达式2 //如果不成立\t\t\t</span><br><span class=\"line\">跳出循环\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<p><img src=\"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/3.PNG\"></p>\n<p>总结：</p>\n<p>1、第一个jmp 指令之前为赋初值部分。</p>\n<p>2、第一个jmp 指令所跳转的地址为循环条件判定部分起始。</p>\n<p>3、判断条件后面的跳转指令条件成立时跳转的循环体外面。</p>\n<p>4、条件判断跳转指令所指向的地址上面有一个jmp，jmp地址为表达式3的起始位置。</p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]}]