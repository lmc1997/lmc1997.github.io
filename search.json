[{"title":"PE研究：IAT表与导入表","url":"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/","content":"<p>我们已经学习过了导出表，导出表记录的是该文件的导出函数。相对应的，导入表记录的是该文件使用的DLL以及DLL中的函数。本章节来学习导入表的工作原理。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"一个有趣的实验\"><a href=\"#一个有趣的实验\" class=\"headerlink\" title=\"一个有趣的实验\"></a>一个有趣的实验</h1><p>先来观察一个现象：</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/1.PNG\"></p>\n<p>将上面这一个小程序使用release版编译，得到一个EXE文件，并使用OD打开它，可以得到该程序<strong>运行时</strong>的内存：<img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/2.PNG\"></p>\n<p>可以看到，在调用MessageBox函数时，反汇编代码是CALL [40509C]，于是在数据窗口我们看到了40509C这个地址存储的是MessageBox函数的地址，很明显77D507EA这个地址位于DLL的领空。</p>\n<p>接下来我们用一个16进制文本编辑器，查看一下该文件在<strong>运行前</strong>的对应地址内存：</p>\n<p>由于需要看的是运行前的地址，因此需要把运行时40509C转化为FOA，先来看一下对齐大小：</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/3.PNG\"></p>\n<p>由于文件对齐与内存对齐是一致的，而且ImageBase为400000，所以转换成FOA为509C。</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/4.PNG\"></p>\n<p>在文件中509C的位置存放的不是运行时的函数的地址，而是一个RVA偏移551C，再次转换为FOA为551C</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/5.PNG\"></p>\n<p>可以看到，在运行前，40509C这个地址存放的是函数名字的RVA偏移，而在运行时，这里面的内容被替换为了真正的函数地址。</p>\n<p>那么这里就出现了一个问题，一般在我们自己写的程序中，我们调用了一个我们自己写的函数，它的反汇编语言应该是call 0x12345678，不管是在程序运行前还是运行后，都是这个表现形式。而这里我们调用了MessageBox，在运行时却是call [0x12345678]，0x12345678在程序运行前后存放的内容是不一样的。</p>\n<p>这里的关键就在于，MessageBox是DLL提供的函数，DLL在被需要时才会被载入内存。这也就是为什么调用MessageBox的时候地址不能写固定的地址，因为DLL有可能被重定位。</p>\n<h1 id=\"导入表结构\"><a href=\"#导入表结构\" class=\"headerlink\" title=\"导入表结构\"></a>导入表结构</h1><p>目录项的第二张表就是导入表，通过将RVA转换成FOA，可以在FileBuffer中定位它，导入表结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span>\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span>\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">        DWORD   Characteristics;           \t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">        DWORD   OriginalFirstThunk;\t\t<span class=\"comment\">//RVA，指向IMAGE_THUNK_DATA结构数组，INT表\t\t\t</span></span><br><span class=\"line\">    &#125;;\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   TimeDateStamp;\t\t\t\t<span class=\"comment\">//时间戳\t\t\t</span></span><br><span class=\"line\">    DWORD   ForwarderChain;              \t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Name;\t\t\t\t\t\t<span class=\"comment\">//RVA，指向dll名字，该名字已0结尾\t\t\t</span></span><br><span class=\"line\">    DWORD   FirstThunk;\t\t\t\t\t<span class=\"comment\">//RVA，指向IMAGE_THUNK_DATA结构数组，IAT表\t\t\t</span></span><br><span class=\"line\">&#125; IMAGE_IMPORT_DESCRIPTOR;\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>在PE文件加载前，IAT表与INT表内容相同，存储的都是函数的名字或者导出序号：</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/6.PNG\"></p>\n<p>在PE文件加载后，IAT表的内容被替换为对应函数的地址：</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/7.PNG\"></p>\n<p>一个该导入表结构对应着一个DLL文件，里面记录了导入该DLL中的函数，在PE文件中有很多个导入表结构连在一起，以一个导入表结构大小的0为结尾。</p>\n<p>下面依次说明各个字段</p>\n<p>1、OriginalFirstThunk</p>\n<p><img src=\"/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/8.PNG\"></p>\n<p>指向INT表，表里面的内容是一个IMAGE_THUNK_DATA32结构，该结构实际上是一个4字节的数据，当最高位为0代表这是一个RVA，指向一个结构，该结构如上图所示，该结构指向导入函数名字；当最高位为1是，除去最高位剩下的31位代表函数的序号。</p>\n<p>2、Name</p>\n<p>该字段是一个RVA，指向一个DLL的名字。</p>\n<p>3、FirstThunk</p>\n<p>指向IAT表，该表结构在文件运行前与INT表内容一致(理论上)，在运行时IAT表被系统替换为对应函数的地址。</p>\n<p>注意我这里写的是理论上，因为有可能有一些函数地址在实际运行前就已经写进了IAT表。我们称这种现象为绑定导入，记录这些函数信息的表叫做绑定导入表，我们这里不做赘述。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：代码节空白区添加代码","url":"/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/","content":"<p>代码节是PE结构中的一个节区，一般用于存放代码段。本节来做一个小实验，向代码节的空白区添加代码。实现的功能是，双击运行记事本文件时，先弹出一个对话框，关掉后才能运行记事本程序。</p>\n<span id=\"more\"></span>\n\n<p>这个实验大致的一种思路可以是，将MessageBox(0, 0, 0, 0)这段代码加入到目标程序中，修改程序的入口点，让它指向我们新加入的这段代码，然后再让程序跳回到原来的入口点执行原来的程序。但是这里有一个问题，就是我们是向已经存在的程序加入代码，不可能直接将MessageBox(0, 0, 0, 0)这个代码直接放进去，而是应该将其转化为<strong>shellcode</strong>二进制代码，再放进去。</p>\n<p>具体步骤如下：</p>\n<p><strong>1、获取MessageBox地址，构造shellcode。</strong></p>\n<p>打开OD，随便拖入一个文件，在命令行中输入bp MessageBoxA，然后打开断点视图，双击到断点处，得到MessageBox的地址。</p>\n<p><img src=\"/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/1.PNG\"></p>\n<p>我这里的地址为77D507EA，不同的机器地址不一样。</p>\n<p>还需要注意的是，在调用MessageBox时，还需要push4个参数，push的硬编码为0x6A。因此我们构造出来的shellcode为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> shellcode1[] = </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE9</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、读取文件，判断代码节(一般都是第一个节)空白区域能否放得下前面的shellcode(这里是18字节)。</strong></p>\n<p><strong>3、将shellcode加入代码节空白区域。</strong></p>\n<p><strong>4、修改E8与E9</strong></p>\n<p>本程序的流程是，通过程序入口(OEP)进入到我们的shellcode，我们的shellcode完成的任务是调用(call)MessageBox函数，然后再跳(jmp)回去。call的硬编码是E8，后面跟了一个地址(4个字节)，jmp的硬编码是E9，后面跟了一个地址(4个字节)。先来研究一下后面跟的地址的计算规则：</p>\n<p><img src=\"/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/2.PNG\"></p>\n<p>公式为：真正要跳转的地址 &#x3D; E8这条指令的下一行地址 + X，而E8指令的长度为5字节。因此，公式可以转化为：要跳转的地方 &#x3D; E8当前的地址 + 5 + X，**X &#x3D; 要跳转的地址 - (E8的地址 + 5)**。E9的公式同理。</p>\n<p><strong>5、修改OEP</strong></p>\n<p><strong>注：如果加在别的节中，还需要修改节属性。</strong></p>\n<p>现在还有一个问题，就是我们加入的shellcode，是加在FileBuffer中呢，还是加在ImageBuffer中呢？答案是ImageBuffer中，因为在shellcode中涉及到地址，这个地址是拉伸后准备运行的地址。当然，如果将shellcode加在FileBuffer中也是可以的，只不过需要多一步，将shellcode中的地址从FOA转换为RVA。</p>\n<p>现在基本没有什么问题了，直接上代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MessageBoxAddr 0x77D507EA</span></span><br><span class=\"line\"><span class=\"type\">char</span> shellcode1[] = </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE9</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> shellcode_length1 = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 编程实现在代码节添加MessageBox函数代码，弹出框 */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">add_shellcode</span><span class=\"params\">(<span class=\"type\">char</span>* ImageBuffer)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 定义各文件头 */</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 判断第一个节的空白区域是否大于18字节 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((((pish+<span class=\"number\">1</span>)-&gt;VirtualAddress) - (pish-&gt;VirtualAddress) - pish-&gt;Misc.VirtualAddress) &lt; <span class=\"number\">18</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;无法添加代码!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 将shellcode加入代码节空白区域 */</span></span><br><span class=\"line\">    <span class=\"comment\">//注意这里要加ImageBuffer</span></span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>((<span class=\"type\">char</span>*)(pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress + (<span class=\"type\">int</span>)ImageBuffer), shellcode1, shellcode_length1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 修改E8 */</span></span><br><span class=\"line\">    <span class=\"comment\">//E8后面的地址，为MessageBox()地址 - E8下一条语句的地址</span></span><br><span class=\"line\">    <span class=\"comment\">//这个下一条地址应该是对齐后加上imagebase地址，因为程序已经跑起来了</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> CallAddr = (<span class=\"type\">int</span>)(MessageBoxAddr - (pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress + <span class=\"number\">13</span> + poph-&gt;ImageBase));</span><br><span class=\"line\">\t<span class=\"type\">int</span>* addr1 = (<span class=\"type\">int</span>*)(pish-&gt;VirtualAddress + (<span class=\"type\">int</span>)ImageBuffer + pish-&gt;Misc.VirtualAddress + <span class=\"number\">9</span>);</span><br><span class=\"line\">\t*addr1 = CallAddr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 修改E9 */</span> </span><br><span class=\"line\">    <span class=\"comment\">//注意都要加上ImageBase</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> RetAddr = (<span class=\"type\">int</span>)(poph-&gt;AddressOfEntryPoint + poph-&gt;ImageBase - (pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress + <span class=\"number\">18</span> + poph-&gt;ImageBase));</span><br><span class=\"line\">\t<span class=\"type\">int</span>* addr2 = (<span class=\"type\">int</span>*)(pish-&gt;VirtualAddress + (<span class=\"type\">int</span>)ImageBuffer + pish-&gt;Misc.VirtualAddress + <span class=\"number\">14</span>);</span><br><span class=\"line\">\t*addr2 = RetAddr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 修改OEP */</span></span><br><span class=\"line\">    <span class=\"comment\">//OEP本来存的就是RVA，不需要加ImageBase</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> OEP = (<span class=\"type\">int</span>)(pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress);</span><br><span class=\"line\">\tpoph-&gt;AddressOfEntryPoint = OEP;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前面提过，这段代码执行前要先拉伸，执行完毕后再还原回去存盘即可。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：PE文件的加载","url":"/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/","content":"<p>PE文件是Windows操作系统下使用的32位可执行文件格式。关于PE文件的结构以及各字段的意义，网络上有很详细的资料，这里不再赘述(或者用到的时候再说明)。本版块主要涉及Windows下的一些小应用。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"PE文件的加载过程\"><a href=\"#PE文件的加载过程\" class=\"headerlink\" title=\"PE文件的加载过程\"></a>PE文件的加载过程</h1><p>首先要知道，PE文件有在磁盘上与在内存中的两种状态。如下图所示</p>\n<p><img src=\"/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/1.PNG\"></p>\n<p>可以看到，这两种状态大体的结构布局是一致的，但是占用的内存大小是不同的，而且两者对齐的大小<strong>有可能</strong>不同。说是有可能，是因为PE文件在磁盘上的对齐方式为FileAlignment，其值可能为0x200h或者0x1000h，而在内存中的对齐方式为SectionAlignment，其值一般为0x1000h。</p>\n<p>Windows系统将PE文件从磁盘读入内存并执行的过程中，就存在上面的这个“拉伸”的过程。DOS头和NT头以及块表位置与大小不变，剩下的各个节按照对齐方式对齐。现在可以将PE文件的加载过程总结如下：</p>\n<p>1、将文件从磁盘读取并拷贝到内存中，这时内存中的布局与在磁盘上的布局是一样的，拷贝在内存中的地址我们一般称为FileBuffer。</p>\n<p>2、根据SizeOfImage的大小，开辟一块缓冲区，将来“拉伸”后的内容就会放到这里面，这个地址我们一般称为ImageBuffer。这块内存会被放入4GB大小的进程空间中。</p>\n<p>3、根据SizeOfHeader的大小，将头信息从FileBuffer拷贝到ImageBuffer。</p>\n<p>4、根据节表中的信息循环将FileBuffer中的节拷贝到ImageBuffer中。</p>\n<p><img src=\"/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/2.PNG\"></p>\n<p>在“拉伸”完毕后，程序还不能跑起来，Windows系统还需要做一些收尾的工作才能运行。后续我们会通过代码来模拟这一过程。</p>\n<h1 id=\"PE文件拉伸与还原的实现\"><a href=\"#PE文件拉伸与还原的实现\" class=\"headerlink\" title=\"PE文件拉伸与还原的实现\"></a>PE文件拉伸与还原的实现</h1><p>前面提到过，一个PE文件从磁盘被读入并拉伸后，还不能立即运行起来。现在我们要实现这样的功能，将PE文件读入内存并拉伸，然后再将拉伸后的内容还原回原来的PE文件并存盘，该文件是可以双击运行的。如图：</p>\n<p><img src=\"/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/3.PNG\"></p>\n<p>各个模块实现代码如下(PE的各结构定义这里不再赘述)</p>\n<p><strong>1、将文件读入内存，并返回FileBuffer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">Read_exe</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE* fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tfp = fopen(<span class=\"string\">&quot;C:\\\\Windows\\\\System32\\\\notepad.exe&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>);\t<span class=\"comment\">//这里存放要读取的PE文件</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!fp)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;无法打开 EXE 文件!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsize = getlength(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FileBuffer = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(FileBuffer != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfread(FileBuffer, size, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Wrong!\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FileBuffer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//获取文件的大小</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getlength</span><span class=\"params\">(FILE* fp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">\tsize = ftell(fp);</span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0</span>, SEEK_SET);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、将读入内存的文件拉伸，并返回ImageBuffer</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">file_to_image</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 完成初始化工作 */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FileBuffer = Read_exe();</span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)FileBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew +<span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\t<span class=\"type\">int</span> SizeOfImage = (<span class=\"type\">int</span>)poph-&gt;SizeOfImage;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(SizeOfImage);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(ImageBuffer, <span class=\"number\">0</span>, SizeOfImage);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> size_part1 = <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">//计算头与节表的大小之和</span></span><br><span class=\"line\">\tsize_part1 = ((image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph))-&gt;PointerToRawData;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(ImageBuffer, FileBuffer, size_part1);    <span class=\"comment\">//将文件头与节表复制到imagebuffer中</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> numofsections = (<span class=\"type\">int</span>)(pph-&gt;NumberOfSection);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; numofsections; i++)          <span class=\"comment\">//循环将每个节复制到imagebuffer中</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* des = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)ImageBuffer + pish-&gt;VirtualAddress);</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* src = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)FileBuffer + pish-&gt;PointerToRawData);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> size = (<span class=\"type\">int</span>)(pish-&gt;SizeOfRawData);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(des, src, size);</span><br><span class=\"line\">\t\tpish++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ImageBuffer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、将拉伸后的内容还原为原来的PE文件，并存盘</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>*  <span class=\"title function_\">image_to_file</span><span class=\"params\">(<span class=\"type\">char</span>* ImageBuffer)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 完成初始化工作 */</span></span><br><span class=\"line\">\t<span class=\"comment\">//char* ImageBuffer = file_to_image();</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize = (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData) + (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* NewBuffer = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(NewBuffer, <span class=\"number\">0</span>, size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 计算头与节表的大小之和,将文件头与节表复制到newbuffer中 */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size_part1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize_part1 = (<span class=\"type\">int</span>)pish-&gt;VirtualAddress;</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(NewBuffer, ImageBuffer, size_part1);\t\t<span class=\"comment\">//将文件头与节表复制到Newbuffer中</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> numofsections = (<span class=\"type\">int</span>)(pph-&gt;NumberOfSection);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; numofsections; i++)\t\t\t<span class=\"comment\">//循环将每个节复制到Newbuffer中</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* des = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)NewBuffer + pish-&gt;PointerToRawData);</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* src = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)ImageBuffer + pish-&gt;VirtualAddress);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> size = (<span class=\"type\">int</span>)(pish-&gt;SizeOfRawData);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(des, src, size);</span><br><span class=\"line\">\t\tpish++;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"comment\">//存盘</span></span><br><span class=\"line\">\tFILE* pfp = fopen(<span class=\"string\">&quot;C:\\\\Documents and Settings\\\\easy\\\\桌面\\\\test.exe&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\tfwrite(NewBuffer, size, <span class=\"number\">1</span>, pfp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> NewBuffer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经测试，还原后的文件可以正常运行。</p>\n<h1 id=\"RVA与FOA转化的实现\"><a href=\"#RVA与FOA转化的实现\" class=\"headerlink\" title=\"RVA与FOA转化的实现\"></a>RVA与FOA转化的实现</h1><p>不论是在以后分析PE文件，还是做其他相关的事情，RVA(内存中的偏移)和FOA(文件中的偏移)之间的相互转换都是很重要的。转换大体思路就是先判断该地址是位于PE头还是节中，若是在PE头中，则地址不变，若是在节中，则要找出该地址位于哪个节，然后计算差值即可。</p>\n<p><strong>RVA转换为FOA</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span>* <span class=\"title\">RVA_TO_FOA</span><span class=\"params\">(<span class=\"type\">char</span>* RVA)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* FileBuffer = <span class=\"built_in\">Read_exe</span>();</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = <span class=\"built_in\">file_to_image</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)FileBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">    \t<span class=\"comment\">//如果该地址在头中，则不变</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((<span class=\"type\">int</span>)RVA &lt;= poph-&gt;SizeOfHeaders)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> RVA;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    \t<span class=\"comment\">//如果该地址在节中</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; pph-&gt;NumberOfSection; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            \t<span class=\"comment\">//找出RVA位于哪个节</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((<span class=\"type\">int</span>)RVA &gt;= (pish-&gt;VirtualAddress) &amp;&amp; (<span class=\"type\">int</span>)RVA &lt; (pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">                <span class=\"comment\">//加上差值即可</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">return</span> (RVA - pish-&gt;VirtualAddress) + pish-&gt;PointerToRawData;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tpish++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FOA转换为RVA代码基本一致，只是反过来而已。需要注意的是在ImageBuffer中，判断位于哪个节的依据是VirtualAddress+Misc，而在FileBuffer中判断的依据是PointerToRawData+SizeOfRawData。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：导入表注入","url":"/2022/05/05/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/","content":"<p>前一章节我们学习了导入表的原理。我们知道，一个EXE文件在需要用到DLL时，会根据导入表加载相关的DLL。因此如果我们通过修改导入表，来达到加载我们自己的DLL的目的，这就是导入表注入。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"注入的种类\"><a href=\"#注入的种类\" class=\"headerlink\" title=\"注入的种类\"></a>注入的种类</h1><p>所谓注入的本质，就是让一个程序能够执行我们自己的代码。在介绍导入表的原理与实现之前，先来说一下注入的大致分类：</p>\n<p>1、注册表注入</p>\n<p>2、导入表注入</p>\n<p>3、特洛伊注入(DLL劫持)</p>\n<p>4、远程线程注入</p>\n<p>5、无DLL注入</p>\n<p>6、APC注入</p>\n<p>7、Windows挂钩注入</p>\n<p>8、输入法注入</p>\n<p>在文章开头已经介绍过了导入表注入的原理，其他的注入类型读者可以自行了解，其中一些注入我们后续也会涉及到，到那时候再继续做讲解。</p>\n<h1 id=\"导入表注入的步骤\"><a href=\"#导入表注入的步骤\" class=\"headerlink\" title=\"导入表注入的步骤\"></a>导入表注入的步骤</h1><p>导入表注入的过程大致是通过新增一个节，将原来的各个导入表移动到新增的节中，然后追加INT表和IAT表，并做相应的修改，具体步骤如下：</p>\n<p>1、首先需要在原本的导入表后面新增一个导入表，但是我们知道，系统通过一块导入表结构大小的内存为0时来判断导入表的结束，因此需要预留足够的空间来添加一个新的导入表。为了简便，我在这里直接添加了一个节。</p>\n<p>2、修改目录项中导入表的地址与大小为新的值。</p>\n<p>3、追加8个字节INT表与8个字节的IAT表，因为这两个表宽度为4字节，并且还要预留4字节的0作为结尾。并修改最后一个导入表的OriginalFistThunk与FistThunk。</p>\n<p>4、追加一个IMAGE_IMPORT_BY_NAME 结构，前2个字节是0 后面是函数名称字符串，并将该结构的RVA赋值给INT和IAT表中的第一项</p>\n<p>5、分配空间存储DLL名称字符串 并将该字符串的RVA赋值给Name属性</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 代码实现导入表注入 */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Inject_Import_Table</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//第一步：在DLL中新增一个节，并返回新增后的FOA</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = file_to_image();</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer2 = AddSection(ImageBuffer, <span class=\"number\">0x1000</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* NewBuffer = image_to_file(ImageBuffer2);</span><br><span class=\"line\"></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)NewBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>* importtable_rva = (<span class=\"type\">char</span>*)poph-&gt;DataDirectory[<span class=\"number\">1</span>].VirtualAddress;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* importtable_foa = RVA_TO_FOA(importtable_rva);</span><br><span class=\"line\">\timage_import_directory* piid = (image_import_directory*)(importtable_foa + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FOA_add = (<span class=\"type\">char</span>*)(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第二步：移动原导入表到新增节中</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_import_table = (<span class=\"type\">char</span>*)(RVA_TO_FOA((<span class=\"type\">char</span>*)poph-&gt;DataDirectory[<span class=\"number\">1</span>].VirtualAddress) + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_import_table = (<span class=\"type\">char</span>*)(FOA_add + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">int</span> Size_import = poph-&gt;DataDirectory[<span class=\"number\">1</span>].Size;</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_import_table, src_import_table, Size_import);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第三步：修复目录项中的地址值，指向新的IMAGE_IMPORT_TABLE, 注意转换成RVA</span></span><br><span class=\"line\">\tpoph-&gt;DataDirectory[<span class=\"number\">1</span>].VirtualAddress = (<span class=\"type\">int</span>)FOA_add - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData</span><br><span class=\"line\">\t\t                                   + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//第四步: 在新的导入表后面，追加一个导入表，并修正目录项中的Size值</span></span><br><span class=\"line\">\timage_import_directory* New_piid = (image_import_directory*)((<span class=\"type\">int</span>)des_import_table + Size_import - <span class=\"number\">20</span>);</span><br><span class=\"line\">\tpoph-&gt;DataDirectory[<span class=\"number\">1</span>].Size += <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第五步: 追加8个字节的INT表, 8个字节的IAT表, 并修改导入表两个地址值，注意修改为RVA</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* p_INT = (<span class=\"type\">int</span>*)((<span class=\"type\">int</span>)New_piid + <span class=\"number\">40</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span>* p_IAT = (<span class=\"type\">int</span>*)((<span class=\"type\">int</span>)p_INT + <span class=\"number\">8</span>);</span><br><span class=\"line\">\tNew_piid-&gt;OriginalFistThunk = (<span class=\"type\">int</span>)p_INT - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\">\tNew_piid-&gt;FirstThunk = (<span class=\"type\">int</span>)p_IAT - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第六步：追加一个IMAGE_IMPORT_BY_NAME 结构，前2个字节是0 后面是函数名称字符串</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> func_name[] = <span class=\"string\">&quot;ExportFunction&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* p_funcname = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)p_IAT + <span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(p_funcname, func_name, <span class=\"keyword\">sizeof</span>(func_name));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第七步：将IMAGE_IMPORT_BY_NAME结构的RVA赋值给INT和IAT表中的第一项</span></span><br><span class=\"line\">\t*p_INT = (<span class=\"type\">int</span>)p_funcname - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t*p_IAT = *p_INT;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第八步：分配空间存储DLL名称字符串 并将该字符串的RVA赋值给Name属性</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> Dll_name[] = <span class=\"string\">&quot;InjectDll.dll&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* p_DLLName = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)p_funcname + <span class=\"keyword\">sizeof</span>(func_name));</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(p_DLLName, Dll_name, <span class=\"keyword\">sizeof</span>(Dll_name));</span><br><span class=\"line\"></span><br><span class=\"line\">\tNew_piid-&gt;Name = (<span class=\"type\">int</span>)p_DLLName - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//存盘</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize = (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData) + (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData);</span><br><span class=\"line\">\tFILE* pfp = fopen(<span class=\"string\">&quot;C:\\\\Documents and Settings\\\\easy\\\\桌面\\\\6.exe&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\tfwrite(NewBuffer, size, <span class=\"number\">1</span>, pfp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先来看一下注入的InjectDll.dll的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">BOOL APIENTRY <span class=\"title function_\">DllMain</span><span class=\"params\">(HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//加载DLL</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">\t\tInit();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    \t<span class=\"comment\">//卸载DLL</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">\t\tDestroy();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DLL内的函数代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Init</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tMessageBox(<span class=\"number\">0</span>,<span class=\"string\">&quot;Init&quot;</span>,<span class=\"string\">&quot;Init&quot;</span>,MB_OK);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//卸载函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Destroy</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tMessageBox(<span class=\"number\">0</span>,<span class=\"string\">&quot;Destroy&quot;</span>,<span class=\"string\">&quot;Destroy&quot;</span>,MB_OK);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//导出函数，任何你想要执行的代码都可以放到这里面</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ExportFunction</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tMessageBox(<span class=\"number\">0</span>,<span class=\"string\">&quot;ExportFunction&quot;</span>,<span class=\"string\">&quot;ExportFunction&quot;</span>,MB_OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实验效果：</p>\n<p>运行导入表注入的程序：</p>\n<p><img src=\"/2022/05/05/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/1.PNG\"></p>\n<p>可以看到，在程序启动时，DLL被加载到该程序的进程空间，成功执行了初始化函数。</p>\n<p>下面关闭软件后：</p>\n<p><img src=\"/2022/05/05/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/2.PNG\"></p>\n<p>关闭后成功执行了卸载函数。</p>\n<p>然后用PE查看器看一下导入表：</p>\n<p><img src=\"/2022/05/05/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/3.PNG\"></p>\n<p>可以看到，我们自己的DLL成功注入到了该程序中，并且识别到了我们的导出函数。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：扩大节与合并节","url":"/2022/04/24/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%89%A9%E5%A4%A7%E8%8A%82%E4%B8%8E%E5%90%88%E5%B9%B6%E8%8A%82/","content":"<p>上一章学习了如何新增一个节并添加代码，但是这可能会带来一个问题，新增一个节有些太明显了，可能会被检测到(虽然我们也并不是干什么坏事)，因此本章学习如何合并和扩大一个节。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"扩大节\"><a href=\"#扩大节\" class=\"headerlink\" title=\"扩大节\"></a>扩大节</h1><p>为了不影响程序的正常运行，以及我们工作的方便，最好是对最后一个节进行扩大。扩大节与上一章新增一个节类似，也需要重新申请一个ImageBuffer2的空间。除此之外，还需要注意一下修改SizeOfRawData和VirtualSize的值(即修改节在磁盘中对齐前的大小和在内存中对齐后的大小)。让它们直接相等，且都等于内存中对齐后新的大小即可。下面给出代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">define MessageBoxAddr <span class=\"number\">0x77D507EA</span></span><br><span class=\"line\"><span class=\"type\">char</span> shellcode2[] = </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE9</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> shellcode_length2 = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">Expand_Last_Section</span><span class=\"params\">(<span class=\"type\">char</span>* ImageBuffer)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 定义各文件头 */</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = (<span class=\"type\">int</span>)((poph-&gt;SizeOfImage) + <span class=\"number\">0x1000</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer2 = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(ImageBuffer2, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(ImageBuffer2, ImageBuffer, poph-&gt;SizeOfImage);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpdh = (dos_header*)ImageBuffer2;</span><br><span class=\"line\">\tpph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\tpoph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\tpish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\timage_section_header* pish_last = (image_section_header*)(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 修改SizeOfImage 最后一个节的属性 */</span></span><br><span class=\"line\">\tpoph-&gt;SizeOfImage = size;</span><br><span class=\"line\">\t(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;Characteristics = pish-&gt;Characteristics;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pish_last-&gt;Misc.VirtualSize &gt;= pish_last-&gt;SizeOfRawData)   <span class=\"comment\">//注意修改Misc和SizeOfRawData的要点</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpish_last-&gt;SizeOfRawData = <span class=\"number\">0x1000</span> + pish_last-&gt;Misc.VirtualSize;</span><br><span class=\"line\">\t\tpish_last-&gt;Misc.VirtualSize += <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpish_last-&gt;Misc.VirtualSize = pish_last-&gt;SizeOfRawData + <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">\t\tpish_last-&gt;SizeOfRawData += <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 在最后一个节中添加代码 */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* des = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)ImageBuffer2 + pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class=\"number\">0x1000</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* src = shellcode2;</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des, src, shellcode_length2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> CallAddr = (<span class=\"type\">int</span>)(MessageBoxAddr - (pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class=\"number\">0x1000</span> + <span class=\"number\">13</span> + poph-&gt;ImageBase));</span><br><span class=\"line\">\t<span class=\"type\">int</span>* addr1 = (<span class=\"type\">int</span>*)((<span class=\"type\">int</span>)ImageBuffer2 + pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class=\"number\">0x1000</span> + <span class=\"number\">9</span>);</span><br><span class=\"line\">\t*addr1 = CallAddr;                   <span class=\"comment\">//修改E8</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> RetAddr = (<span class=\"type\">int</span>)(poph-&gt;AddressOfEntryPoint + poph-&gt;ImageBase - (pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class=\"number\">0x1000</span> + <span class=\"number\">18</span> + poph-&gt;ImageBase));</span><br><span class=\"line\">\t<span class=\"type\">int</span>* addr2 = (<span class=\"type\">int</span>*)((<span class=\"type\">int</span>)ImageBuffer2 + pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class=\"number\">0x1000</span> + <span class=\"number\">14</span>);</span><br><span class=\"line\">\t*addr2 = RetAddr;                    <span class=\"comment\">//修改E8</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> OEP = (<span class=\"type\">int</span>)(pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class=\"number\">0x1000</span>);</span><br><span class=\"line\">\tpoph-&gt;AddressOfEntryPoint = OEP;     <span class=\"comment\">//修改OEP  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ImageBuffer2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，可能会有些疑问：为什么在修改SizeOfRawData和VirtualSize时，要先进行一个比较再加上1000h呢？难道不是SizeOfRawData一定大于VirtualSize，也就是在磁盘中对齐后的大小一定大于等于在内存中对齐前的大小吗？答案是否定的。因为有可能在程序中会有很多在声明时未初始化的变量，在文件加载到内存中后这些未初始化的变量会被赋值，有可能会超过原来的SizeOfRawData。</p>\n<h1 id=\"合并节\"><a href=\"#合并节\" class=\"headerlink\" title=\"合并节\"></a>合并节</h1><p>本代码实现将PE文件的所有节合并为一个节。具体步骤与注意点如下：</p>\n<p>1、拉伸到内存。</p>\n<p>2、修改第一个节表的SizeOfRawData和VirtualSize。让它们大小都等于全部节在内存中的大小之和。那么如何计算这个大小呢？看一张图</p>\n<p><img src=\"/2022/04/24/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%89%A9%E5%A4%A7%E8%8A%82%E4%B8%8E%E5%90%88%E5%B9%B6%E8%8A%82/1.PNG\"></p>\n<p>大小应该是SizeOfImage - 第一个节的VirtualAddress。</p>\n<p>3、将第一个节的属性改为包含所有节的属性，这里用按位或运算即可。</p>\n<p>4、修改节的数量为1。</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 合并所有节 */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Merge_Section</span><span class=\"params\">(<span class=\"type\">char</span>* ImageBuffer)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 定义各文件头 */</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 改成员 */</span></span><br><span class=\"line\">\tpish-&gt;Misc.VirtualSize = poph-&gt;SizeOfImage - pish-&gt;VirtualAddress;</span><br><span class=\"line\">\tpish-&gt;SizeOfRawData = pish-&gt;Misc.VirtualSize;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 将属性改为包含所有节的属性 */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> chara = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; pph-&gt;NumberOfSection - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tchara = (pish + i)-&gt;Characteristics | (pish + i + <span class=\"number\">1</span>)-&gt;Characteristics;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpish-&gt;Characteristics = chara;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 修改节个数为1 */</span></span><br><span class=\"line\">\tpph-&gt;NumberOfSection = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实验结果如下</p>\n<p><img src=\"/2022/04/24/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%89%A9%E5%A4%A7%E8%8A%82%E4%B8%8E%E5%90%88%E5%B9%B6%E8%8A%82/2.PNG\"></p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：导出表与重定位表","url":"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/","content":"<p>在学习PE结构的过程中，最重要的能力之一就是对各种表的理解与运用。本章将会对导出表与重定位表的工作原理进行剖析，并给出代码解析这两张表。在我的GitHub中有一个用C和win32写的PE工具项目，里面有完整的源码，实现了对PE文件的解析以及其他功能，需要的可以去我的GitHub查看。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"导出表\"><a href=\"#导出表\" class=\"headerlink\" title=\"导出表\"></a>导出表</h1><p>一般情况下，一个DLL文件提供函数给别的程序使用，一个EXE文件使用DLL提供的函数。那么其他程序如何才能在DLL中找到找到对应的函数呢？答案就是导出表。导出表里面记录了该文件对外提供了哪些函数，以及导出的方式(以序号导出和以函数名称导出)。</p>\n<h2 id=\"如何定位导出表\"><a href=\"#如何定位导出表\" class=\"headerlink\" title=\"如何定位导出表\"></a>如何定位导出表</h2><p>可选PE头的最后一个结构，是数据目录项(IMAGE_DATA_DIRECTORY)，这是一个16项数组，每一项的结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">image_data_directory</span>\t\t//数据目录</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> VirtualAddress;\t\t<span class=\"comment\">//RVA</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> Size;\t\t\t<span class=\"comment\">//大小</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在这16项中，前15项分别对应了15张表，最后一项保留。其中第一张就是导出表。</p>\n<h2 id=\"导出表结构\"><a href=\"#导出表结构\" class=\"headerlink\" title=\"导出表结构\"></a>导出表结构</h2><p>上面的结构，只是说明导出表在哪里，有多大，并不是真正的导出表。<strong>想在磁盘文件(FileBuffer)中找到导出表，必须先将上面的RVA转换成FOA</strong>。导出表结构如下</p>\n<p><img src=\"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/1.PNG\"></p>\n<p>在导出表结构中有三个RVA，分别指向了三张表。想要在FileBuffer中定位它们，一样需要转换成FOA。</p>\n<h2 id=\"AddressOfFunctions说明\"><a href=\"#AddressOfFunctions说明\" class=\"headerlink\" title=\"AddressOfFunctions说明\"></a>AddressOfFunctions说明</h2><p>这张表里面的内容是导出函数的地址。宽度为4字节(即一个地址的宽度)，数量为导出表结构中的NumberOfFunctions。<strong>该表中存储的地址是RVA</strong>，需要加上ImageBase才是运行时函数的地址。</p>\n<p>另外许需要注意的是，这个NumberOfFunctions的值有可能不是真正导出函数的数量。因为这个值是系统根据公式：<strong>NumberofFunctions &#x3D; 导出函数最大序号 - 最小序号 + 1</strong> 得到的。因此如果导出函数序号不连续的话，函数地址表中的地址数量就会多于导出函数的数量，多出来的部分用0填补。</p>\n<h2 id=\"AddressOfNames说明\"><a href=\"#AddressOfNames说明\" class=\"headerlink\" title=\"AddressOfNames说明\"></a>AddressOfNames说明</h2><p>这张表里面的内容是导出函数名称的地址(注意不是函数名称)。宽度同样为4字节，数量为导出表结构中的NumberOfNames。<strong>该表中存储的地址是以名字导出函数的名字的RVA</strong>，想要打印出来导出函数的名字，需要将RVA转换成FOA。</p>\n<p><img src=\"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/2.PNG\"></p>\n<p>函数名称在文件中的位置是不确定的，但是在函数名称地址表中，一定是按照字母顺序排序的。</p>\n<h2 id=\"AddressOfNameOrdinals说明\"><a href=\"#AddressOfNameOrdinals说明\" class=\"headerlink\" title=\"AddressOfNameOrdinals说明\"></a>AddressOfNameOrdinals说明</h2><p>这张表里面存储的是序号(不是真正的函数序号，可以理解成偏移)。宽度为2字节，数量与AddressOfNames表相等，都为NumberOfNames。需要注意的是，该表中存储的内容 + Base &#x3D; 函数的导出序号。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1、为什么需要分成三张表？</p>\n<p>因为函数导出的个数与函数名的个数未必一样，所以要将函数地址表和函数名称表分开。</p>\n<p>2、函数地址表是不是一定大于等于函数名称表？</p>\n<p>不一定，因为有可能有多个函数的名字指向同一个函数地址。</p>\n<p>3、系统是如何根据一个函数的名字确定函数的地址的？</p>\n<p><img src=\"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/3.PNG\"></p>\n<p>首先根据函数名称，搜索函数名称表，利用这个函数名称的索引直接索引到函数序号表，得到对应的函数序号表的内容，将这个值作为函数地址表的索引，便得到了函数地址RVA，最后加上ImageBase，便可在运行时找到对应的函数。</p>\n<p>4、系统是如何根据函数的导出序号获取一个函数的地址？</p>\n<p>直接看张图即可</p>\n<p><img src=\"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/4.PNG\"></p>\n<p>最后给出两个函数，分别模拟系统根据名字和序号找到对应的函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过函数名称找到对应函数地址，参数为filebuffer和函数名称</span></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">Get_Func_Addr_by_Name</span><span class=\"params\">(<span class=\"type\">char</span>* filebuffer, <span class=\"type\">char</span>* FuncName)</span></span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\t<span class=\"type\">char</span>* Func_Addr = <span class=\"literal\">NULL</span>;      <span class=\"comment\">//声明导出函数指针</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdos_header* pdosh = (dos_header*)filebuffer;</span><br><span class=\"line\">\tpe_header* ppeh = (pe_header*)((pdosh-&gt;e_lfanew) + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdosh);</span><br><span class=\"line\">\toptional_pe_header* popeh = (optional_pe_header*)((<span class=\"type\">int</span>)ppeh + <span class=\"number\">20</span>);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)((<span class=\"type\">int</span>)popeh + ppeh-&gt;SizeOfOptionalHeader);</span><br><span class=\"line\">\timage_export_directory* pied = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 定位到导出表，找到导出表的全部信息，包括最后三个表的地址 */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* export_rva = (<span class=\"type\">char</span>*)popeh-&gt;DataDirectory[<span class=\"number\">0</span>].VirtualAddress;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* export_foa = RVA_TO_FOA(export_rva);</span><br><span class=\"line\">\tpied = (image_export_directory*)(export_foa + (<span class=\"type\">int</span>)filebuffer);                  <span class=\"comment\">//导出表指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* pName_Addr = (<span class=\"type\">int</span>*)(RVA_TO_FOA((<span class=\"type\">char</span>*)pied-&gt;AddressOfNames) + (<span class=\"type\">int</span>)filebuffer);                <span class=\"comment\">//AddressOfNames表指针</span></span><br><span class=\"line\">\t<span class=\"type\">short</span>* pOrdinal_Addr = (<span class=\"type\">short</span>*)(RVA_TO_FOA((<span class=\"type\">char</span>*)pied-&gt;AddressOfNameOrdinals) + (<span class=\"type\">int</span>)filebuffer);  <span class=\"comment\">//AddressOfNameOrdinals</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* pFunc_Addr = (<span class=\"type\">int</span>*)(RVA_TO_FOA((<span class=\"type\">char</span>*)pied-&gt;AddressOfFunctions) + (<span class=\"type\">int</span>)filebuffer);            <span class=\"comment\">//AddressOfFunctions</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 循环遍历name地址表，匹配函数名 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; pied-&gt;NumberOfNames; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>((<span class=\"type\">char</span>*)(*(pName_Addr + i) + (<span class=\"type\">int</span>)filebuffer), FuncName) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tFunc_Addr = (<span class=\"type\">char</span>*)(*(pFunc_Addr + *(pOrdinal_Addr + i)));</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;RVA:%x\\n&quot;</span>, Func_Addr);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Func_Addr;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;没有这个函数!\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过导出函数序号找到对应函数地址，参数为filebuffer和导出函数序号</span></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">Get_Func_Addr_by_Ordinals</span><span class=\"params\">(<span class=\"type\">char</span>* filebuffer, <span class=\"type\">int</span> ordinals)</span></span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\t<span class=\"type\">char</span>* Func_Addr = <span class=\"literal\">NULL</span>;      <span class=\"comment\">//声明导出函数指针</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdos_header* pdosh = (dos_header*)filebuffer;</span><br><span class=\"line\">\tpe_header* ppeh = (pe_header*)((pdosh-&gt;e_lfanew) + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdosh);</span><br><span class=\"line\">\toptional_pe_header* popeh = (optional_pe_header*)((<span class=\"type\">int</span>)ppeh + <span class=\"number\">20</span>);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)((<span class=\"type\">int</span>)popeh + ppeh-&gt;SizeOfOptionalHeader);</span><br><span class=\"line\">\timage_export_directory* pied = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 定位到导出表，找到导出表的全部信息，只需要AddressOfFunctions表 */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* export_rva = (<span class=\"type\">char</span>*)popeh-&gt;DataDirectory[<span class=\"number\">0</span>].VirtualAddress;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* export_foa = RVA_TO_FOA(export_rva);</span><br><span class=\"line\">\tpied = (image_export_directory*)(export_foa + (<span class=\"type\">int</span>)filebuffer);                  <span class=\"comment\">//导出表指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* pFunc_Addr = (<span class=\"type\">int</span>*)(RVA_TO_FOA((<span class=\"type\">char</span>*)pied-&gt;AddressOfFunctions) + (<span class=\"type\">int</span>)filebuffer);  <span class=\"comment\">//AddressOfFunctions</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tFunc_Addr = (<span class=\"type\">char</span>*)(*(pFunc_Addr + (ordinals - pied-&gt;Base)));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;RVA:%x\\n&quot;</span>, Func_Addr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Func_Addr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"重定位表\"><a href=\"#重定位表\" class=\"headerlink\" title=\"重定位表\"></a>重定位表</h1><h2 id=\"程序加载的过程\"><a href=\"#程序加载的过程\" class=\"headerlink\" title=\"程序加载的过程\"></a>程序加载的过程</h2><p>在前面的章节中，已经笼统地阐述过一个程序是如何加载到内存并运行起来的。现在再做一个补充说明</p>\n<p><img src=\"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/5.PNG\"></p>\n<p>可以看到，一个EXE文件在运行前，系统会加载很多该程序需要用到的DLL到低2G的高领空。高2G留给内核使用。下面做几点特别说明：</p>\n<p>1、一般情况下，一个EXE文件是可以根据它的ImageBase来进行加载的，因为EXE文件拥有它自己独立的4GB内存空间。而DLL却不行，因为DLL是有EXE文件需要使用它，它才加载到相关EXE的进程空间的。</p>\n<p>2、一个程序可能会用到很多DLL，而每个DLL默认的ImageBase均为0x10000000h，显然不可能每个DLL都会加载到该地址，它们只能在后面的地址加载。</p>\n<p>3、为了提高搜索的速度，模块(DLL)间地址也是要对齐的，模块地址对齐为10000H 也就是64K。所以DLL文件的起始地址要10000H对齐。</p>\n<h2 id=\"为什么要使用重定位表\"><a href=\"#为什么要使用重定位表\" class=\"headerlink\" title=\"为什么要使用重定位表\"></a>为什么要使用重定位表</h2><p>在前面逆向的章节中，我们已经知道，一个全局变量在反汇编中，地址是写死的。这个地址计算的公式是：编译时生成的地址 &#x3D; ImageBase + RVA。这个地址在程序编译完成后，已经写入文件了。</p>\n<p>那么现在来假设一种情况，程序在加载的时候，没有按照ImageBase的地址0x400000h加载，而是加载到了0x500000h这个地址，可是因为全局变量在加载前已经写死了(RVA加的是ImageBase的值)，程序执行的时候仍然会按照原来的地址群寻找这个变量，可是很明显，该全局变量已的位置已经改变了。</p>\n<p>1、也就是说，如果程序能够按照预定的ImageBase来加载的话，那么就不需要重定位表。这也是为什么exe很少有重定位表，而DLL大多都有重定位表的原因。</p>\n<p>2、一旦某个模块没有按照ImageBase进行加载，那么所有类似上面中的地址就都需要修正，否则，引用的地址就是无效的。</p>\n<p>3、一个EXE中，需要修正的地方会很多，那我们如何来记录都有哪些地方需要修正呢？答案就是重定位表。</p>\n<h2 id=\"重定位表结构解析\"><a href=\"#重定位表结构解析\" class=\"headerlink\" title=\"重定位表结构解析\"></a>重定位表结构解析</h2><p>数据目录项的第6个结构就是重定位表。通过第6项的VirtualAddress转换成FOA即可找到重定位表。结构如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_BASE_RELOCATION</span> &#123;</span>\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   VirtualAddress;\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SizeOfBlock;\t\t\t\t\t\t</span><br><span class=\"line\">&#125; IMAGE_BASE_RELOCATION;\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> IMAGE_BASE_RELOCATION, * PIMAGE_BASE_RELOCATION;\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>看一张更清楚的结构图，有很多块该结构组成</p>\n<p><img src=\"/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/6.PNG\"></p>\n<p>解析说明：</p>\n<p>1、判断一共有几块数据：最后一个结构的VirtualAddress与SizeOfBlock都为0。</p>\n<p>2、具体项，宽度为2字节(16位)。在内存中，页的大小是0x1000H，也就是用2的12次方就可以表示一个页内的所有偏移。因此在16位的具体项中，低12位就代表这个偏移。高4位只有两种可能，当高4位值为3时，代表的是需要修改的数据；高4位值为0时，代表该数据是用于对齐的，可以不用管。因此我们只关注高4位值为3的数据。</p>\n<p>3、VirtualAddress，宽度是4字节，代表的是当前这一页的基址。真正的RVA &#x3D; VirtualAddress + 具体项的低12位。注意得到的是RVA。</p>\n<p>4、SizeOfBlock，宽度是4字节，代表的是当前块的总大小(比如上图中绿色、黄色块的大小)。具体项的数量 &#x3D; (SizeOfBlock - 8)&#x2F;2。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：新增节并添加代码","url":"/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/","content":"<p>上一章是在原本存在的代码节中添加代码，本章实现新增一个节，并在新增的节中添加代码。</p>\n<span id=\"more\"></span>\n\n<p>先来整理一下，如果需要新增一个节，需要修改哪些东西：节表、新增一个节、在新增的节后面保证有一个节大小的0、修改PE头中节的数量、修改SizeOfImage大小、修正新增节的属性。</p>\n<p><strong>1、修改节表</strong></p>\n<p>先来看一下节表中每一项的内容</p>\n<p><img src=\"/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/1.PNG\"></p>\n<p>在节表中，每一项长度为40字节，描述了对应的节区的各种属性。那么Windows系统是怎么判断节表里面有多少项的呢？答案是，在节表的最后，是以一个节表项大小(40字节)全为0的内存，来表示节表的结束，类似于C语言中的字符串。因此，如果想要新增一个节，就需要保证在原有的节表后面，必须有2个节表项大小的0。再来看一张图</p>\n<p><img src=\"/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/2.PNG\"></p>\n<p>由上面的图可以看到，判断能否在原来的节表中新增加一项，判断公式为**SizeOfHeader - (DOS + 垃圾数据 + PE标记 + 标准PE头 + 可选PE头 + 已存在节表) &gt;&#x3D; 2个节表项大小(80字节)**。那么现在问题出来了，如果能容得下，直接添加就好了，如果容不下怎么办？</p>\n<p>再次看一下上面的图，在DOS头和NT头中间的浅蓝色区域，其实是一块垃圾数据，这里面的数据不影响程序的运行。因为Windows系统根据DOS头中的Ifanew字段直接找到了NT头，跳过了那段垃圾区域。因此，如果节表容不下新增一个项，那么我们可以将NT头和节表那一整块整体上移至DOS头下方，然后修改Ifanew字段，指向刚刚移动的位置，然后再新增一个节表项即可。</p>\n<p><strong>2、其他要修改的内容</strong></p>\n<p>节的数量：位于PE头中，+1。</p>\n<p>sizeofimage：位于可选PE头，比如我们新增节大小为0x1000h(4096字节)，那么sizeofimage + 1000。</p>\n<p>在最后一个节的后面新增节：要注意对齐。</p>\n<p>新增节的属性：可以直接将代码段的属性复制到新增的节上。</p>\n<p>在节中添加代码。</p>\n<p>还有需要注意的一点是，在新增节的时候，应该另外申请一个ImageBuffer2空间的大小，用于盛放原来的ImageBuffer的内容和新增节的内容。</p>\n<p>代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 新增一个节，添加弹框代码 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MessageBoxAddr 0x77D507EA</span></span><br><span class=\"line\"><span class=\"type\">char</span> shellcode[] = </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,<span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6A</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,</span><br><span class=\"line\">\t<span class=\"number\">0xE9</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//新增节的名称为.haha</span></span><br><span class=\"line\"><span class=\"type\">char</span> sectionname[] = &#123;<span class=\"number\">0x2E</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x61</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> shellcode_length = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"comment\">//函数实现新增节，参数分别为拉伸后的ImageBuffer和新增节大小的字节数</span></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">AddSection</span><span class=\"params\">(<span class=\"type\">char</span>* ImageBuffer, <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 定义各文件头 */</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = (<span class=\"type\">int</span>)((poph-&gt;SizeOfImage) + len);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer2 = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(ImageBuffer2, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(ImageBuffer2, ImageBuffer, poph-&gt;SizeOfImage);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpdh = (dos_header*)ImageBuffer2;</span><br><span class=\"line\">\tpph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\tpoph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\tpish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* 添加一个节表 */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> up_size = <span class=\"number\">4</span> + <span class=\"number\">20</span> + pph-&gt;SizeOfOptionalHeader + (pph-&gt;NumberOfSection)*<span class=\"number\">40</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)ImageBuffer2 + <span class=\"number\">64</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* src = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)ImageBuffer2 + pdh-&gt;e_lfanew);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des, src, up_size);            <span class=\"comment\">//上移NT头</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>((<span class=\"type\">char</span>*)(des + up_size), <span class=\"number\">0</span>, <span class=\"number\">160</span>);   <span class=\"comment\">//160=E0+up_size-(64+up_zise)  清0</span></span><br><span class=\"line\">\tpdh-&gt;e_lfanew = <span class=\"number\">0x40</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpdh = (dos_header*)ImageBuffer2;</span><br><span class=\"line\">\tpph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\tpoph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\tpish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_pish = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)pish + (<span class=\"type\">int</span>)(pph-&gt;NumberOfSection*<span class=\"number\">40</span>));</span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_pish = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)pish);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_pish, src_pish, <span class=\"number\">40</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t(pish + pph-&gt;NumberOfSection)-&gt;name[i] = sectionname[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* 修改PE头中节的数量 */</span></span><br><span class=\"line\">\tpph-&gt;NumberOfSection += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 修改sizeofimage大小 */</span></span><br><span class=\"line\">\tpoph-&gt;SizeOfImage = poph-&gt;SizeOfImage + len;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* 修正新增节表的属性 */</span></span><br><span class=\"line\">\t(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;Misc.VirtualAddress = len;</span><br><span class=\"line\">\t(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress = (pish + pph-&gt;NumberOfSection - <span class=\"number\">2</span>)-&gt;VirtualAddress + (pish + pph-&gt;NumberOfSection - <span class=\"number\">2</span>)-&gt;SizeOfRawData;</span><br><span class=\"line\">\t(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData = len;</span><br><span class=\"line\">\t(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData = (pish + pph-&gt;NumberOfSection - <span class=\"number\">2</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">2</span>)-&gt;SizeOfRawData;</span><br><span class=\"line\">\t(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;Characteristics = (pish + <span class=\"number\">2</span>)-&gt;Characteristics;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 在节中添加代码 */</span></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tmemcpy((char*)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + (int)ImageBuffer2), shellcode, shellcode_length);</span></span><br><span class=\"line\"><span class=\"comment\">\t</span></span><br><span class=\"line\"><span class=\"comment\">\tint CallAddr = (int)(MessageBoxAddr - ((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + 13 + poph-&gt;ImageBase));</span></span><br><span class=\"line\"><span class=\"comment\">\tint* addr1 = (int*)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + (int)ImageBuffer2 + 9);</span></span><br><span class=\"line\"><span class=\"comment\">\t*addr1 = CallAddr;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\tint RetAddr = (int)(poph-&gt;AddressOfEntryPoint + poph-&gt;ImageBase - ((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + 18 + poph-&gt;ImageBase));</span></span><br><span class=\"line\"><span class=\"comment\">\tint* addr2 = (int*)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + (int)ImageBuffer2 + 14);</span></span><br><span class=\"line\"><span class=\"comment\">\t*addr2 = RetAddr;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\tint OEP = (int)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress);</span></span><br><span class=\"line\"><span class=\"comment\">\tpoph-&gt;AddressOfEntryPoint = OEP;</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ImageBuffer2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实验结果：</p>\n<p>在原本的记事本程序中，有三个节：</p>\n<p><img src=\"/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/3.PNG\"></p>\n<p>代码运行成功后，节添加成功：</p>\n<p><img src=\"/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/4.PNG\"></p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"Win32：加密壳的编写","url":"/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/","content":"<p>这节课来完成对壳程序的编写。壳可以分成两类：加密壳和压缩壳，加密壳又可以分成两类：分别是二进制壳和源代码加密壳。对于二进制壳来所，它并不改变代码的指令，而是对整个PE文件结构做一个扭曲变形，并且对关键代码进行加密。但是对于所有这种二进制壳，不管怎么变形，当这个程序执行时，在内存中拉伸后一定是要恢复原状的。想要脱这种二进制壳，需要跟着它的汇编指令执行到在内存中展开后，将内存dump出来，再修改OEP到正常程序的入口点，即可完成脱壳。本节课我们就来完成对这种二进制壳的编写。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p><u>特别说明，在本篇文章中，壳程序称为<strong>shell</strong>，准备加密的程序称为<strong>src</strong>。</u></p>\n<p>对于这种二进制壳，有以下两种编写方法：</p>\n<p><strong>一、将PE文件中的各种表移动出来，再加密（本节课不做这个）</strong></p>\n<ol>\n<li>新增一个节，移动各种表</li>\n<li>对原来PE文件加密</li>\n<li>这时候程序还不能跑起来，因为OEP还在被加密的文件中，系统不认识，需要在最后追加一段代码</li>\n<li>这个代码作用为解密，解完密后跳转到原来的OEP</li>\n</ol>\n<p>但这时候有一个问题：在解密代码中有可能会用到别的DLL的函数，这个DLL又可能还没有被导入进来，或者原来的PE文件压根没有这个DLL文件要导入，因此需要自己在解密代码中导入需要用到的DLL。</p>\n<p>还有一个问题，解密代码中会有可能有全局变量，地址都是写死的，若解密代码没有加到预定的位置，就不能用了。这种情况需要使用win32汇编来编写解密代码。</p>\n<p><strong>二、不移动各种表，直接加密整个文件</strong></p>\n<ol>\n<li>将SRC文件读入内存，加密</li>\n<li>将加密后的文件追加到Shell文件新增的节中</li>\n</ol>\n<p>此时加壳结束。这时生成的程序中，被加密的SRC程序就是一堆被加密的数据，静态分析是看不出来的，但是动态分析一步一步跟是可以分析的。</p>\n<p>现在有一个问题，这个程序的主体是壳子程序，双击之后跑起来的是壳子，不是被加密的SRC程序。因此要在壳子程序中写解壳程序。因此完成这个加壳的过程，需要加壳程序与解壳程序两步。</p>\n<h1 id=\"加壳程序的编写\"><a href=\"#加壳程序的编写\" class=\"headerlink\" title=\"加壳程序的编写\"></a>加壳程序的编写</h1><p>步骤如下：</p>\n<ol>\n<li>获取Shell程序的路径</li>\n<li>获取src程序的路径</li>\n<li>将src程序读取到内存中，加密</li>\n<li>在Shell程序中新增一个节，并将加密后的src程序追加到Shell程序的新增节中</li>\n<li>加壳完毕</li>\n</ol>\n<p>图解如下：</p>\n<p><img src=\"/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/1.PNG\"></p>\n<p>此时生成的文件还是原来的那个壳子程序，仅仅是在一个新增的节中写入了一堆数据，根本看不到我们加密的程序，只用静态分析的话是无法分析出我们加密的程序的，同时如果被加密的程序是病毒的话，杀毒软件也无法杀死我们的程序（文件免杀）。</p>\n<p>加密程序代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码实现软件加壳，其中拉伸、增加节、还原的函数代码在前面几节课中已经给出</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Add_Protect</span><span class=\"params\">(<span class=\"type\">char</span>* shell_Filename, <span class=\"type\">char</span>* src_Filename)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1、获得shell壳子程序路径，已经在参数中给出</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//2、在shell程序中新增一个节</span></span><br><span class=\"line\">    <span class=\"type\">char</span>* shell_ImageBuffer = File_To_Image(shell_Filename);           <span class=\"comment\">//拉伸</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* shell_ImageBuffer2 = AddSection(shell_ImageBuffer, <span class=\"number\">0x100000</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* shell_NewBuffer = image_to_file(shell_ImageBuffer2);</span><br><span class=\"line\"></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)shell_NewBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//3、获取src程序路径，已经在参数中给出</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//4、将src程序读取到内存中，加密</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_Buffer = ReadMem_Exe(src_Filename);</span><br><span class=\"line\">\tFILE* src_fp = fopen(src_Filename, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> src_size = getlength(src_fp);</span><br><span class=\"line\">\t<span class=\"comment\">//这里应该是加密函数，对src文件进行加密，这里为了简便起见，只做取反运算</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; src_size; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*(src_Buffer + i) = ~(*(src_Buffer + i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//5、将加密后的src程序追加到shell程序中新增的节中</span></span><br><span class=\"line\">\t<span class=\"comment\">//定位到shell程序最后一个节</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_Section = (<span class=\"type\">char</span>*)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (<span class=\"type\">int</span>)shell_NewBuffer);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(src_Section, src_Buffer, src_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//6、存盘</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize = (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData) + (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData);</span><br><span class=\"line\">\tFILE* pfp = fopen(<span class=\"string\">&quot;C:\\\\Documents and Settings\\\\easy\\\\桌面\\\\Shell_test.exe&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\tfwrite(shell_NewBuffer, size, <span class=\"number\">1</span>, pfp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将文件读入内存中，并返回该块内存首地址</span></span><br><span class=\"line\"><span class=\"type\">char</span>* <span class=\"title function_\">ReadMem_Exe</span><span class=\"params\">(<span class=\"type\">char</span>* Filename)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tFILE* fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tfp = fopen(Filename, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!fp)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;无法打开 EXE 文件!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsize = getlength(fp);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* FileBuffer = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\tfread(FileBuffer, size, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FileBuffer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取文件大小</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getlength</span><span class=\"params\">(FILE* fp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">\tsize = ftell(fp);</span><br><span class=\"line\">\tfseek(fp, <span class=\"number\">0</span>, SEEK_SET);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，想要这个文件运行起来后执行我们的加密程序，还需要下面的解密过程。</p>\n<h1 id=\"解密过程的编写\"><a href=\"#解密过程的编写\" class=\"headerlink\" title=\"解密过程的编写\"></a>解密过程的编写</h1><p>解密过程的代码实际上就是壳子程序的代码</p>\n<ol>\n<li><p>获取shell程序的路径</p>\n</li>\n<li><p>获取src的数据</p>\n<p>(1). 定位到shell文件最后一个节</p>\n<p>(2). 将数据取出，并解密</p>\n</li>\n<li><p>拉伸PE：将解密后的PE文件在内存中拉伸，并存储到缓冲区中</p>\n</li>\n<li><p>以挂起方式运行shell程序</p>\n<p>(1). 以挂起方式创建shell进程，并得到主线程的context</p>\n<p>(2). 卸载外壳程序的文件镜像(<strong>ZwUnmapViewOfSection</strong>函数)。卸载内存镜像后，得到一个干净的4GB空间，可以直接从内存启动一个进程，而不像CreateProcess一样涉及从磁盘上读取</p>\n<p>(3). 在指定的位置(src的ImageBase)申请指定大小(src的SizeOfImage)的内存(<strong>VirtualAllocEx</strong>函数)</p>\n<p>(4). 如果创建失败，查看src是否包含重定位表，如果包含重定位表，就在任意位置申请src的SizeOfImage大小的内存，然后修复重定位表</p>\n<p>(5). 如果在指定位置申请内存失败，并且没有重定位表的数据，直接返回失败</p>\n<p>(6). 如果内存申请成功，将新的数据复制到内存中</p>\n<p>(7). 修正运行环境的基址和入口地址</p>\n<p>(8). 恢复主线程执行</p>\n</li>\n</ol>\n<p>示例代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个简单的壳程序</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(linker,<span class=\"string\">&quot;/subsystem:\\&quot;windows\\&quot;  /entry:\\&quot;mainCRTStartup\\&quot;&quot;</span>   ) </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//一、获取SHELL程序的路径</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* shell_path;</span><br><span class=\"line\">\tshell_path = _getcwd(<span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//将上面获得的路径中的&#x27;\\&#x27;变成&#x27;/&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">strlen</span>(shell_path); j++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(shell_path[j] == <span class=\"string\">&#x27;\\\\&#x27;</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tshell_path[j] = <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">strcat</span>(shell_path, <span class=\"string\">&quot;/Shell_test.exe&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//二、获得SRC数据</span></span><br><span class=\"line\">\t<span class=\"comment\">//将shell程序读入内存</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* shell_FileBuffer = ReadMem_Exe(shell_path); </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!shell_FileBuffer)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;读取文件失败\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//定位各个文件头部分</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)shell_FileBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t<span class=\"comment\">//定位最后一个节</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* Last_Section = (<span class=\"type\">char</span>*)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (<span class=\"type\">int</span>)shell_FileBuffer);</span><br><span class=\"line\">\t<span class=\"comment\">//将最后一个节的数据取出来并解密，放进缓冲区中</span></span><br><span class=\"line\">\t<span class=\"comment\">//解密</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x100000</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*(Last_Section + i) = ~(*(Last_Section + i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//定位各个文件头部分</span></span><br><span class=\"line\">\tdos_header* src_pdh = (dos_header*)Last_Section;</span><br><span class=\"line\">\tpe_header* src_pph = (pe_header*)(src_pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)src_pdh);</span><br><span class=\"line\">\toptional_pe_header* src_poph = (optional_pe_header*)((<span class=\"type\">int</span>)(src_pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)src_pdh);</span><br><span class=\"line\">\t<span class=\"type\">int</span> src_size = src_poph-&gt;SizeOfImage;\t\t\t\t\t <span class=\"comment\">//获取src的SizeOfImage</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_ImageBase = (<span class=\"type\">char</span>*)src_poph-&gt;ImageBase;        <span class=\"comment\">//获取src的ImageBase</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_FileBuffer = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(src_size);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(src_FileBuffer, Last_Section, src_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//三、拉伸PE</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_ImageBuffer = File_To_Image(src_FileBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//四、以挂起方式运行Shell进程，注意是壳子本身这个进程!</span></span><br><span class=\"line\">\t<span class=\"comment\">//0、以挂起方式创建Shell进程</span></span><br><span class=\"line\">\tSTARTUPINFO ie_si = &#123;<span class=\"number\">0</span>&#125;;   \t\t</span><br><span class=\"line\">\tPROCESS_INFORMATION ie_pi;\t\t</span><br><span class=\"line\">\tie_si.cb = <span class=\"keyword\">sizeof</span>(ie_si);\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tCreateProcess(</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, </span><br><span class=\"line\">\t\tshell_path, </span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,  \t\t</span><br><span class=\"line\">\t\tFALSE,                   \t\t</span><br><span class=\"line\">\t\tCREATE_SUSPENDED,     \t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,                    \t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,                    \t\t</span><br><span class=\"line\">\t\t&amp;ie_si,                  \t\t</span><br><span class=\"line\">\t\t&amp;ie_pi                  \t\t</span><br><span class=\"line\">\t\t);\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、获得外壳程序的Context，留着后面备用</span></span><br><span class=\"line\">\tCONTEXT context;</span><br><span class=\"line\">\tcontext.ContextFlags = CONTEXT_FULL;</span><br><span class=\"line\">\t::GetThreadContext(ie_pi.hThread,&amp;context);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、卸载外壳程序的文件镜像(ZwUnmapViewOfSection)</span></span><br><span class=\"line\">\t<span class=\"comment\">// 获取 ZwUnmapViewOfSection 函数指针</span></span><br><span class=\"line\">\tHMODULE hModuleNt = LoadLibrary(<span class=\"string\">&quot;ntdll.dll&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hModuleNt == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;获取ntdll句柄失败\\n&quot;</span>);</span><br><span class=\"line\">\t\tTerminateThread(ie_pi.hThread, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> <span class=\"title function_\">DWORD</span><span class=\"params\">(WINAPI *_TZwUnmapViewOfSection)</span><span class=\"params\">(HANDLE, PVOID)</span>;</span><br><span class=\"line\">\t_TZwUnmapViewOfSection pZwUnmapViewOfSection = (_TZwUnmapViewOfSection)GetProcAddress(hModuleNt, <span class=\"string\">&quot;ZwUnmapViewOfSection&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pZwUnmapViewOfSection == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;获取 ZwUnmapViewOfSection 函数指针失败\\n&quot;</span>);</span><br><span class=\"line\">\t\tTerminateThread(ie_pi.hThread, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpZwUnmapViewOfSection(ie_pi.hProcess, GetModuleHandle(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//3、在指定的位置(src的ImageBase)申请指定大小(src的SizeOfImage)的内存(VirtualAllocEx)</span></span><br><span class=\"line\">\tLPVOID pImageBase = VirtualAllocEx(ie_pi.hProcess, (LPVOID)src_ImageBase, src_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pImageBase != src_ImageBase)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;VirtualAllocEx 错误码: 0x%X\\n&quot;</span>, GetLastError()); <span class=\"comment\">// 0x1e7 试图访问无效地址</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;申请到的指针: 0x%X, 期望的地址: 0x%X\\n&quot;</span>, (DWORD)pImageBase, src_ImageBase);</span><br><span class=\"line\">\t\tTerminateThread(ie_pi.hThread, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//4、如果成功，将Src的PE文件拉伸 复制到该空间中</span></span><br><span class=\"line\">\t<span class=\"comment\">//memcpy(src_ImageBase, src_ImageBuffer, src_size);</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> flag = WriteProcessMemory(ie_pi.hProcess, (LPVOID)src_ImageBase, src_ImageBuffer, src_size, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!flag)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;写入源程序内存镜像失败\\n&quot;</span>);</span><br><span class=\"line\">\t\tTerminateThread(ie_pi.hThread, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//5、修改外壳程序的Context</span></span><br><span class=\"line\">\t<span class=\"comment\">//将Context的OPE 改成 Src的OEP</span></span><br><span class=\"line\">\tcontext.Eax = (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)(src_poph-&gt;AddressOfEntryPoint + src_ImageBase);</span><br><span class=\"line\">\t<span class=\"comment\">//将Context的ImageBase 改成 Src的ImageBase</span></span><br><span class=\"line\">\tWriteProcessMemory(ie_pi.hProcess, (LPVOID)(context.Ebx + <span class=\"number\">8</span>), &amp;src_ImageBase, <span class=\"number\">4</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//6、设置Context 并恢复主线程</span></span><br><span class=\"line\">\tcontext.ContextFlags = CONTEXT_FULL;</span><br><span class=\"line\">\tSetThreadContext(ie_pi.hThread, &amp;context);</span><br><span class=\"line\">\tResumeThread(ie_pi.hThread);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/2.PNG\"></p>\n<p>下面的ShellCode.exe即为我们的壳子程序，MY_PE by win32.exe为我们要保护的程序，加壳后生成的程序为Shell_test.exe，双击这个生成的程序，发现正常运行我们被保护的程序：</p>\n<p><img src=\"/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/3.PNG\"></p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"PE研究：移动导出表与重定位表","url":"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/","content":"<p>在一个PE文件中，各种表是由编译器生成的，表里面存储了非常重要的信息。在程序启动的时候，系统会根据这些表做各种初始化的工作。但是假如有一个小需求，需要对.exe文件的二进制代码进行加密来保护程序，但问题是：这些表的信息和程序的代码与数据都是混合在一起的，一旦被加密，系统也无法准确定位这些表，也就无法做初始化的工作，程序也就无法启动。因此，移动各种表，是对程序加密与解密的基础。</p>\n<span id=\"more\"></span>\n\n<p>上一章节学习了导出表与重定位表，本节就来移动它们。</p>\n<h1 id=\"移动导出表\"><a href=\"#移动导出表\" class=\"headerlink\" title=\"移动导出表\"></a>移动导出表</h1><p>先来看一张移动导出表的结构图</p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/1.PNG\"></p>\n<p>这里给出一种较为合理的移动方法(注意本方法是在FileBuffer中进行的，省去了拉伸的步骤)：</p>\n<p>1、在DLL中新增一个节，并返回新增后的FOA。这个节里面存放移动出来的各种东西。</p>\n<p>2、在新增节开头复制AddressOfFunctions表，长度为4*NumberOfFunctions。</p>\n<p>3、紧接着复制AddressOfNameOrdinals表，长度为2*NumberOfNames。</p>\n<p>4、紧接着复制AddressOfNames表，长度为4*NumberOfNames。</p>\n<p>5、紧接着复制所有函数名，复制的时候直接修复名称地址表，指向新移动的位置。</p>\n<p>6、在最后一个函数名后面复制导出表结构。</p>\n<p>7、修复新的导出表结构指向三个表的地址，指向新的表。</p>\n<p>8、修复项目录中的值，指向新的导出表结构。</p>\n<p>下面给出实现代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 移动导出表, 注意修复地址时转换成RVA */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Move_Export</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//第一步：在DLL中新增一个节，并返回新增后的FOA</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = <span class=\"built_in\">file_to_image</span>();</span><br><span class=\"line\">    <span class=\"comment\">//增加节的函数在前面的章节有讲过</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer2 = <span class=\"built_in\">AddSection</span>(ImageBuffer, <span class=\"number\">4096</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* NewBuffer = <span class=\"built_in\">image_to_file</span>(ImageBuffer2);</span><br><span class=\"line\"></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)NewBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\timage_export_directory* pied = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* export_rva = (<span class=\"type\">char</span>*)poph-&gt;DataDirectory[<span class=\"number\">0</span>].VirtualAddress;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* export_foa = <span class=\"built_in\">RVA_TO_FOA</span>(export_rva);</span><br><span class=\"line\">\tpied = (image_export_directory*)(export_foa + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FOA_add = (<span class=\"type\">char</span>*)(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第二步：复制AddressOfFunctions表</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_AddressOfFunctions = (<span class=\"type\">char</span>*)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)pied-&gt;AddressOfFunctions) + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_AddressOfFunctions = (<span class=\"type\">char</span>*)(FOA_add + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_AddressOfFunctions, src_AddressOfFunctions, <span class=\"number\">4</span>*pied-&gt;NumberOfFunctions);  <span class=\"comment\">//长度：4*NumberOfFunctions</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第三步：复制AddressOfNameOrdinals表</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_AddressOfNameOrdinals = (<span class=\"type\">char</span>*)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)pied-&gt;AddressOfNameOrdinals) + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_AddressOfNameOrdinals = (<span class=\"type\">char</span>*)(FOA_add + (<span class=\"type\">int</span>)NewBuffer + <span class=\"number\">4</span>*pied-&gt;NumberOfFunctions);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_AddressOfNameOrdinals, src_AddressOfNameOrdinals, <span class=\"number\">2</span>*pied-&gt;NumberOfNames);  <span class=\"comment\">//长度：NumberOfNames*2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第四步：复制AddressOfNames表</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_AddressOfNames = (<span class=\"type\">char</span>*)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)pied-&gt;AddressOfNames) + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_AddressOfNames = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)des_AddressOfNameOrdinals + <span class=\"number\">2</span>*pied-&gt;NumberOfNames);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_AddressOfNames, src_AddressOfNames, <span class=\"number\">4</span>*pied-&gt;NumberOfNames);  <span class=\"comment\">//长度：NumberOfNames*4</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第五步：复制所有的函数名</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> len = <span class=\"number\">0</span>;           <span class=\"comment\">//记录每一个函数名长度</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> count = <span class=\"number\">0</span>;         <span class=\"comment\">//记录全部函数名总长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; pied-&gt;NumberOfNames - <span class=\"number\">1</span>; i++)     <span class=\"comment\">//复制除了最后一个函数名的函数名</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* src_name = (<span class=\"type\">char</span>*)((<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)*((<span class=\"type\">int</span>*)src_AddressOfNames + i)) + (<span class=\"type\">int</span>)NewBuffer));</span><br><span class=\"line\">\t\t<span class=\"type\">char</span>* des_name = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)des_AddressOfNames + <span class=\"number\">4</span>*pied-&gt;NumberOfNames + len);</span><br><span class=\"line\">\t\tlen = *((<span class=\"type\">int</span>*)src_AddressOfNames + i + <span class=\"number\">1</span>) - *((<span class=\"type\">int</span>*)src_AddressOfNames + i);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(des_name, src_name, len);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span>* New_Addressname = ((<span class=\"type\">int</span>*)des_AddressOfNames + i);</span><br><span class=\"line\">\t\t*New_Addressname = (<span class=\"type\">int</span>)((<span class=\"type\">int</span>)des_name - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress);   <span class=\"comment\">//修复新的函数名称地址表,转换成RVA</span></span><br><span class=\"line\">\t\tcount += len;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_last_func_name = (<span class=\"type\">char</span>*)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)(*(<span class=\"type\">int</span>*)src_AddressOfNames)) + (<span class=\"type\">int</span>)NewBuffer) + count;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_last_func_name = (<span class=\"type\">char</span>*)((<span class=\"type\">int</span>)des_AddressOfNames + <span class=\"number\">4</span>*pied-&gt;NumberOfNames) + count;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* Last_New_AddressesName = (<span class=\"type\">int</span>*)des_AddressOfNames + pied-&gt;NumberOfNames - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t*Last_New_AddressesName = (<span class=\"type\">int</span>)des_last_func_name - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;   <span class=\"comment\">//修复最后一个函数名称地址表,转换成RVA</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*src_last_func_name)      <span class=\"comment\">//复制最后一个函数名</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*des_last_func_name = *src_last_func_name;</span><br><span class=\"line\">\t\tsrc_last_func_name++;</span><br><span class=\"line\">\t\tdes_last_func_name++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*des_last_func_name = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第六步：复制IMAGE_EXPORT_DIRECTORY导出表结构</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_IMAGE_EXPORT_DIRECTORY = (<span class=\"type\">char</span>*)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)(poph-&gt;DataDirectory[<span class=\"number\">0</span>].VirtualAddress)) + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_IMAGE_EXPORT_DIRECTORY = des_last_func_name + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_IMAGE_EXPORT_DIRECTORY, src_IMAGE_EXPORT_DIRECTORY, <span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第七步：修复IMAGE_EXPORT_DIRECTORY结构中的三个表地址</span></span><br><span class=\"line\">\timage_export_directory* New_IMAGE_EXPORT_DIRECTORY = (image_export_directory*)des_IMAGE_EXPORT_DIRECTORY;</span><br><span class=\"line\">\tNew_IMAGE_EXPORT_DIRECTORY-&gt;AddressOfFunctions = (<span class=\"type\">int</span>)des_AddressOfFunctions - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\">\tNew_IMAGE_EXPORT_DIRECTORY-&gt;AddressOfNameOrdinals = (<span class=\"type\">int</span>)des_AddressOfNameOrdinals - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\">\tNew_IMAGE_EXPORT_DIRECTORY-&gt;AddressOfNames = (<span class=\"type\">int</span>)des_AddressOfNames - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第八步：修复目录项中的值，指向新的IMAGE_EXPORT_DIRECTORY,注意转换成RVA</span></span><br><span class=\"line\">\tpoph-&gt;DataDirectory[<span class=\"number\">0</span>].VirtualAddress = </span><br><span class=\"line\">\t\t(<span class=\"type\">int</span>)des_IMAGE_EXPORT_DIRECTORY - (<span class=\"type\">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData</span><br><span class=\"line\">\t\t+ (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//存盘</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize = (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData) + (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData);</span><br><span class=\"line\">\tFILE* pfp = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;C:\\\\Documents and Settings\\\\easy\\\\桌面\\\\moveexport.dll&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">fwrite</span>(NewBuffer, size, <span class=\"number\">1</span>, pfp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>移动表前的DLL的节与导出函数如下：</p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/2.PNG\"></p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/3.PNG\" alt=\"3\"></p>\n<p>移动之后：</p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/4.PNG\"></p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/5.PNG\"></p>\n<h1 id=\"移动重定位表\"><a href=\"#移动重定位表\" class=\"headerlink\" title=\"移动重定位表\"></a>移动重定位表</h1><p>重定位表的移动相对于导出表比较简单，直接上代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 移动重定向表 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Move_Reloc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//第一步：在DLL中新增一个节，并返回新增后的FOA</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = <span class=\"built_in\">file_to_image</span>();</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer2 = <span class=\"built_in\">AddSection</span>(ImageBuffer, <span class=\"number\">20480</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* NewBuffer = <span class=\"built_in\">image_to_file</span>(ImageBuffer2);</span><br><span class=\"line\"></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)NewBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* basereloc_rva = (<span class=\"type\">char</span>*)poph-&gt;DataDirectory[<span class=\"number\">5</span>].VirtualAddress;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* basereloc_foa = <span class=\"built_in\">RVA_TO_FOA</span>(basereloc_rva);</span><br><span class=\"line\">\timage_base_relocation* pibr = (image_base_relocation*)(basereloc_foa + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FOA_add = (<span class=\"type\">char</span>*)(pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第二步：复制重定向表</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* src_reloc = (<span class=\"type\">char</span>*)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)poph-&gt;DataDirectory[<span class=\"number\">5</span>].VirtualAddress) + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* des_reloc = (<span class=\"type\">char</span>*)(FOA_add + (<span class=\"type\">int</span>)NewBuffer);</span><br><span class=\"line\">\t<span class=\"type\">int</span> reloc_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(pibr-&gt;VirtualAddress !=<span class=\"number\">0</span> &amp;&amp; pibr-&gt;SizeOfBlock != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treloc_size += pibr-&gt;SizeOfBlock;</span><br><span class=\"line\">\t\tpibr = (image_base_relocation*)((<span class=\"type\">char</span>*)pibr + pibr-&gt;SizeOfBlock);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpibr = (image_base_relocation*)(basereloc_foa + (<span class=\"type\">int</span>)NewBuffer);  <span class=\"comment\">//将指针重新指向第一个重定向块</span></span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(des_reloc, src_reloc, reloc_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第三步：修复目录项中的值，指向新的IMAGE_BASE_RELOCATION, 注意转换成RVA</span></span><br><span class=\"line\">\tpoph-&gt;DataDirectory[<span class=\"number\">5</span>].VirtualAddress = (<span class=\"type\">int</span>)FOA_add - (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData</span><br><span class=\"line\">\t\t+ (pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;VirtualAddress;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//存盘</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize = (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData) + (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData);</span><br><span class=\"line\">\tFILE* pfp = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;C:\\\\Documents and Settings\\\\easy\\\\桌面\\\\reloc.dll&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">fwrite</span>(NewBuffer, size, <span class=\"number\">1</span>, pfp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"修复重定位表\"><a href=\"#修复重定位表\" class=\"headerlink\" title=\"修复重定位表\"></a>修复重定位表</h1><p>这里做一个比较有意思的小实验，来加深一下对重定位表的理解。</p>\n<p>我们知道，一个DLL的ImageBase被另一个DLL占据的时候，系统会根据64KB对齐将这个DLL往下”贴”，并根据重定位表来修复需要修复的全局变量地址。现在我们来模拟操作系统在这个过程中做的事情：自己修改DLL的ImageBase并修复重定位表，然后存盘，使新的DLL仍然可以使用。</p>\n<p>先上代码，然后做解释：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 更改ImageBase， 并修复重定表 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Update_Reloc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 1. 将文件读入内存 */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* FileBuffer = <span class=\"built_in\">Read_exe</span>();</span><br><span class=\"line\">\t<span class=\"type\">char</span>* ImageBuffer = <span class=\"built_in\">file_to_image</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 2. 定义并初始化各头结构指针 */</span></span><br><span class=\"line\">\tdos_header* pdh = (dos_header*)FileBuffer;</span><br><span class=\"line\">\tpe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class=\"number\">4</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\toptional_pe_header* poph = (optional_pe_header*)((<span class=\"type\">int</span>)(pdh-&gt;e_lfanew) + <span class=\"number\">4</span> + <span class=\"number\">20</span> + (<span class=\"type\">int</span>)pdh);</span><br><span class=\"line\">\timage_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class=\"type\">int</span>)poph);</span><br><span class=\"line\">\t<span class=\"type\">char</span>* basereloc_rva = (<span class=\"type\">char</span>*)poph-&gt;DataDirectory[<span class=\"number\">5</span>].VirtualAddress;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* basereloc_foa = <span class=\"built_in\">RVA_TO_FOA</span>(basereloc_rva);</span><br><span class=\"line\">\timage_base_relocation* pibr = (image_base_relocation*)(basereloc_foa + (<span class=\"type\">int</span>)FileBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 3. 修改ImageBase, 注意模块对齐方式为10000H */</span></span><br><span class=\"line\">\tpoph-&gt;ImageBase += <span class=\"number\">0x50000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 4. 修改重定位表 */</span></span><br><span class=\"line\">\t<span class=\"comment\">//image_base_relocation* New_preloc = (image_base_relocation*)(FOA_add + (int)FileBuffer);</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(pibr-&gt;VirtualAddress != <span class=\"number\">0</span> &amp;&amp; pibr-&gt;SizeOfBlock != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (pibr-&gt;SizeOfBlock - <span class=\"number\">8</span>) / <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">short</span>* item = (<span class=\"type\">short</span>*)((<span class=\"type\">char</span>*)pibr + <span class=\"number\">8</span>);   <span class=\"comment\">//新重定位表具体项指针</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((*(item + i) &amp; <span class=\"number\">0xF000</span>) &gt;&gt; <span class=\"number\">12</span> == <span class=\"number\">3</span>)             <span class=\"comment\">//高4位为3才有意义</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> rva = (<span class=\"type\">int</span>)pibr-&gt;VirtualAddress + (*(item + i) &amp; <span class=\"number\">0x0FFF</span>);  <span class=\"comment\">//计算绝对地址RVA</span></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> foa = (<span class=\"type\">int</span>)(<span class=\"built_in\">RVA_TO_FOA</span>((<span class=\"type\">char</span>*)rva));</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span>* change_addr = (<span class=\"type\">int</span>*)((<span class=\"type\">int</span>)FileBuffer + foa);</span><br><span class=\"line\">\t\t\t\t*change_addr += <span class=\"number\">0x50000</span>;      <span class=\"comment\">//直接修复绝对地址， 而不是修改重定位表</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpibr = (image_base_relocation*)((<span class=\"type\">char</span>*)pibr + pibr-&gt;SizeOfBlock);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//存盘</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsize = (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;PointerToRawData) + (<span class=\"type\">int</span>)((pish + pph-&gt;NumberOfSection - <span class=\"number\">1</span>)-&gt;SizeOfRawData);</span><br><span class=\"line\">\tFILE* pfp = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;C:\\\\Documents and Settings\\\\easy\\\\桌面\\\\reloc2.dll&quot;</span>, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">fwrite</span>(FileBuffer, size, <span class=\"number\">1</span>, pfp);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在来说明一下修复重定位表的原理，正常情况下，系统会根据重定位表计算出全局变量的地址并使用它。当ImageBase改变的时候，系统会原来写死的地址加上新旧Image Base的差值。因此，我们这里的修复重定位表，并不是修改表中的VirtualAddress或者具体项，而是先计算出来需要修复的绝对地址(FOA+FileBuffer)，然后用这个绝对地址加上差值(我一开始写代码的时候，这个问题也困扰了我很久，网上资料也很少有对修复重定位表解释明白的)。因此在整个过程中，重定位表是没有改变数据的，改变的是根据重定位表找到的数据的地址。</p>\n<p>实验结果：</p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/7.PNG\"></p>\n<p><img src=\"/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/6.PNG\"></p>\n<p>修改ImageBase后的DLL仍然可以使用。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"Win32：挂起方式创建进程","url":"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/","content":"<p>上节课讲解了CreateProcess函数，并介绍了其中的几个参数。这节课来介绍另外几个参数，并且会讲解如何以挂起方式创建进程，为我们下一节课写一个简单的加密壳打下基础。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"进程的创建\"><a href=\"#进程的创建\" class=\"headerlink\" title=\"进程的创建\"></a>进程的创建</h1><p>再来回顾一下CreateProcess函数的定义：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">BOOL <span class=\"title function_\">CreateProcess</span><span class=\"params\">(\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"params\">  LPCTSTR lpApplicationName,                 <span class=\"comment\">// name of executable module\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPTSTR lpCommandLine,                      <span class=\"comment\">// command line string\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class=\"comment\">// SD\t\t\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPSECURITY_ATTRIBUTES lpThreadAttributes,  <span class=\"comment\">// SD\t\t\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  BOOL bInheritHandles,                      <span class=\"comment\">// handle inheritance option\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  DWORD dwCreationFlags,                     <span class=\"comment\">// creation flags\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPVOID lpEnvironment,                      <span class=\"comment\">// new environment block\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPCTSTR lpCurrentDirectory,                <span class=\"comment\">// current directory name\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPSTARTUPINFO lpStartupInfo,               <span class=\"comment\">// startup information\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPPROCESS_INFORMATION lpProcessInformation <span class=\"comment\">// process information\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;\t\t\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>先来看lpProcessAttributes和lpThreadAttributes这两个参数。</p>\n<p>与CreateEvent函数类似：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">HANDLE  <span class=\"title function_\">CreateEvent</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">　　LPSECURITY_ATTRIBUTES  lpEventAttributes,\t<span class=\"comment\">// 安全属性 </span></span></span><br><span class=\"line\"><span class=\"params\">　　BOOL  bManualReset,\t\t\t\t<span class=\"comment\">// 复位方式</span></span></span><br><span class=\"line\"><span class=\"params\">　　BOOL  bInitialState,\t\t\t<span class=\"comment\">// 初始状态</span></span></span><br><span class=\"line\"><span class=\"params\">　　LPCTSTR  lpName \t\t\t\t<span class=\"comment\">// 对象名称 </span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>都是创建内核对象的函数，CreateEvent函数的的lpEventAttributes参数代表着这个内核对象能否被子进程继承。同理，CreateProcess函数中的lpProcessAttributes和lpThreadAttributes参数，代表着进程内核对象与线程内核对象能否被继承。</p>\n<p>我们知道，在父进程被创建时，在它的高2G会生成一张空的句柄表，当父进程执行CreateProcess函数创建子进程时，会在这张句柄表里写入两项内容，一个是子进程的句柄，一个是子进程主线程的句柄。当这两个参数被赋值后，子进程就可以继承这两个句柄。下面看一个程序例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进程A代码</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> szBuffer[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> szHandle[<span class=\"number\">8</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tSECURITY_ATTRIBUTES ie_sa_p;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tie_sa_p.nLength = <span class=\"keyword\">sizeof</span>(ie_sa_p);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tie_sa_p.lpSecurityDescriptor = <span class=\"literal\">NULL</span>;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tie_sa_p.bInheritHandle = TRUE; \t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tSECURITY_ATTRIBUTES <span class=\"type\">ie_sa_t</span>;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">ie_sa_t</span>.nLength = <span class=\"keyword\">sizeof</span>(<span class=\"type\">ie_sa_t</span>);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">ie_sa_t</span>.lpSecurityDescriptor = <span class=\"literal\">NULL</span>;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">ie_sa_t</span>.bInheritHandle = TRUE; \t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//创建一个可以被继承的内核对象,此处是个进程\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tSTARTUPINFO ie_si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tPROCESS_INFORMATION ie_pi;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tie_si.cb = <span class=\"keyword\">sizeof</span>(ie_si);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tTCHAR szCmdline[] =TEXT(<span class=\"string\">&quot;c://program files//internet explorer//iexplore.exe&quot;</span>);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tCreateProcess(\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tszCmdline, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&amp;ie_sa_p, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&amp;<span class=\"type\">ie_sa_t</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tTRUE, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tCREATE_NEW_CONSOLE, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, &amp;ie_si, &amp;ie_pi); \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//组织命令行参数\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(szHandle,<span class=\"string\">&quot;%x %x&quot;</span>,ie_pi.hProcess,ie_pi.hThread);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(szBuffer,<span class=\"string\">&quot;C:/guaqitest_B.exe %s&quot;</span>,szHandle);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//定义创建进程需要用的结构体\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tSTARTUPINFO si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tPROCESS_INFORMATION pi;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tsi.cb = <span class=\"keyword\">sizeof</span>(si);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//创建子进程\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tBOOL res = CreateProcess(\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tszBuffer, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tTRUE, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tCREATE_NEW_CONSOLE, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, &amp;si, &amp;pi); \t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进程B代码</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDWORD dwProcessHandle = <span class=\"number\">-1</span>;\t\t\t\t\t\t</span><br><span class=\"line\">\tDWORD dwThreadHandle = <span class=\"number\">-1</span>;\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> szBuffer[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(szBuffer,argv[<span class=\"number\">1</span>],<span class=\"number\">8</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">sscanf</span>(szBuffer,<span class=\"string\">&quot;%x&quot;</span>,&amp;dwProcessHandle);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(szBuffer,<span class=\"number\">0</span>,<span class=\"number\">256</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(szBuffer,argv[<span class=\"number\">2</span>],<span class=\"number\">8</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">sscanf</span>(szBuffer,<span class=\"string\">&quot;%x&quot;</span>,&amp;dwThreadHandle);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;获取IE进程、主线程句柄\\n&quot;</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\tSleep(<span class=\"number\">2000</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//挂起主线程\t\t\t\t\t\t</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;挂起主线程\\n&quot;</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t::SuspendThread((HANDLE)dwThreadHandle);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\tSleep(<span class=\"number\">10000</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//恢复主线程\t\t\t\t\t\t</span></span><br><span class=\"line\">\t::ResumeThread((HANDLE)dwThreadHandle);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;恢复主线程\\n&quot;</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\tSleep(<span class=\"number\">10000</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//关闭ID进程\t\t\t\t\t\t</span></span><br><span class=\"line\">\t::TerminateProcess((HANDLE)dwProcessHandle,<span class=\"number\">1</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t::WaitForSingleObject((HANDLE)dwProcessHandle, INFINITE);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ID进程已经关闭.....\\n&quot;</span>);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分析一下上面代码，在进程A中，首先创建了一个浏览器子进程，并设置了浏览器进程与其主进程的句柄可以被继承，这时候在A进程的句柄表中就会生成浏览器进程与其主线程的句柄。然后A进程又创建了一个子进程B，B子进程继承了A的句柄表，这时候在B的句柄表中也存在浏览器进程与其主线程的句柄，并且A通过命令行参数将这两个句柄值传递给了B子进程，这时候B进程就可以通过这两个句柄值对浏览器进程进行控制了。在B进程中，可以将前面的浏览器进程做挂起、恢复和结束等操作。如果B没有继承这两个句柄，是无法通过这两个值对浏览器进程进行控制的。</p>\n<p>接下来再看CreateProcess函数的另一个参数lpCurrentDirectory，这个参数可以获取程序的当前目录。</p>\n<p>通过下面的例子来说明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进程A代码，位于C：/1文件夹下</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> szBuffer[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(szBuffer,<span class=\"string\">&quot;C:/B.exe&quot;</span>);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//定义创建进程需要用的结构体\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tSTARTUPINFO si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tPROCESS_INFORMATION pi;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tsi.cb = <span class=\"keyword\">sizeof</span>(si);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//创建子进程\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tBOOL res = CreateProcess(\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tszBuffer, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tTRUE, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\tCREATE_NEW_CONSOLE, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t&amp;si, &amp;pi); \t\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进程B代码，位于位于C：/下</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> szBuffer[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t</span><br><span class=\"line\">\tGetCurrentDirectory(<span class=\"number\">256</span>,szBuffer);\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,szBuffer);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分析一下代码，在父进程A中创建子进程B，进程B的任务是打印进程所在的目录位置。当父进程A中CreateProcess函数的参数lpCurrentDirectory设置为NULL时，结果如下：</p>\n<p><img src=\"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/1.PNG\"></p>\n<p>可以看到，lpCurrentDirectory设置为NULL时，子进程B打印的是父进程A的目录位置。而当我们将这个参数设置为一个存在的目录时，打印的结果就是我们设定的目录，结果如下图：</p>\n<p><img src=\"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/2.PNG\"></p>\n<p>这个当前目录的参数很多人会觉得无所谓，但这是我们后面写壳的一个很重要的地方。</p>\n<h1 id=\"以挂起方式创建进程\"><a href=\"#以挂起方式创建进程\" class=\"headerlink\" title=\"以挂起方式创建进程\"></a>以挂起方式创建进程</h1><p>最后来看一下我们要学习的CreateProcess函数的最后一个参数dwCreationFlags。在前面的程序中，我们把这个参数的值赋成了CREATE_NEW_CONSOLE，这样一来，对于控制台程序来说，子进程就会将它打印的东西打印到一个新的控制台中。而当dwCreationFlags赋值为NULL时，子进程就会与父进程共用一个控制台窗口。</p>\n<p>而当我们把dwCreationFlags这个参数赋值成CREATE_SUSPENDED时，就是我们要讲的以挂起的方式创建进程。</p>\n<p>先来看下面的程序：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    STARTUPINFO ie_si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t</span><br><span class=\"line\">    PROCESS_INFORMATION ie_pi;\t\t\t\t</span><br><span class=\"line\">    ie_si.cb = <span class=\"keyword\">sizeof</span>(ie_si);\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    TCHAR szBuffer[<span class=\"number\">256</span>] = <span class=\"string\">&quot;C:\\\\1.exe&quot;</span>;\t\t\t\t</span><br><span class=\"line\">    CreateProcess(\t\t\t\t</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,                  \t\t\t</span><br><span class=\"line\">        szBuffer,                \t\t\t</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>, \t\t\t</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,  \t\t\t</span><br><span class=\"line\">        FALSE,                   \t\t\t</span><br><span class=\"line\">        CREATE_SUSPENDED, \t<span class=\"comment\">//挂起    \t\t\t</span></span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,                    \t\t\t</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,                    \t\t\t</span><br><span class=\"line\">        &amp;ie_si,                  \t\t\t</span><br><span class=\"line\">        &amp;ie_pi                  \t\t\t</span><br><span class=\"line\">        );\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//恢复执行\t\t\t\t</span></span><br><span class=\"line\">    ResumeThread(ie_pi.hThread);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个程序首先以挂起的方式创建1.exe进程，然后立即恢复该进程，因此当这个程序一运行，就相当于正常启动了1.exe这个进程，观察该进程的运行状态以及模块状态如下：</p>\n<p><img src=\"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/3.png\"></p>\n<p><img src=\"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/4.png\"></p>\n<p>可以看到，当进程正常创建后，内存使用为1568K（正常大小），并且也可以遍历到该进程的模块。</p>\n<p>接下来，在ResumeThread(ie_pi.hThread)处下断点，相当于让1.exe进程以挂起方式创建，观察结果：</p>\n<p><img src=\"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/5.png\"></p>\n<p><img src=\"/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/6.png\"></p>\n<p>可以看到，以挂起方式创建进程后，进程被挂起没有运行，在任务管理器中可以看到该进程，但是大小却只有76K，远小于正常执行的大小1568K，同时还可以看到该进程的模块没有被加载。这意味着此时这个进程还是一个空壳。</p>\n<p>那是否可以这样想，当我们以挂起的方式创建一个进程后，通过修改这个空壳的内容，将我们自己的程序拉伸后替换原来外壳程序的内容，那么再恢复这个进程后，表面上看是运行的一开始创建的进程，但实际上运行的内容却是我们刚刚替换的自己的程序。（这也是我们后面写壳的思路）</p>\n<p>那么既然要替换原程序的内容，我们就得需要修改如下两个点：ImageBase和程序入口点。具体怎么修改，下节课讲制作壳程序的原理的时候再详细说明，这里先说下如何获取外壳程序进程的ImageBase和程序入口点。看下面的程序：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    STARTUPINFO ie_si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t\t\t</span><br><span class=\"line\">    PROCESS_INFORMATION ie_pi;\t\t\t\t\t\t</span><br><span class=\"line\">    ie_si.cb = <span class=\"keyword\">sizeof</span>(ie_si);\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//以挂起的方式创建进程\t\t\t\t\t\t</span></span><br><span class=\"line\">    TCHAR szBuffer[<span class=\"number\">256</span>] = <span class=\"string\">&quot;C:\\\\ipmsg.exe&quot;</span>;\t\t\t\t\t\t</span><br><span class=\"line\">    CreateProcess(\t\t\t\t\t\t</span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,                    <span class=\"comment\">// name of executable module\t\t\t\t\t</span></span><br><span class=\"line\">        szBuffer,                <span class=\"comment\">// command line string\t\t\t\t\t</span></span><br><span class=\"line\">        <span class=\"literal\">NULL</span>, \t\t\t\t\t <span class=\"comment\">// SD</span></span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,  \t\t             <span class=\"comment\">// SD\t\t\t</span></span><br><span class=\"line\">        FALSE,                   <span class=\"comment\">// handle inheritance option\t\t\t\t\t</span></span><br><span class=\"line\">        CREATE_SUSPENDED,     \t <span class=\"comment\">// creation flags  \t\t\t\t</span></span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,                    <span class=\"comment\">// new environment block\t\t\t\t\t</span></span><br><span class=\"line\">        <span class=\"literal\">NULL</span>,                    <span class=\"comment\">// current directory name\t\t\t\t\t</span></span><br><span class=\"line\">        &amp;ie_si,                  <span class=\"comment\">// startup information\t\t\t\t\t</span></span><br><span class=\"line\">        &amp;ie_pi                   <span class=\"comment\">// process information\t\t\t\t\t</span></span><br><span class=\"line\">        );\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    CONTEXT contx;  \t\t\t\t\t\t</span><br><span class=\"line\">    contx.ContextFlags = CONTEXT_FULL;  \t\t\t\t\t\t</span><br><span class=\"line\">    GetThreadContext(ie_pi.hThread, &amp;contx);\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取入口点\t\t\t\t\t\t</span></span><br><span class=\"line\">    DWORD dwEntryPoint = contx.Eax;\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取ImageBase\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"type\">char</span>* baseAddress = (CHAR *) contx.Ebx+<span class=\"number\">8</span>;\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(szBuffer,<span class=\"number\">0</span>,<span class=\"number\">256</span>);\t\t\t\t\t\t</span><br><span class=\"line\">    ReadProcessMemory(ie_pi.hProcess,baseAddress,szBuffer,<span class=\"number\">4</span>,<span class=\"literal\">NULL</span>);\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    ResumeThread(ie_pi.hThread);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个程序中，我们想要获取目标进程ipmsg.exe的入口点和ImageBase，可以通过以挂起的方式创建目标进程，然后获取此时目标进程的上下文（通过GetThreadContext函数）。注意，目标进程的<strong>入口点</strong>保存在contx.Eax中，<strong>ImageBase的地址</strong>保存在contx.Ebx+8中，这两个值目前记住就好，想要了解的话需要涉及内核中PEB的知识。另外需要注意的是，contx.Eax中保存的是程序入口点，这个值就是目标程序的入口点，可以直接打印；而contx.Ebx+8中存放的是目标进程ImageBase的地址，但是不能简单的通过*（contx.Ebx+8）获取，因为这个地址不在当前的程序中，而是在目标进程ipmsg.exe中，所以可以通过ReadProcessMemory函数来读取目标进程的地址来获取。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"Win32：线程控制与CONTEXT结构","url":"/2022/05/10/Win32%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8ECONTEXT%E7%BB%93%E6%9E%84/","content":"<p>线程是Windows系统的基础，一个进程里面至少有一个线程。有关线程的创建方法，本文不做赘述。在创建完线程后，如何才能使该线程结束或是暂停呢？本文将对windows线程进行剖析。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"线程控制\"><a href=\"#线程控制\" class=\"headerlink\" title=\"线程控制\"></a>线程控制</h1><p><strong>终止线程</strong></p>\n<p>1、::ExitThread(DWORD dwExitCode);</p>\n<p>每一个线程都会另外开辟一个堆栈，而这种方式会释放掉当前线程的堆栈，但是在线程中new申请堆空间的内存不会被释放掉。参数dwExitCode可以指定线程的退出码，也就是线程的返回值。该值可以通过GetExitCodeThread函数获取对应线程的退出码。这种方式为<strong>同步调用</strong>。</p>\n<p>2、线程函数返回</p>\n<p>该方式指线程自己执行完毕结束，结束前有机会做任何事，例如释放申请的堆空间。这种方式是推荐使用的最好的方式。</p>\n<p>3、::TerminateThread(hThread,dwExitCode);       ::WaitForSingleObject(hThread,INFINITE);</p>\n<p>前两种方法都需要自己写结束条件，且需要用全局变量来判断。这种不需要，且不会清理掉进程堆栈。这种方式为<strong>异步调用</strong>。</p>\n<p><strong>挂起线程</strong></p>\n<p>::SuspendThread(hThread);</p>\n<p><strong>恢复线程</strong></p>\n<p>::ResumeThread(hThread);</p>\n<p>了解了上面控制线程的几个函数，下面来实现一个小例子，如下图</p>\n<p><img src=\"/2022/05/10/Win32%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8ECONTEXT%E7%BB%93%E6%9E%84/1.PNG\"></p>\n<p>点击开始时，编辑框中的数字从0开始自增1，分别点击其他三个按钮完成对线程相应的控制。代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Thread.cpp : Defines the entry point for the application.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;resource.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">HWND hEdit;</span><br><span class=\"line\">HANDLE hThread1;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL CALLBACK <span class=\"title function_\">MainDlgProc</span><span class=\"params\">(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD WINAPI <span class=\"title function_\">ThreadProc1</span><span class=\"params\">(LPVOID lpParameter)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取文本框内容</span></span><br><span class=\"line\">\tTCHAR szBuffer[<span class=\"number\">10</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tDWORD dwIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tDWORD dwCount;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(dwIndex &lt; <span class=\"number\">10000</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tGetWindowText(hEdit,szBuffer,<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">sscanf</span>( szBuffer, <span class=\"string\">&quot;%d&quot;</span>, &amp;dwCount );</span><br><span class=\"line\">\t\tdwCount++;\t\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(szBuffer,<span class=\"number\">0</span>,<span class=\"number\">10</span>);\t\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">sprintf</span>(szBuffer,<span class=\"string\">&quot;%d&quot;</span>,dwCount);\t</span><br><span class=\"line\">\t\tSetWindowText(hEdit,szBuffer);\t</span><br><span class=\"line\">\t\tSleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">\t\tdwIndex++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> APIENTRY <span class=\"title function_\">WinMain</span><span class=\"params\">(HINSTANCE hInstance,</span></span><br><span class=\"line\"><span class=\"params\">                     HINSTANCE hPrevInstance,</span></span><br><span class=\"line\"><span class=\"params\">                     LPSTR     lpCmdLine,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">int</span>       nCmdShow)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> Place code here.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tDialogBox(hInstance, MAKEINTRESOURCE(IDD_DIALOG_MAIN), <span class=\"literal\">NULL</span>, MainDlgProc);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 主对话框回调函数 */</span></span><br><span class=\"line\">BOOL CALLBACK <span class=\"title function_\">MainDlgProc</span><span class=\"params\">(\t\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t\t\t HWND hDlg,\t\t\t<span class=\"comment\">// handle to dialog box\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t\t\t UINT uMsg,\t\t\t<span class=\"comment\">// message\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t\t\t WPARAM wParam,\t\t<span class=\"comment\">// first message parameter\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t\t\t LPARAM lParam\t\t<span class=\"comment\">// second message parameter\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t\t\t )</span>\t\t\t</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>(uMsg)\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t&#123;\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_INITDIALOG:</span><br><span class=\"line\">\t\thEdit = GetDlgItem(hDlg,IDC_EDIT);</span><br><span class=\"line\">\t\tSetWindowText(hEdit,<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_CLOSE:</span><br><span class=\"line\">\t\tEndDialog(hDlg, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_COMMAND:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (LOWORD (wParam))\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&#123;\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> IDC_BUTTON1:</span><br><span class=\"line\">\t\t\thThread1 = ::CreateThread(<span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, ThreadProc1, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//::CloseHandle(hThread1);</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> IDC_BUTTON2:</span><br><span class=\"line\">\t\t\t::SuspendThread(hThread1);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//::CloseHandle(hThread2);</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> IDC_BUTTON3:</span><br><span class=\"line\">\t\t\t::ResumeThread(hThread1);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> IDC_BUTTON4:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//::TerminateThread(hThread,2);\t\t\t\t</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//::WaitForSingleObject(hThread,INFINITE);</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//::ExitThread(5);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">\t\t&#125;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span> ;\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"CONTEXT结构\"><a href=\"#CONTEXT结构\" class=\"headerlink\" title=\"CONTEXT结构\"></a>CONTEXT结构</h1><p>一个线程的执行依赖于Windows系统为其分配的CPU时间片，当线程被挂起或结束时，系统不再为其分配CPU时间片。由于Windows操作系统是一个<strong>非实时性</strong>的系统，当进程从挂起状态想要变为恢复状态继续执行时，线程不是立即恢复执行的，而是等待调度程序将线程变为可调度状态，线程才能恢复执行。</p>\n<p>现在思考这样一个问题：</p>\n<p>每个线程在执行的时候，都会独自占用一个CPU,当系统中的线程数量 &gt; CPU的数量时，就会存在多个线程共用一个CPU的情况。但CPU每次只能运行一个线程，Windows每隔20毫秒会进行线程的切换，那比如线程A执行到地址：0x2345678，此时eax:1 ecx:2 edx:3 ebx:4…还有eflag标志寄存器中的值等等。。。此时，线程执行时间到了，被切换到了线程B。。。。当线程B的时间片也到了，再切换会线程A时，系统是如何知道该从哪个地址开始执行呢？被切换前用到的各种寄存器的值该如何恢复呢？</p>\n<p>答案就是CONTETX结构。线程被挂起后，它的上下文就保存在了该结构中，该结构包含了特定处理器的寄存器数据。下面给出CONTEXT结构定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">CONTEXT</span> &#123;</span>\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// The flags values within this flag control the contents of\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// a CONTEXT record.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// If the context record is used as an input parameter, then\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// for each portion of the context record controlled by a flag\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// whose value is set, it is assumed that that portion of the\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// context record contains valid context. If the context record\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// is being used to modify a threads context, then only that\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// portion of the threads context will be modified.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// If the context record is used as an IN OUT parameter to capture\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// the context of a thread, then only those portions of the thread&#x27;s\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// context corresponding to set flags will be returned.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// The context record is never used as an OUT only parameter.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD ContextFlags;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// This section is specified/returned if CONTEXT_DEBUG_REGISTERS is\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// set in ContextFlags.  Note that CONTEXT_DEBUG_REGISTERS is NOT\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// included in CONTEXT_FULL.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Dr0;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Dr1;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Dr2;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Dr3;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Dr6;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Dr7;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// This section is specified/returned if the\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// ContextFlags word contians the flag CONTEXT_FLOATING_POINT.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    FLOATING_SAVE_AREA FloatSave;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// This section is specified/returned if the\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// ContextFlags word contians the flag CONTEXT_SEGMENTS.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SegGs;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SegFs;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SegEs;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SegDs;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// This section is specified/returned if the\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// ContextFlags word contians the flag CONTEXT_INTEGER.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Edi;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Esi;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Ebx;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Edx;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Ecx;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Eax;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// This section is specified/returned if the\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// ContextFlags word contians the flag CONTEXT_CONTROL.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Ebp;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   Eip;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SegCs;              <span class=\"comment\">// MUST BE SANITIZED\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    DWORD   EFlags;             <span class=\"comment\">// MUST BE SANITIZED\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    DWORD   Esp;\t\t\t\t\t\t\t</span><br><span class=\"line\">    DWORD   SegSs;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// This section is specified/returned if the ContextFlags word\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// contains the flag CONTEXT_EXTENDED_REGISTERS.\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">// The format and contexts are processor specific\t\t\t\t\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">    BYTE    ExtendedRegisters[MAXIMUM_SUPPORTED_EXTENSION];\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\">&#125; CONTEXT;\t\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>根据上面的定义可以看到，通过对ContextFlags值不同的赋值，就可以得到不同的寄存器的值。</p>\n<p>我们知道，Eip寄存器的作用就是指定CPU要执行指令的地址。因此可以通过修改Eip的值来达到线程切换的目的，来执行自己想要执行的代码。下面的代码即可以完成这个任务(具体的应用以后会讲解，这里只做示范)。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过挂起线程后获取context结构的相关值，来修改Eip寄存器</span></span><br><span class=\"line\"><span class=\"comment\">//挂起线程\t\t\t\t</span></span><br><span class=\"line\">SuspendThread(线程句柄);\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">CONTEXT context\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//设置要获取的类型\t\t\t\t\t\t\t</span></span><br><span class=\"line\">context.ContextFlags = CONTEXT_CONTROL;\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//获取\t\t\t\t\t\t\t</span></span><br><span class=\"line\">BOOL ok = ::GetThreadContext(hThread,&amp;context);\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//设置\t\t\t\t\t\t\t</span></span><br><span class=\"line\">context.Eip = <span class=\"number\">0x401000</span>;\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">SetThreadContext(hThread,&amp;context);\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n","categories":["Windows"],"tags":["Windows"]},{"title":"Win32：进程创建与句柄表","url":"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/","content":"<p>上一章节学习了线程相关的知识。有关线程的同步与互斥，例如临界区与互斥量等的问题，网络上有很多资料，这里不做赘述。本章节我们将要学习进程的创建，了解在进程创建过程中系统都做了哪些事情，以及句柄表在内核中的表现形式。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"进程的创建过程\"><a href=\"#进程的创建过程\" class=\"headerlink\" title=\"进程的创建过程\"></a>进程的创建过程</h1><p>首先来区分一下三个概念：程序、镜像、进程。</p>\n<p>程序就是一个存在于磁盘上的PE格式的文件。镜像就是程序在内存中拉伸后的ImageBuffer，这里面是没有线程的。进程就是在内存中运行着的程序，结构与ImageBuffer一样，但是这里面有线程。</p>\n<p>一个程序是怎样运行起来的？</p>\n<p><img src=\"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/1.PNG\"></p>\n<p>步骤1：当系统启动后，创建一个进程：Explorer.exe 也就是桌面进程。</p>\n<p>步骤2：当用户双击某一个EXE时，Explorer进程使用CreateProcess函数创建被双击的EXE，也就是说，我们在桌面上双击创建的进程都是Explorer进程的子进程。</p>\n<p>下面来研究一下，CreateProcess函数都做了哪些事情</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">BOOL <span class=\"title function_\">CreateProcess</span><span class=\"params\">(\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"params\">  LPCTSTR lpApplicationName,                 <span class=\"comment\">// name of executable module\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPTSTR lpCommandLine,                      <span class=\"comment\">// command line string\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class=\"comment\">// SD\t\t\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPSECURITY_ATTRIBUTES lpThreadAttributes,  <span class=\"comment\">// SD\t\t\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  BOOL bInheritHandles,                      <span class=\"comment\">// handle inheritance option\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  DWORD dwCreationFlags,                     <span class=\"comment\">// creation flags\t\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPVOID lpEnvironment,                      <span class=\"comment\">// new environment block\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPCTSTR lpCurrentDirectory,                <span class=\"comment\">// current directory name\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPSTARTUPINFO lpStartupInfo,               <span class=\"comment\">// startup information\t\t\t\t\t\t</span></span></span><br><span class=\"line\"><span class=\"params\">  LPPROCESS_INFORMATION lpProcessInformation <span class=\"comment\">// process information，OUT类型\t</span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;\t\t\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p><strong>1、创建内核对象</strong></p>\n<p>当我们在3环调用CreateProcess函数时，实际上是系统在0环(内核层)调用NtCreateProcess，这个函数会在该进程的高2G创建一块内存，用来存放一张表(这张表就是句柄表)。在进程刚刚被创建时，这张表是空的。当我们在这个进程中创建其他的内核对象，比如CreateProcess、CreateThread、CreateEvent、CreateMutex、CreateFile、CreateFileMapping等时，我们会得到这些内核对象的地址。但是如果直接将这些地址返回给3环的程序是不安全的，因为有可能会对这些地址进行恶意或者无意的修改导致错误。因此会对这些地址给一个编号，这个编号就是我们说的句柄。</p>\n<p><img src=\"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/2.PNG\"></p>\n<p><strong>2、分配4GB的虚拟空间(Windows32位)</strong></p>\n<p>这部分内容前面章节已经讲过，直接上图</p>\n<p><img src=\"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/3.PNG\"></p>\n<p><strong>3、创建进程的主线程</strong></p>\n<p>当进程的空间创建完毕，EXE与导入表中的DLL都正确加载完毕后，会创建一个线程。当线程得到CPU的时候，程序就开始指向了，EIP的初始值设定为：ImageBase+OEP。然后程序就可以运行起来了。</p>\n<p>创建成功后，会将进程的句柄和ID、主线程的句柄和ID存储在一个结构中，该结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">PROCESS_INFORMATION</span>\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t\t\t\t\t</span><br><span class=\"line\">   HANDLE hProcess;\t\t\t<span class=\"comment\">//进程句柄\t</span></span><br><span class=\"line\">   HANDLE hThread;\t\t\t<span class=\"comment\">//主线程句柄\t</span></span><br><span class=\"line\">   DWORD dwProcessId;\t\t\t<span class=\"comment\">//进程ID\t</span></span><br><span class=\"line\">   DWORD dwThreadId;\t\t\t<span class=\"comment\">//线程ID\t</span></span><br><span class=\"line\">&#125; PROCESS_INFORMATION;\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>该结构就是CreateProcess函数的最后一个OUT参数。至此，整个进程创建的过程结束。</p>\n<p>可以总结一句比较经典的话：<strong>进程就是4GB，线程就是EIP</strong>。</p>\n<h1 id=\"有关CreateProcess函数\"><a href=\"#有关CreateProcess函数\" class=\"headerlink\" title=\"有关CreateProcess函数\"></a>有关CreateProcess函数</h1><p>这个函数有很多参数，而且每个参数都比较重要，这里先对前两个和后两个参数进行讲解。</p>\n<p>第一个参数为lpApplicationName，也就是要打开的进程名字，应该指定程序的完整路径。</p>\n<p>第二个参数为lpCommandLine，命令行参数，不仅可以指定进程名，还可以指定给要创建的进程传参。</p>\n<p>上面两个参数均可以创建一个进程。代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">VOID <span class=\"title function_\">TestCreateProcessByAPPName</span><span class=\"params\">()</span>\t\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t\t\t</span><br><span class=\"line\">\tSTARTUPINFO si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t\t</span><br><span class=\"line\">    \tPROCESS_INFORMATION pi;\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\tsi.cb = <span class=\"keyword\">sizeof</span>(si);\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\tTCHAR szApplicationName[] =TEXT(<span class=\"string\">&quot;c://program files//internet explorer//iexplore.exe&quot;</span>);\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\tBOOL res = CreateProcess(\t\t\t\t\t</span><br><span class=\"line\">\t\tszApplicationName, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\tFALSE, \t\t\t\t</span><br><span class=\"line\">\t\tCREATE_NEW_CONSOLE, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, &amp;si, &amp;pi); \t\t\t\t  \t\t\t\t\t\t</span><br><span class=\"line\">&#125;\t\t\t\t\t\t</span><br><span class=\"line\">VOID <span class=\"title function_\">TestCreateProcessByCmdline</span><span class=\"params\">()</span>\t\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t\t\t</span><br><span class=\"line\">\tSTARTUPINFO si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t\t\t</span><br><span class=\"line\">    \tPROCESS_INFORMATION pi;\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\tsi.cb = <span class=\"keyword\">sizeof</span>(si);\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\tTCHAR szCmdline[] =TEXT(<span class=\"string\">&quot;c://program files//internet explorer//iexplore.exe http://www.ifeng.com&quot;</span>);\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\tBOOL res = CreateProcess(\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\tszCmdline, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\tFALSE, \t\t\t\t</span><br><span class=\"line\">\t\tCREATE_NEW_CONSOLE, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, &amp;si, &amp;pi); \t\t\t\t</span><br><span class=\"line\">&#125;\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>倒数第二个参数为lpStartupInfo，是一个结构，用来设定要创建的应用程序的属性。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">STARTUPINFO</span>\t\t\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t\t\t</span><br><span class=\"line\">   DWORD cb;\t\t\t</span><br><span class=\"line\">   PSTR lpReserved;\t\t\t</span><br><span class=\"line\">   PSTR lpDesktop;\t\t\t</span><br><span class=\"line\">   PSTR lpTitle;\t\t\t</span><br><span class=\"line\">   DWORD dwX;\t\t\t</span><br><span class=\"line\">   DWORD dwY;\t\t\t</span><br><span class=\"line\">   DWORD dwXSize;\t\t\t</span><br><span class=\"line\">   DWORD dwYSize;\t\t\t</span><br><span class=\"line\">   DWORD dwXCountChars;\t\t\t</span><br><span class=\"line\">   DWORD dwYCountChars;\t\t\t</span><br><span class=\"line\">   DWORD dwFillAttribute;\t\t\t</span><br><span class=\"line\">   DWORD dwFlags;\t\t\t</span><br><span class=\"line\">   WORD wShowWindow;\t\t\t</span><br><span class=\"line\">   WORD cbReserved2;\t\t\t</span><br><span class=\"line\">   PBYTE lpReserved2;\t\t\t</span><br><span class=\"line\">   HANDLE hStdInput;\t\t\t</span><br><span class=\"line\">   HANDLE hStdOutput;\t\t\t</span><br><span class=\"line\">   HANDLE hStdError;\t\t\t</span><br><span class=\"line\">&#125; STARTUPINFO, *LPSTARTUPINFO;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>一般情况下，只需要对该结构的第一个成员赋值就行了，该值为当前结构的大小。</p>\n<p>最后一个参数lpProcessInformation前面讲解过，也是一个结构，存储了进程与主线程的句柄和ID。下面关于句柄与ID进行一下说明，两者概念很多人容易混淆。</p>\n<p>1、句柄与ID都是系统分配的一个编号，句柄是客户程序使用，ID主要是系统调度时使用。</p>\n<p>2、调用CloseHandle关闭进程或者线程句柄的时候，只是让内核计数器减少一个，并不是终止进程或者线程。<strong>进程或线程将继续运行，直到它自己终止运行</strong>(在我们创建和打开内核对象时，该内核对象计数器会+1，内核对象计数器不为0时代表该内核对象还在被使用中)。</p>\n<p>3、线程与进程ID是不可能相同的，但是并不意味着我们得到了ID就能对其进行操作。因为一个进程结束后再运行起来时，其ID是有可能会变化的，前面的那个ID有可能被赋给了其他进程或线程。因此我们3环的客户程序一般都是通过句柄操作。</p>\n<h1 id=\"进程终止\"><a href=\"#进程终止\" class=\"headerlink\" title=\"进程终止\"></a>进程终止</h1><p>与线程类似，进程终止也有三种方式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、VOID　<span class=\"title function_\">ExitProcess</span><span class=\"params\">(UINT fuExitCode)</span>;\t\t\t\t<span class=\"comment\">//进程自己调用\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"number\">2</span>、BOOL <span class=\"title function_\">TerminateProcess</span><span class=\"params\">(HANDLE hProcess, UINT fuExitCode)</span>;\t<span class=\"comment\">//终止其他进程\t\t\t\t</span></span><br><span class=\"line\"><span class=\"number\">3</span>、ExitThread;\t\t\t\t\t\t\t<span class=\"comment\">//终止进程中的所有线程，进程也会终止\t\t\t</span></span><br></pre></td></tr></table></figure>\n\n<p>可以通过GetExitCodeProcess函数获取进程退出结束的退出码。</p>\n<p>进程终止时的相关操作：</p>\n<p>1、进程中剩余的所有线程全部终止运行</p>\n<p>2、进程指定的所有用户对象均被释放，所有内核对象均被关闭</p>\n<p>3、进程内核对象的状态变成收到通知的状态</p>\n<p>4、进程内核对象的使用计数递减1</p>\n<h1 id=\"句柄的继承\"><a href=\"#句柄的继承\" class=\"headerlink\" title=\"句柄的继承\"></a>句柄的继承</h1><p>如果想要让两个进程共享一个内核对象，一种方法是可以在一个进程中创建一个内核对象，并为这个对象起一个名字，然后在另一个进程中通过这个名字打开这个内核对象。</p>\n<p>还有一种方法是通过句柄继承。前面讲过，一个进程在创建时，会创建一张句柄表。那么通过这个进程创建的子进程就可以继承父进程的句柄表。使得不同的进程拥有相同的内核对象。</p>\n<p>以CreateEvent函数为例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">HANDLE  <span class=\"title function_\">CreateEvent</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">　　LPSECURITY_ATTRIBUTES  lpEventAttributes,<span class=\"comment\">// 安全属性 </span></span></span><br><span class=\"line\"><span class=\"params\">　　BOOL  bManualReset,<span class=\"comment\">// 复位方式</span></span></span><br><span class=\"line\"><span class=\"params\">　　BOOL  bInitialState,<span class=\"comment\">// 初始状态</span></span></span><br><span class=\"line\"><span class=\"params\">　　LPCTSTR  lpName <span class=\"comment\">// 对象名称 </span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数lpEventAttributes为一个结构，表示该内核对象是否能被继承，NULL表示不能继承。</p>\n<p>第二个参数bManualReset为复位方式。TRUE表示手动复位，必须通过ResetEvent手动将事件恢复到无信号状态。FALSE表示自动复位，当一个线程被释放以后，系统将自动将事件状态复位为无信号状态;对于自动复位的Event对象，仅释放第一个等待到该事件的线程，对其它线程无效；手动复位的Event对象对所有线程有效。</p>\n<p>第三个参数bInitialState为初始状态。TRUE，初始状态有信号；FALSE，初始状态无信号。</p>\n<p>第四个参数lpName为对象名称。</p>\n<p>再来看一下这张图：</p>\n<p><img src=\"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/2.PNG\"></p>\n<p>当创建内核对象时，安全属性被赋值的话，上图第三个字段就为1，表示该内核对象可以被继承（<strong>注意这里是可以被继承，而不是被继承了</strong>）。安全属性为NULL的话则是0，代表不能被继承。</p>\n<p>那么子进程如何才能继承得到父进程的句柄表中可以被继承的内核对象呢？这就涉及到了CreateProcess函数的第五个参数bInheritHandles。当该值为TRUE时，才能继承父进程句柄表中那些允许被继承的内核对象，为FALSE时，无法继承父进程的所有内核对象（注意这里是将父进程的句柄表复制一份，而不是将内核对象复制）。</p>\n<p>下面做一个实验，进程A创建一个可被继承的内核对象，然后创建一个子进程B来继承它。在A中设置信号的地方下断点，然后在B进程中监听这个对象是否发信号。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父进程A代码</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> szBuffer[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> szHandle[<span class=\"number\">8</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//若要创建能继承的句柄，父进程必须指定一个SECURITY_ATTRIBUTES结构并对它进行初始化\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\t<span class=\"comment\">//三个成员的意义：大小、默认安全属性、是否可以继承\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tSECURITY_ATTRIBUTES sa;\t\t\t\t\t\t\t</span><br><span class=\"line\">\tsa.nLength = <span class=\"keyword\">sizeof</span>(sa);\t\t\t\t\t\t\t</span><br><span class=\"line\">\tsa.lpSecurityDescriptor = <span class=\"literal\">NULL</span>;\t\t\t\t\t\t\t</span><br><span class=\"line\">\tsa.bInheritHandle = TRUE; \t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//创建一个可以被继承的内核对象\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tHANDLE g_hEvent = CreateEvent(&amp;sa, TRUE, FALSE, <span class=\"literal\">NULL</span>);\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//组织命令行参数\tC:/Documents and Settings/easy/桌面/逆向/B/Debug/B.exe\t\t\t</span></span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(szHandle,<span class=\"string\">&quot;%x&quot;</span>,g_hEvent);\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(szBuffer,<span class=\"string\">&quot;C:/Documents and Settings/easy/桌面/逆向/B/Debug/B.exe %s&quot;</span>,szHandle);\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义创建进程需要用的结构体\t\t\t</span></span><br><span class=\"line\">\tSTARTUPINFO si = &#123;<span class=\"number\">0</span>&#125;;   \t\t\t</span><br><span class=\"line\">\tPROCESS_INFORMATION pi;\t\t\t</span><br><span class=\"line\">\tsi.cb = <span class=\"keyword\">sizeof</span>(si);\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//创建子进程\t\t\t\t</span></span><br><span class=\"line\">\tBOOL res = CreateProcess(\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t</span><br><span class=\"line\">\t\tszBuffer, \t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t</span><br><span class=\"line\">\t\tTRUE,\t\t\t\t\t<span class=\"comment\">//TRUE说明子进程可以继承父进程的句柄表\t\t\t</span></span><br><span class=\"line\">\t\tCREATE_NEW_CONSOLE, \t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, \t\t\t</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, &amp;si, &amp;pi); </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//设置事件为已通知\t\t\t</span></span><br><span class=\"line\">\tSetEvent(g_hEvent);\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//关闭句柄 内核对象不会被销毁，而是对象计数器-1\t\t\t</span></span><br><span class=\"line\">\tCloseHandle(g_hEvent);  \t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子进程B代码</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> szBuffer[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(szBuffer,argv[<span class=\"number\">1</span>],<span class=\"number\">8</span>);\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tDWORD dwHandle = <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">sscanf</span>(szBuffer,<span class=\"string\">&quot;%x&quot;</span>,&amp;dwHandle);\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,argv[<span class=\"number\">0</span>]);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x\\n&quot;</span>,dwHandle);\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tHANDLE g_hEvent = (HANDLE)dwHandle;\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;开始等待.....\\n&quot;</span>);\t\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//当事件变成已通知时 \t\t\t\t</span></span><br><span class=\"line\">\tWaitForSingleObject(g_hEvent, INFINITE);\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\tDWORD dwCode = GetLastError();\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;等到消息.....%x\\n&quot;</span>,dwCode);\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\tgetchar();\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先在A进程中的SetEvent(g_hEvent)处下断点，内核对象event被创建时无信号，B进程会在WaitForSingleObject(g_hEvent, INFINITE)处无限等待直到该对象有信号。</p>\n<p><img src=\"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/4.PNG\"></p>\n<p>在进程A中单步执行，使内核对象有信号，子进程B将会得到信号，代表子进程继承了父进程的内核对象。</p>\n<p><img src=\"/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/5.PNG\"></p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"保护模式：1、段寄存器属性探测","url":"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/","content":"<p>开一个新坑，最近正在学习海哥Windows内核方面相关的知识，也已经学习了很多，因此想及时在这里总结复习一下，并持续跟进未来的学习。对于Windows内核来讲，我准备分成保护模式与操作系统两个大模块来学习与总结。保护模式是操作系统的根本，而段页的知识又是保护模式的根本，因此学习好段页很重要（当然前面3环还剩下一些项目，未来也会慢慢总结跟进的）。</p>\n<span id=\"more\"></span>\n\n<p>在实模式下，给出一个地址就是物理地址，这个物理地址的内容可以被随意更改。而保护模式之所以叫保护模式，就是为了保护内存不被随意访问与更改。那么，又是什么限制了对一个内存地址的访问呢？比如下面这句汇编代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MOV DWORD PTR DS:[0xF1234567], EBX</span><br></pre></td></tr></table></figure>\n\n<p>将EBX寄存器的内容送入一个地址（真正的地址是DS.base + 0xF1234567），要满足什么条件才能执行成功呢？一个是DS中的Attribute，也就是段的属性；另一个是0xF1234567所在内存页的属性。我们先来学习段相关的知识。</p>\n<h1 id=\"段寄存器结构\"><a href=\"#段寄存器结构\" class=\"headerlink\" title=\"段寄存器结构\"></a>段寄存器结构</h1><p>上面的DS就是一个CPU中的段寄存器，在CPU中，一共有8个段寄存器，它们分别是：ES CS SS DS FS GS LDTR和TR。段寄存器的结构如下图所示。</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8.PNG\"></p>\n<p>下面是在OD中，各个段寄存器的显示效果：</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/2.PNG\"></p>\n<p>可以看到，这些段寄存器显示出来的值只有2个字节也就是16位，后面的32位表示这是一个大段（关于什么是大段小段，后面会讲），紧跟着后面的0是这个段的base，也就是基址，后面括号里的F表示这个段的limit，也就是段限长，描述了段的范围。当我们执行指令<strong>MOV AX,ES</strong>之后，也能看到结果是将16位的值送入了AX中。</p>\n<p>于是我们可以根据段寄存器的结构图来看，除了可见部分的16位是段寄存器的段选择子，还分别有不可见的16位属性、32位基址和32位段限长，一共96位。</p>\n<p>对于段寄存器的读操作（ES CS SS DS FS GS），比如<strong>MOV AX,ES</strong> 指令，读取的是16位的可见部分；而对于它们的写操作，比如<strong>MOV DS,AX</strong> 指令，写入的是96位。（16位的AX是如何写入96位DS中的呢？后面会讲）</p>\n<p>此外，读LDTR的指令为<strong>SLDT&#x2F;LLDT</strong>，读TR的指令为<strong>STR&#x2F;LTR</strong>。</p>\n<p>下面来看一下各个段寄存器成员：</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/3.PNG\"></p>\n<p>GS段寄存器Windows没有使用，一直为0。FS寄存器很重要，学到进程线程再讲。ES SS和DS存储的都是数据段，属性为可读可写，CS为代码段，属性为可读可执行。</p>\n<h1 id=\"段寄存器属性探测\"><a href=\"#段寄存器属性探测\" class=\"headerlink\" title=\"段寄存器属性探测\"></a>段寄存器属性探测</h1><p>上面介绍了段寄存器一共有96位，那么如何证明呢？</p>\n<h2 id=\"探测Attribute\"><a href=\"#探测Attribute\" class=\"headerlink\" title=\"探测Attribute\"></a>探测Attribute</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">int var = 0;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t__asm\t\t\t\t\t</span><br><span class=\"line\">\t&#123;\t\t\t\t\t</span><br><span class=\"line\">\t\tmov ax,ss\t//cs不行 cs是可读 可执行 但不可写\t</span><br><span class=\"line\">\t\tmov ds,ax\t\t\t\t</span><br><span class=\"line\">\t\tmov dword ptr ds:[var],eax\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，首先读SS，然后写入DS，此时DS寄存器就等同于SS寄存器的内容，然后将EAX的内容送入该段的一个地址中去（其实就是SS.base），程序运行结果如下，可以正常执行。</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/4.PNG\"></p>\n<p>而当我们把SS改变成CS后继续执行程序，当向内存写入的时候，触发了内存访问错误：</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/5.PNG\"></p>\n<p>是什么限制了对这块内存的写入呢？就是CS中的属性部分，该段寄存器不具有可写属性。</p>\n<h2 id=\"探测Base\"><a href=\"#探测Base\" class=\"headerlink\" title=\"探测Base\"></a>探测Base</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">int a = 0;</span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmov ax,fs</span><br><span class=\"line\">\t\tmov es,ax</span><br><span class=\"line\">\t\tmov eax,es:[0]</span><br><span class=\"line\">\t\tmov a,eax</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;%d\\n&quot;, a);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，es&#x3D;fs，按照常理来说，0地址是无法访问的，由于es的段base为0，因此只访问es:[0]会触发内存访问错误，运行结果如下图：</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/6.PNG\"></p>\n<p>而将es赋值成fs之后，由于上面讲过，fs的基址不是0，因此可以访问并成功给a赋值：</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/7.PNG\"></p>\n<h2 id=\"探测Limit\"><a href=\"#探测Limit\" class=\"headerlink\" title=\"探测Limit\"></a>探测Limit</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_asm</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmov ax,fs</span><br><span class=\"line\">\t\tmov es,ax</span><br><span class=\"line\">\t\tmov eax,es:[0x1000]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>给es赋值后es&#x3D;fs，但由于fs的limit为0xFFF，对超过limit的内存地址访问，会出现内存访问错误：</p>\n<p><img src=\"/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/8.PNG\"></p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：2、段描述符与段选择子","url":"/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/","content":"<p>在上一节课中，我们学习了段寄存器的结构，知道了段寄存器除了可见部分的16位段选择子，还有不可见的16位属性、32位基址和32位段限长。上一节课还遗留了一个问题：指令<strong>mov ds,ax</strong>是如何用16位的ax填写96位的段寄存器？这节课我们就来学习相关的知识</p>\n<span id=\"more\"></span>\n\n<p>对于CPU来说，有两张很重要的表，分别是GDT表和IDT表（LDT表Windows没有使用），段描述符就存在段描述符表中。当我们执行类似<strong>mov ds,ax</strong>的指令时，CPU会去查表，16位的ax叫做段选择子，CPU会根据ax的值来决定查找GDT（全局描述符表）还是LDT（局部描述符表），查找表的什么位置。</p>\n<h1 id=\"段描述符\"><a href=\"#段描述符\" class=\"headerlink\" title=\"段描述符\"></a>段描述符</h1><p>段描述符结构如下：</p>\n<p><img src=\"/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/1.PNG\"></p>\n<p>在这张图中，上面代表高4字节，下面代表低4字节，一共8字节64位。在这个结构中，具体哪些位代表什么意思，慢慢我们都会讲到，这里先不纠结。现在只需要做一件事：给定一个段描述符，能够按照上面的结构拆分出来。</p>\n<p>那么GDT表位于什么地方呢？这张表又有多大呢？它们分别位于寄存器gdtr和gdtl中，在windbg中可以通过<strong>r gdtr</strong>和<strong>r gdtl</strong>来查看它们的值：（这里涉及到双机调试，网络上有很多资料，请自行参考）</p>\n<p><img src=\"/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/2.PNG\"></p>\n<p>在这里我们看到了GDT表位于虚拟地址0x8003f000，大小为0x3ff，可以通过dq指令查看该位置的内容：</p>\n<p><img src=\"/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/4.PNG\"></p>\n<p>dq为一次显示8字节（q代表QWORD），在第二项00cf9b00~0000ffff中，前面为高4字节，后面为低4字节，按照格式拆分如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">拆分为64位二进制为：</span><br><span class=\"line\">  0    0    c    f    9    b    0    0    0    0    0    0    f    f    f    f</span><br><span class=\"line\">0000 0000 1100 1111 1001 1011 0000 0000 0000 0000 0000 0000 1111 1111 1111 1111</span><br><span class=\"line\">Base31~24：0000 0000</span><br><span class=\"line\">G：1</span><br><span class=\"line\">D/B：1</span><br><span class=\"line\">L：0</span><br><span class=\"line\">AVL：0</span><br><span class=\"line\">Limit19~16：1111</span><br><span class=\"line\">P：1</span><br><span class=\"line\">DPL：00</span><br><span class=\"line\">S：1</span><br><span class=\"line\">TYPE：1011</span><br><span class=\"line\">Base23~16：0000 0000</span><br><span class=\"line\">Base15~00：0000 0000 0000 0000</span><br><span class=\"line\">Limit15~00：1111 1111 1111 1111</span><br></pre></td></tr></table></figure>\n\n<p>不熟悉的请读者自行挑选段描述符练习拆分。</p>\n<h1 id=\"段选择子\"><a href=\"#段选择子\" class=\"headerlink\" title=\"段选择子\"></a>段选择子</h1><p>段选择子结构如下：</p>\n<p><img src=\"/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/5.PNG\"></p>\n<p>在上图结构中，第0-1位RPL代表请求特权级别，具体什么意思稍后讲，第2位TI代表要查询的表（在Windows下一般都是0，查询GDT表），第3-15位代表索引，表示要查询表的第几项。因此想要查看内存中对应的项的内容，地址应该是GDT表的基址+索引*8。</p>\n<p>在上一节课我们提到了，指令<strong>mov ds,ax</strong>是如何用16位的ax填写96位的ds的呢？刨去段寄存器中可见的16位段选择子，还剩80位，因此CPU会用GDT中对应的段描述符来写入这80位。那么问题来了，这64位是如何填满80位的呢？后面再讲。</p>\n<p>例如，对于段选择子0x23来讲，RPL&#x3D;3，index&#x3D;4，查找的是GDT表序号为4的项（序号从0开始）。</p>\n<p>现在来看RPL，代表的意思是当前的特权级别，有四种情况分别是0 1 2 3。同时注意到在段描述符结构中有一个DPL，代表目标特权级别，意思可以理解成：你既然要访问我这个段，你最少是什么级别。因此，在CPU通过选择子查找到目标段描述符后，会将选择子的RPL与目标段描述符的DPL进行对比，当RPL的级别大于等于DPL时（数值上RPL小于等于DPL），才能够成功访问。例如RPL&#x3D;0，DPL&#x3D;3时就可以成功访问，反过来就不行。</p>\n<p>总结一下，想要修改段寄存器的值，可以使用MOV指令，方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov ax,0x20</span><br><span class=\"line\">mov ds,ax</span><br></pre></td></tr></table></figure>\n\n<p>此外，还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器。对于CS寄存器来讲，没有对应的LCS指令，因为CS为代码段，CS的修改就意味着EIP的更改。因此必须同时改变CS和EIP才行，具体指令后面讲。以LES指令为例，使用方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">       char buffer[6] = &#123;0&#125;;</span><br><span class=\"line\">       __asm &#123;</span><br><span class=\"line\">              // 高 2 字节加载到 ES 寄存器，低 4 字节复制到 ecx 寄存器。fword 表示 6 字节。</span><br><span class=\"line\">              // LDS/LSS/LFS/LGS 用法是类似的。没有LCS指令，要修改CS，需要使用其它指令，这里就不给出。</span><br><span class=\"line\">              // 这行指令是有坑的，不一定可以执行成功，取决于buffer中的值。</span><br><span class=\"line\">              les ecx, fword ptr ds:[buffer]</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：3、段描述符属性","url":"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/","content":"<p>上一节课讲了段描述符和段选择子的结构，这节课来具体讲解段描述符里面的一些位具体代表什么，并且来解决上节课遗留的一个问题：64位的段描述符如何填入96位段寄存器中不可见的80位？</p>\n<span id=\"more\"></span>\n\n<p>先来回顾一下段描述符的结构：</p>\n<p><img src=\"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/1.PNG\"></p>\n<p>下面是段寄存器的结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Segment&#123;</span><br><span class=\"line\">\tWORD Selector;\t\t//段选择子（可见）16位</span><br><span class=\"line\">\tWORD Attributes;\t//段属性  （不可见）16位</span><br><span class=\"line\">\tWORD Base;\t\t\t//段起始地址  （不可见）32位</span><br><span class=\"line\">\tWORD Limit;\t\t\t//段大小  （不可见）32位</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在填入段寄存器时，属性部分写入的是段描述符高4字节中8-23位，共16位；基址部分填入的是段描述符中的基址共32位。现在问题来了，段寄存器的limit部分需要32位，而在段描述符里面limit只有20位，该怎么填入呢？我们从段描述符的属性入手。</p>\n<h1 id=\"P位\"><a href=\"#P位\" class=\"headerlink\" title=\"P位\"></a>P位</h1><p>P位位于段描述符高4字节的第15位，决定了该描述符是否有效。对于一个段描述符，首先就要看它的P位是否为有效位。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">P=0\t无效</span><br><span class=\"line\">P=1\t有效</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/2.PNG\"></p>\n<p>对于上图的GDT表来说，被标出来的部分大于等于8，就意味着P&#x3D;1，是有效的段描述符。</p>\n<h1 id=\"G位\"><a href=\"#G位\" class=\"headerlink\" title=\"G位\"></a>G位</h1><p>G位决定了该段的粒度，前面提到的如何用段描述符20位的limit填入段寄存器32位的limit，就是通过G位来决定的。在段描述符中，20位的limit最大值为FFFFF。</p>\n<p>G&#x3D;0时，limit单位是字节，也就是说该是多少就是多少。20位limit最大为FFFFF，前面补0即可，limit最大为000FFFFF。</p>\n<p>G &#x3D; 1时，limit单位是kb，也就是说，limit每加1，实际上加了1kb也就是FFF。因此limit范围是00000FFF ~ FFFFFFFF。（在后面补FFF）</p>\n<h1 id=\"S位\"><a href=\"#S位\" class=\"headerlink\" title=\"S位\"></a>S位</h1><p>在GDT表中，段描述符分为两类，一类是数据或代码段描述符，另一类是系统段描述符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">S = 0时，该段描述符是系统段描述符</span><br><span class=\"line\">S = 1时，该段描述符是代码段或数据段描述符</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/4.PNG\"></p>\n<p>在上图中，被标出来的部分的最后一个二进制位就是S位。</p>\n<h1 id=\"TYPE域\"><a href=\"#TYPE域\" class=\"headerlink\" title=\"TYPE域\"></a>TYPE域</h1><p>对于S位取不同的值，TYPE域各位有不同的涵义</p>\n<p><strong>1、S &#x3D; 1时，有两种情况，分别是数据段和代码段描述符</strong></p>\n<p>也就是说，在段描述符高4字节的8个16进制数中，第5个数是1001（9）或者1111（F）时，为数据段或者代码段描述符。如下图所示：</p>\n<p><img src=\"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/5.PNG\"></p>\n<p>上图可以看出来又分了两种情况：</p>\n<p>1.1 当第11位 &#x3D; 0时，是数据段。也就是第6个16进制数 &lt; 8。A位代表是否已经被访问过（有没有被加载过）。W位代表是否可写。E位代表拓展方向。E &#x3D; 0时向上拓展，E &#x3D; 1时向下拓展。</p>\n<p>1.2 当第11位 &#x3D; 1时，是代码段。也就是第6个16进制数 &gt; 8。A位代表是否已经被访问过（有没有被加载过）。R位代表是否可读。C位是一致位。C &#x3D; 1时代表一致代码段，C &#x3D; 0时代表非一致代码段。具体C位什么意思，后续介绍。</p>\n<p>对于E位的拓展方向，解释如下图：</p>\n<p><img src=\"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/6.PNG\"></p>\n<p>左边为E &#x3D; 0向上拓展（正常），右边为E &#x3D; 1向下拓展（不正常）。红色代表有效地址，也就是说可以访问的地址。因此与其说是向上或下拓展，不如说是取反。</p>\n<p>对于右边的红色部分具体有多大，还要看另外一个没有讲过的属性来决定，有两种可能分别是64kb和4GB，以后再说。（向下拓展基本没见过）</p>\n<p><strong>2、S &#x3D; 0时，为系统描述符</strong></p>\n<p>系统描述符又分为以下类型：</p>\n<p><img src=\"/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/7.PNG\"></p>\n<p>这里面描述的具体分类是什么意思，目前还用不到，后续会讲解。目前只要知道TYPE域各位的含意即可。</p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：4、段权限检查","url":"/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/","content":"<p>上节课讲了段描述符里面的一些位，先来复习一下：对于一个段描述符，先看它的P位是否有效，然后看它的S位和TYPE域来区分该段的类型。这节课继续来学习段描述符的其他位。</p>\n<span id=\"more\"></span>\n\n<p>老规矩，还是先上段描述符的结构图，方面查看和记忆：</p>\n<p><img src=\"/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/1.PNG\"></p>\n<h1 id=\"D-x2F-B位\"><a href=\"#D-x2F-B位\" class=\"headerlink\" title=\"D&#x2F;B位\"></a>D&#x2F;B位</h1><p>D&#x2F;B位比较复杂，加载到不同的段寄存器中的影响是不一样的。</p>\n<p><strong>1、段描述符加载到数据段如：DS、ES</strong></p>\n<p>其含义代表的是段上限的大小。（这也就是昨天提到的向上向下拓展时候影响段上限的位）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">D = 1，段上限为4GB</span><br><span class=\"line\">D = 0，段上限为64KB</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/2.PNG\"></p>\n<p><strong>2、段描述符加载到代码段如CS</strong></p>\n<p>影响的是默认的选址方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">D = 1，默认采用32位寻址方式</span><br><span class=\"line\">D = 0，默认采用16位寻址方式</span><br></pre></td></tr></table></figure>\n\n<p>指令前缀67 改变寻址方式。</p>\n<p><strong>3、段描述符加载到数据段如SS</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">D = 1，隐式堆栈访问指令（如：PUSH POP CALL） 使用32位堆栈指针寄存器ESP</span><br><span class=\"line\">D = 0，隐式堆栈访问指令（如：PUSH POP CALL） 使用16位堆栈指针寄存器SP</span><br></pre></td></tr></table></figure>\n\n<p>跟上面加载到CS道理其实差不多。</p>\n<h1 id=\"段权限检查\"><a href=\"#段权限检查\" class=\"headerlink\" title=\"段权限检查\"></a>段权限检查</h1><p>先来回顾一下几个概念：</p>\n<p><strong>RPL</strong>：请求特权级，存在于16位的段选择子中。</p>\n<p><strong>DPL</strong>：描述了访问该段至少需要什么级别，存在于段描述符中。</p>\n<p>那么如何查看程序处于几环？也就是说，如何查看CPU当前处于哪个级别呢？这里有一个新的概念：</p>\n<p><strong>CPL</strong>：当前特权级，存在于CS和SS中存储的段选择子最后2位。</p>\n<p>这个CPL的意义是，当前CPU执行到某一位置时CPU的级别。如下图：</p>\n<p><img src=\"/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/3.PNG\"></p>\n<p>当CPU执行到80527da8这个地址时，CS值为8（1000），CPL &#x3D; 0。</p>\n<p>有些指令在CPL &#x3D; 3时不能使用，但是在CPL &#x3D; 0时可以使用。</p>\n<p>那么，段权限检查需要满足什么条件才能算成功呢？</p>\n<p>**CPL &lt;&#x3D; DPL 并且 RPL &lt;&#x3D; DPL (数值上的比较)**。注意两个条件必须要同时满足。</p>\n<p><strong>特别说明</strong>：数据段的权限检查与代码段的权限检查不一样。上面的只适用于数据段的权限检查，代码段的权限是如何检查的，在以后的课程中会讲到。</p>\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"保护模式：5、代码间的跳转-段间跳转","url":"/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/","content":"<p>上节课我们学习了访问数据段的时候，段权限是如何检查的，即：**CPL &lt;&#x3D; DPL 并且 RPL &lt;&#x3D; DPL (数值上的比较)**。后面我们来学习访问代码段时，段的权限是如何检查的。</p>\n<span id=\"more\"></span>\n\n<p>通过前面的学习，我们已经知道了段寄存器共有八个，分别是：ES、CS、SS、DS、FS、GS、LDTR和TR。当我们想要修改段寄存器的值时，有<strong>MOV</strong>指令的类似于<strong>LES</strong>的指令。</p>\n<p>但是，对于CS代码段寄存器，却不能用上面这两种方式修改。因为CS的改变意味着EIP的改变，想要改变CS，就必须同时改变EIP（段间跳转），但是可以只改变EIP而不改变CS（段内跳转）。CS.Base + EIP &#x3D; 真正要执行的地址。因此，代码段间的跳转，本质上就是CS寄存器的修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">同时修改CS和EIP的指令（段间跳转）：JMP FAR / CALL FAR / RETF / INT /IRETED</span><br><span class=\"line\">只修改EIP的指令（段内跳转）：JMP / CALL / JCC / RET</span><br></pre></td></tr></table></figure>\n\n<p>既然是跳转到另一个代码段，那么就可以根据目标代码段的种类分为两种情况：一致代码段和非一致代码段。具体怎么区分两种代码段，请参见前面的课程。</p>\n<p>下面我们就来讲解代码间的跳转（<strong>JMP FAR</strong>）的执行流程：</p>\n<p>首先需要明确的是，JMP FAR指令后面需要跟6个字节，例如：JMP 0x20:0x004183D7，其中，高2字节为0x20，代表段选择子，而低4字节为0x004183D7，代表段内偏移。而JMP指令为段内长跳转，JMP后面跟4字节，为跳转的目标地址。</p>\n<p>以指令<strong>JMP 0x20:0x004183D7</strong>为例，执行流程如下：</p>\n<p><strong>1、拆分段选择子</strong></p>\n<p>0x20为0010 0000，RPL &#x3D; 0，TI &#x3D; 0。查GDT表，index &#x3D; 4</p>\n<p><strong>2、判断该段描述符的种类</strong></p>\n<p>通过index找到GDT中对应的段描述符，只有如下四种段描述符可以跳转成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">代码段、调用门、TSS任务段、任务门（目前只分析代码段）</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、权限检查</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">如果是非一致代码段，要求:CPL == DPL 并且 RPL &lt;= DPL。（windows基本上使用的都是这个）</span><br><span class=\"line\">如果是一致代码段，要求:CPL &gt;= DPL。</span><br></pre></td></tr></table></figure>\n\n","categories":["保护模式"],"tags":["保护模式"]},{"title":"结构体字节对齐","url":"/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/","content":"<p>本节来分析C语言中结构体的字节对齐</p>\n<span id=\"more\"></span>\n\n<p><strong>1、先来测试几个结构体的大小</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test1</span>\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t</span><br><span class=\"line\">    <span class=\"type\">char</span>  a;\t</span><br><span class=\"line\">    <span class=\"type\">int</span> b;\t</span><br><span class=\"line\">&#125;;\t</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test2</span>\t\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t\t</span><br><span class=\"line\">    <span class=\"type\">int</span> a;\t\t</span><br><span class=\"line\">    __int64 b;\t</span><br><span class=\"line\">    <span class=\"type\">char</span> c;\t\t</span><br><span class=\"line\">&#125;;\t\t</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test3</span>\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t</span><br><span class=\"line\">    <span class=\"type\">int</span> a ;\t</span><br><span class=\"line\">    __int64 b ;\t</span><br><span class=\"line\">    <span class=\"type\">char</span> c ;\t</span><br><span class=\"line\">    <span class=\"type\">char</span> d ;\t</span><br><span class=\"line\">&#125;;\t</span><br></pre></td></tr></table></figure>\n\n<p>运行得到</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sizeof</span>(Test1) = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(Test2) = <span class=\"number\">24</span>;</span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(Test3) = <span class=\"number\">24</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、探究结构体的内存分布</strong></p>\n<p>#pragma pack的基本用法为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> pack(n)\t</span></span><br><span class=\"line\"><span class=\"comment\">//结构体。。。\t</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> pack()</span></span><br><span class=\"line\"><span class=\"comment\">//对齐参数：n为字节对齐数，其取值为1、2、4、8，默认是8。</span></span><br></pre></td></tr></table></figure>\n\n<p>如果这个n值比结构体成员的sizeof值小，那么该成员的偏移量应该以此值为准。</p>\n<p>也就是说，结构体成员的偏移量应该取二者的最小值。</p>\n<p>以前面的Test2结构体为例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test2</span>\t\t</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>\t\t</span><br><span class=\"line\">    <span class=\"type\">int</span> a;\t\t</span><br><span class=\"line\">    __int64 b;\t</span><br><span class=\"line\">    <span class=\"type\">char</span> c;\t\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>不同的对齐方式对应的内存分布图如下：</p>\n<p><img src=\"/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/1.PNG\"><img src=\"/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/2.PNG\"><img src=\"/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/3.PNG\"></p>\n<p>由于默认是最后的8字节对齐，因此sizeof(Test2) &#x3D; 24。</p>\n<p><em>在这里给一个建议，按照数据类型由小到大的顺序进行书写。</em></p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]},{"title":"逆向分析：if语句","url":"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/","content":"<p>最近学习完了滴水海哥的逆向初级课程，复习一下，做一下记录。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"全局变量与局部变量\"><a href=\"#全局变量与局部变量\" class=\"headerlink\" title=\"全局变量与局部变量\"></a>全局变量与局部变量</h1><h2 id=\"全局变量的特点\"><a href=\"#全局变量的特点\" class=\"headerlink\" title=\"全局变量的特点\"></a>全局变量的特点</h2><p>1、全局变量在程序编译完成后地址就已经确定下来了，只要程序启动，全局变量就已经存在了。启动后里面是否有值，取决于声明时是否给定了初始值，如果没有，默认是0。</p>\n<p>2、全局变量的值可以被所有函数所修改，里面存储的是最后一次修改的值。</p>\n<p>3、全局变量所占内存会一直存在，直到整个进程结束。</p>\n<p>4、全局变量的反汇编识别：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MOV 寄存器,byte/word/dword ptr ds:[0x12345678]</span><br></pre></td></tr></table></figure>\n\n<p>通过寄存器的宽度，或者byte&#x2F;word&#x2F;dword 来判断全局变量的宽度。如下图：</p>\n<p><img src=\"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416155522649.png\"></p>\n<h2 id=\"局部变量的特点\"><a href=\"#局部变量的特点\" class=\"headerlink\" title=\"局部变量的特点\"></a>局部变量的特点</h2><p>1、局部变量在程序编译完成后并没有分配固定的地址。</p>\n<p>2、在所属的方法没有被调用时，局部变量并不会分配内存地址，只有当所属的程序被调用了，才会在堆栈中分配内存。</p>\n<p>3、当局部变量所属的方法执行完毕后，局部变量所占用的内存将变成垃圾数据，局部变量消失。</p>\n<p>4、局部变量只能在方法内部使用，函数A无法使用函数B的局部变量。</p>\n<p>5、局部变量的反汇编识别：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ebp-4]</span><br><span class=\"line\">[ebp-8]</span><br><span class=\"line\">[ebp-C]</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"函数参数分析\"><a href=\"#函数参数分析\" class=\"headerlink\" title=\"函数参数分析\"></a>函数参数分析</h1><p>如何判断函数有几个参数，以及分别是什么（一般情况）：</p>\n<p>步骤一：观察调用处的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">push 3</span><br><span class=\"line\">push 2</span><br><span class=\"line\">push 1</span><br><span class=\"line\">call 0040100f</span><br></pre></td></tr></table></figure>\n\n<p>步骤二：找到平衡堆栈的代码继续论证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">call 0040100f</span><br><span class=\"line\">add esp, 0Ch\t\t//外平栈</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ret 4/8/0xC/0x10\t//内平栈</span><br></pre></td></tr></table></figure>\n\n<p>两者综合起来分析即可。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> g_r;\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//外平栈，从右至左的顺序压参数入栈\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">void</span> __cdecl <span class=\"title function_\">Function1</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z)</span>\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\tg_r = x+y+z;\t\t\t</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\"><span class=\"comment\">//内平栈，从右至左的顺序压参数入栈</span></span><br><span class=\"line\"><span class=\"type\">void</span> __stdcall <span class=\"title function_\">Function2</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z)</span>\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\tg_r = x+y+z;\t\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//内平栈，头两个DWORD（4字节）类型或者占更少字节的参数被放入寄存器，其他剩下的参数按从右到左的顺序压入栈</span></span><br><span class=\"line\"><span class=\"comment\">//寄存器一般是ECX和EDX</span></span><br><span class=\"line\"><span class=\"type\">void</span> __fastcall <span class=\"title function_\">Function3</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y,<span class=\"type\">int</span> z)</span>\t\t\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\tg_r = x+y+z;\t\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416162401815.png\"></p>\n<p>但是上面的分析是一般情况，可能出现问题：</p>\n<p>1、参数传递未必都是通过堆栈，还可能通过使用寄存器（比如fastcall调用约定）。</p>\n<p>2、函数调用处的代码无法查看，只能看到函数内部的。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00401050   push        ebp\t\t\t\t</span><br><span class=\"line\">00401051   mov         ebp,esp\t\t\t\t</span><br><span class=\"line\">00401053   sub         esp,48h\t\t\t\t</span><br><span class=\"line\">00401056   push        ebx\t\t\t\t</span><br><span class=\"line\">00401057   push        esi\t\t\t\t</span><br><span class=\"line\">00401058   push        edi\t\t\t\t</span><br><span class=\"line\">00401059   push        ecx\t\t\t\t</span><br><span class=\"line\">0040105A   lea         edi,[ebp-48h]\t\t\t\t</span><br><span class=\"line\">0040105D   mov         ecx,12h\t\t\t\t</span><br><span class=\"line\">00401062   mov         eax,0CCCCCCCCh\t\t\t\t</span><br><span class=\"line\">00401067   rep stos    dword ptr [edi]\t\t\t\t</span><br><span class=\"line\">00401069   pop         ecx\t\t\t\t</span><br><span class=\"line\">0040106A   mov         dword ptr [ebp-8],edx\t//注意\t\t\t</span><br><span class=\"line\">0040106D   mov         dword ptr [ebp-4],ecx\t//注意\t\t\t\t</span><br><span class=\"line\">00401070   mov         eax,dword ptr [ebp-4]\t\t\t\t</span><br><span class=\"line\">00401073   add         eax,dword ptr [ebp-8]\t\t\t\t</span><br><span class=\"line\">00401076   add         eax,dword ptr [ebp+8]\t\t\t\t</span><br><span class=\"line\">00401079   mov         [g_x (00427958)],eax\t\t\t\t</span><br><span class=\"line\">0040107E   pop         edi\t\t\t\t</span><br><span class=\"line\">0040107F   pop         esi\t\t\t\t</span><br><span class=\"line\">00401080   pop         ebx\t\t\t\t</span><br><span class=\"line\">00401081   mov         esp,ebp\t\t\t\t</span><br><span class=\"line\">00401083   pop         ebp\t\t\t\t</span><br><span class=\"line\">00401084   ret         4\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>分析步骤：</strong></p>\n<p>1、不考虑ebp和esp。</p>\n<p>2、只找<strong>给别人赋值的寄存器</strong>，eax&#x2F;ecx&#x2F;edx&#x2F;ebx&#x2F;esi&#x2F;edi。</p>\n<p>3、找到以后追查其来源，如果，该寄存器中的值不是在函数内存赋值的，那一定是传进来的参数。</p>\n<p>公式一：寄存器 + ret  4 &#x3D; 参数个数</p>\n<p>公式二：寄存器 + [ebp+8] +[ebp+0x] &#x3D; 参数个数</p>\n<h1 id=\"if语句逆向分析\"><a href=\"#if语句逆向分析\" class=\"headerlink\" title=\"if语句逆向分析\"></a>if语句逆向分析</h1><p>函数内部代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00401030   push        ebp\t\t\t\t\t</span><br><span class=\"line\">00401031   mov         ebp,esp\t\t\t\t\t</span><br><span class=\"line\">00401033   sub         esp,40h\t\t\t\t\t</span><br><span class=\"line\">00401036   push        ebx\t\t\t\t\t</span><br><span class=\"line\">00401037   push        esi\t\t\t\t\t</span><br><span class=\"line\">00401038   push        edi\t\t\t\t\t</span><br><span class=\"line\">00401039   lea         edi,[ebp-40h]\t\t\t\t\t</span><br><span class=\"line\">0040103C   mov         ecx,10h\t\t\t\t\t</span><br><span class=\"line\">00401041   mov         eax,0CCCCCCCCh\t</span><br><span class=\"line\">--------------------------------------------------------------------</span><br><span class=\"line\">00401046   rep stos    dword ptr [edi]\t\t\t\t\t</span><br><span class=\"line\">00401048   mov         eax,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">0040104B   cmp         eax,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">0040104E   jle         00401059\t\t\t\t\t</span><br><span class=\"line\">00401050   mov         ecx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">00401053   mov         dword ptr [004225c4],ecx\t</span><br><span class=\"line\">--------------------------------------------------------------------</span><br><span class=\"line\">00401059   pop         edi\t\t\t\t\t</span><br><span class=\"line\">0040105A   pop         esi\t\t\t\t\t</span><br><span class=\"line\">0040105B   pop         ebx\t\t\t\t\t</span><br><span class=\"line\">0040105C   mov         esp,ebp\t\t\t\t\t</span><br><span class=\"line\">0040105E   pop         ebp\t\t\t\t\t</span><br><span class=\"line\">0040105F   ret\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数内部功能分析：</strong></p>\n<p>1、分析参数：[ebp+8]：X\t\t[ebp+0Ch]：Y</p>\n<p>2、分析局部变量：无</p>\n<p>3、分析全局变量：mov   dword ptr [004225c4],ecx</p>\n<p>4、功能分析：将参数X存到EAX中，然后比较EAX与参数Y的大小，如果X&lt;&#x3D;Y 那么跳转到00401059的位置，否则，将X的值存储到全局变量中</p>\n<p>5、返回值分析：无</p>\n<h1 id=\"if…else语句逆向分析\"><a href=\"#if…else语句逆向分析\" class=\"headerlink\" title=\"if…else语句逆向分析\"></a>if…else语句逆向分析</h1><p><strong>if…else语句反汇编判断：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">IF_BEGIN:</span><br><span class=\"line\">\t\t先执行各类影响标志位的指令</span><br><span class=\"line\">\t\tjxx ELSE_BEGIN</span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">IF_END:</span><br><span class=\"line\">\t\tjmp END</span><br><span class=\"line\">\t\tELSE_BEGIN：</span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">\t\tELSE_END：</span><br><span class=\"line\">END：</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点分析：</strong></p>\n<p>1、如果不跳转，那么会执行到jmp处，jmp直接跳转到END处</p>\n<p>2、如果跳转，则会直接跳过jmp END处的代码，直接执行后面的代码</p>\n<p><strong>总结：</strong>第一个jxx跳转的地址前面有一个jmp ,可以判断是if…else…语句</p>\n<p><strong>案例分析：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010B0   push        ebp\t\t\t\t\t</span><br><span class=\"line\">004010B1   mov         ebp,esp\t\t\t\t\t</span><br><span class=\"line\">004010B3   sub         esp,44h\t\t\t\t\t</span><br><span class=\"line\">004010B6   push        ebx\t\t\t\t\t</span><br><span class=\"line\">004010B7   push        esi\t\t\t\t\t</span><br><span class=\"line\">004010B8   push        edi\t\t\t\t\t</span><br><span class=\"line\">004010B9   lea         edi,[ebp-44h]\t\t\t\t\t</span><br><span class=\"line\">004010BC   mov         ecx,11h\t\t\t\t\t</span><br><span class=\"line\">004010C1   mov         eax,0CCCCCCCCh\t\t\t\t\t</span><br><span class=\"line\">004010C6   rep stos    dword ptr [edi]\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010C8   mov         eax,[004225c4]\t\t\t\t\t</span><br><span class=\"line\">004010CD   mov         dword ptr [ebp-4],eax\t\t\t\t\t</span><br><span class=\"line\">004010D0   mov         ecx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010D3   cmp         ecx,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010D6   jle         004010e6\t\t\t\t\t</span><br><span class=\"line\">004010D8   mov         edx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010DB   add         edx,dword ptr [ebp-4]\t\t\t\t\t</span><br><span class=\"line\">004010DE   mov         dword ptr [004225c4],edx\t\t\t\t\t</span><br><span class=\"line\">004010E4   jmp         004010f1\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010E6   mov         eax,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010E9   add         eax,dword ptr [ebp-4]\t\t\t\t\t</span><br><span class=\"line\">004010EC   mov         [004225c4],eax\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010F1   pop         edi\t\t\t\t\t</span><br><span class=\"line\">004010F2   pop         esi\t\t\t\t\t</span><br><span class=\"line\">004010F3   pop         ebx\t\t\t\t\t</span><br><span class=\"line\">004010F4   mov         esp,ebp\t\t\t\t\t</span><br><span class=\"line\">004010F6   pop         ebp\t\t\t\t\t</span><br><span class=\"line\">004010F7   ret\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数内部功能分析：</strong></p>\n<p>1、分析参数：[ebp+8]：X\t\t[ebp+0Ch]：Y</p>\n<p>2、分析局部变量：[ebp-4] &#x3D; eax &#x3D; [004225c4]</p>\n<p>3、分析全局变量： [004225c4]：G</p>\n<p>4、功能分析：比较X与Y的大小</p>\n<p>如果X&lt;&#x3D;Y  那么执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010E6   mov         eax,dword ptr [ebp+0Ch]\t\t//Y\t\t\t\t</span><br><span class=\"line\">004010E9   add         eax,dword ptr [ebp-4]\t\t//Y = Y + G\t\t\t</span><br><span class=\"line\">004010EC   mov         [004225c4],eax\t\t\t//G = Y</span><br></pre></td></tr></table></figure>\n\n<p>如果X&gt;Y 那么执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010D8   mov         edx,dword ptr [ebp+8]\t\t//X\t\t\t\t</span><br><span class=\"line\">004010DB   add         edx,dword ptr [ebp-4]\t\t//X = X + G\t\t\t\t\t</span><br><span class=\"line\">004010DE   mov         dword ptr [004225c4],edx\t\t//G = X\t\t\t\t</span><br><span class=\"line\">004010E4   jmp         004010f1</span><br></pre></td></tr></table></figure>\n\n<p>5、返回值分析：无</p>\n<h1 id=\"if…else-if…else语句逆向分析\"><a href=\"#if…else-if…else语句逆向分析\" class=\"headerlink\" title=\"if…else if…else语句逆向分析\"></a>if…else if…else语句逆向分析</h1><p><strong>IF…ELSE IF…ELSE IF..多分支语句的反汇编判断：</strong></p>\n<p><img src=\"/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416212606777.png\"></p>\n<p><strong>分析：</strong></p>\n<p>1、当每个条件跳转指令要跳转的地址前面都有jmp 指令</p>\n<p>2、这些jmp指令跳转的地址都是一样的</p>\n<p>3、如果某个分支没有条件判断，则为else部分</p>\n<p><strong>案例分析：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">004010B0   push        ebp\t\t\t\t\t</span><br><span class=\"line\">004010B1   mov         ebp,esp\t\t\t\t\t</span><br><span class=\"line\">004010B3   sub         esp,4Ch\t\t\t\t\t</span><br><span class=\"line\">004010B6   push        ebx\t\t\t\t\t</span><br><span class=\"line\">004010B7   push        esi\t\t\t\t\t</span><br><span class=\"line\">004010B8   push        edi\t\t\t\t\t</span><br><span class=\"line\">004010B9   lea         edi,[ebp-4Ch]\t\t\t\t\t</span><br><span class=\"line\">004010BC   mov         ecx,13h\t\t\t\t\t</span><br><span class=\"line\">004010C1   mov         eax,0CCCCCCCCh\t\t\t\t\t</span><br><span class=\"line\">004010C6   rep stos    dword ptr [edi]\t</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">004010C8   mov         dword ptr [ebp-4],0\t\t\t\t\t</span><br><span class=\"line\">004010CF   mov         dword ptr [ebp-8],1\t\t\t\t\t</span><br><span class=\"line\">004010D6   mov         dword ptr [ebp-0Ch],2\t\t\t\t\t</span><br><span class=\"line\">004010DD   mov         eax,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010E0   cmp         eax,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010E3   jle         004010f0\t\t\t\t\t</span><br><span class=\"line\">004010E5   mov         ecx,dword ptr [ebp-8]\t\t\t\t\t</span><br><span class=\"line\">004010E8   add         ecx,1\t\t\t\t\t</span><br><span class=\"line\">004010EB   mov         dword ptr [ebp-4],ecx\t\t\t\t\t</span><br><span class=\"line\">004010EE   jmp         00401123\t\t\t\t\t\t//jmp 00401123</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">004010F0   mov         edx,dword ptr [ebp+8]\t\t\t\t\t</span><br><span class=\"line\">004010F3   cmp         edx,dword ptr [ebp+10h]\t\t\t\t\t</span><br><span class=\"line\">004010F6   jle         00401103\t\t\t\t\t</span><br><span class=\"line\">004010F8   mov         eax,dword ptr [ebp-0Ch]\t\t\t\t\t</span><br><span class=\"line\">004010FB   add         eax,1\t\t\t\t\t</span><br><span class=\"line\">004010FE   mov         dword ptr [ebp-4],eax\t\t\t\t\t</span><br><span class=\"line\">00401101   jmp         00401123\t\t\t\t\t\t//jmp 00401123</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">00401103   mov         ecx,dword ptr [ebp+0Ch]\t\t\t\t\t</span><br><span class=\"line\">00401106   cmp         ecx,dword ptr [ebp+10h]\t\t\t\t\t</span><br><span class=\"line\">00401109   jle         00401116\t\t\t\t\t</span><br><span class=\"line\">0040110B   mov         edx,dword ptr [ebp-8]\t\t\t\t\t</span><br><span class=\"line\">0040110E   add         edx,dword ptr [ebp-0Ch]\t\t\t\t\t</span><br><span class=\"line\">00401111   mov         dword ptr [ebp-4],edx\t\t\t\t\t</span><br><span class=\"line\">00401114   jmp         00401123\t\t\t\t\t\t//jmp 00401123</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">00401116   mov         eax,dword ptr [ebp-0Ch]\t\t\t\t\t</span><br><span class=\"line\">00401119   mov         ecx,dword ptr [ebp-8]\t\t\t\t\t</span><br><span class=\"line\">0040111C   lea         edx,[ecx+eax+1]\t\t\t\t\t</span><br><span class=\"line\">00401120   mov         dword ptr [ebp-4],edx\t</span><br><span class=\"line\">-----------------------------------------------------------</span><br><span class=\"line\">00401123   mov         eax,dword ptr [ebp-4]\t\t\t\t\t</span><br><span class=\"line\">00401126   pop         edi\t\t\t\t\t</span><br><span class=\"line\">00401127   pop         esi\t\t\t\t\t</span><br><span class=\"line\">00401128   pop         ebx\t\t\t\t\t</span><br><span class=\"line\">00401129   mov         esp,ebp\t\t\t\t\t</span><br><span class=\"line\">0040112B   pop         ebp\t\t\t\t\t</span><br><span class=\"line\">0040112C   ret\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数内部功能分析：</strong></p>\n<p>1、分析参数：[ebp+8]：X\t\t[ebp+0Ch]：Y\t\t[ebp-0Ch]：Z</p>\n<p>2、分析局部变量：[ebp-4] &#x3D; A &#x3D; 0\t\t[ebp-8] &#x3D; B &#x3D; 1\t\t[ebp-0C] &#x3D; C &#x3D; 2</p>\n<p>3、分析全局变量：无</p>\n<p>4、功能分析：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(x &gt; y)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = B + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; z)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = C + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &gt; z)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = B + C\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">else</span>\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">    A = B + C + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t</span><br><span class=\"line\"><span class=\"keyword\">return</span> A;\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><em>注意函数返回值的写法，以eax传出。</em></p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]},{"title":"逆向分析：switch语句","url":"/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/","content":"<p>本章探究switch语句的反汇编表现形式及特点。</p>\n<span id=\"more\"></span>\n\n<p><strong>1、先来看看当case分支较少时的反汇编代码</strong></p>\n<p>测试代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Func</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>(x)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        switch(x)</span><br><span class=\"line\">7:        &#123;</span><br><span class=\"line\">0040D708 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class=\"line\">0040D70B 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class=\"line\">0040D70E 83 7D FC 01          cmp         dword ptr [ebp-4],1</span><br><span class=\"line\">0040D712 74 0E                je          Func+32h (0040d722)</span><br><span class=\"line\">0040D714 83 7D FC 02          cmp         dword ptr [ebp-4],2</span><br><span class=\"line\">0040D718 74 17                je          Func+41h (0040d731)</span><br><span class=\"line\">0040D71A 83 7D FC 03          cmp         dword ptr [ebp-4],3</span><br><span class=\"line\">0040D71E 74 20                je          Func+50h (0040d740)</span><br><span class=\"line\">0040D720 EB 2D                jmp         Func+5Fh (0040d74f)</span><br><span class=\"line\">8:        case 1:</span><br><span class=\"line\">9:            printf(&quot;1\\n&quot;);</span><br><span class=\"line\">0040D722 68 74 2F 42 00       push        offset string &quot;1\\n&quot; (00422f74)</span><br><span class=\"line\">0040D727 E8 34 39 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D72C 83 C4 04             add         esp,4</span><br><span class=\"line\">10:           break;</span><br><span class=\"line\">0040D72F EB 2B                jmp         Func+6Ch (0040d75c)</span><br><span class=\"line\">11:       case 2:</span><br><span class=\"line\">12:           printf(&quot;2\\n&quot;);</span><br><span class=\"line\">0040D731 68 70 2F 42 00       push        offset string &quot;2\\n&quot; (00422f70)</span><br><span class=\"line\">0040D736 E8 25 39 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D73B 83 C4 04             add         esp,4</span><br><span class=\"line\">13:           break;</span><br><span class=\"line\">0040D73E EB 1C                jmp         Func+6Ch (0040d75c)</span><br><span class=\"line\">14:       case 3:</span><br><span class=\"line\">15:           printf(&quot;3\\n&quot;);</span><br><span class=\"line\">0040D740 68 0C 21 42 00       push        offset string &quot;3\\n&quot; (0042210c)</span><br><span class=\"line\">0040D745 E8 16 39 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D74A 83 C4 04             add         esp,4</span><br><span class=\"line\">16:           break;</span><br><span class=\"line\">0040D74D EB 0D                jmp         Func+6Ch (0040d75c)</span><br><span class=\"line\">17:       default:</span><br><span class=\"line\">18:           printf(&quot;0\\n&quot;);</span><br><span class=\"line\">0040D74F 68 6C 2F 42 00       push        offset string &quot;%d %d %d&quot; (00422f6c)</span><br><span class=\"line\">0040D754 E8 07 39 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D759 83 C4 04             add         esp,4</span><br><span class=\"line\">19:           break;</span><br><span class=\"line\">20:       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>就目前的情况来看，似乎与if…else语句没什么性能上的差异，只不过是把比较的代码全部放到了前面，但也是挨个依次比较判断。<strong>这种情况下与if…else语句没有本质上的区别</strong>。</p>\n<p><strong>2、逐渐增加case的情况分支，观察反汇编代码的情况(何时生成大表)</strong></p>\n<p>在VC++6.0编译器中，当分支有4个时，反汇编发生了变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        switch(x)</span><br><span class=\"line\">7:        &#123;</span><br><span class=\"line\">0040D7C8 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class=\"line\">0040D7CB 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class=\"line\">0040D7CE 8B 4D FC             mov         ecx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7D1 83 E9 01             sub         ecx,1\t\t;注意这里</span><br><span class=\"line\">0040D7D4 89 4D FC             mov         dword ptr [ebp-4],ecx</span><br><span class=\"line\">0040D7D7 83 7D FC 03          cmp         dword ptr [ebp-4],3</span><br><span class=\"line\">0040D7DB 77 46                ja          $L42202+0Fh (0040d823)</span><br><span class=\"line\">0040D7DD 8B 55 FC             mov         edx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7E0 FF 24 95 41 D8 40 00 jmp         dword ptr [edx*4+40D841h]\t;还有这里</span><br><span class=\"line\">8:        case 1:</span><br><span class=\"line\">9:            printf(&quot;1\\n&quot;);</span><br><span class=\"line\">0040D7E7 68 A8 2F 42 00       push        offset string &quot;1\\n&quot; (00422fa8)</span><br><span class=\"line\">0040D7EC E8 6F 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D7F1 83 C4 04             add         esp,4</span><br><span class=\"line\">10:           break;</span><br><span class=\"line\">0040D7F4 EB 3A                jmp         $L42202+1Ch (0040d830)</span><br><span class=\"line\">11:       case 2:</span><br><span class=\"line\">12:           printf(&quot;2\\n&quot;);</span><br><span class=\"line\">0040D7F6 68 74 2F 42 00       push        offset string &quot;2\\n&quot; (00422f74)</span><br><span class=\"line\">0040D7FB E8 60 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D800 83 C4 04             add         esp,4</span><br><span class=\"line\">13:           break;</span><br><span class=\"line\">0040D803 EB 2B                jmp         $L42202+1Ch (0040d830)</span><br><span class=\"line\">14:       case 3:</span><br><span class=\"line\">15:           printf(&quot;3\\n&quot;);</span><br><span class=\"line\">0040D805 68 70 2F 42 00       push        offset string &quot;3\\n&quot; (00422f70)</span><br><span class=\"line\">0040D80A E8 51 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D80F 83 C4 04             add         esp,4</span><br><span class=\"line\">16:           break;</span><br><span class=\"line\">0040D812 EB 1C                jmp         $L42202+1Ch (0040d830)</span><br><span class=\"line\">17:       case 4:</span><br><span class=\"line\">18:           printf(&quot;4\\n&quot;);</span><br><span class=\"line\">0040D814 68 0C 21 42 00       push        offset string &quot;4\\n&quot; (0042210c)</span><br><span class=\"line\">0040D819 E8 42 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D81E 83 C4 04             add         esp,4</span><br><span class=\"line\">19:           break;</span><br><span class=\"line\">0040D821 EB 0D                jmp         $L42202+1Ch (0040d830)</span><br><span class=\"line\">20:       default:</span><br><span class=\"line\">21:           printf(&quot;0\\n&quot;);</span><br><span class=\"line\">0040D823 68 6C 2F 42 00       push        offset string &quot;%d %d %d\\n&quot; (00422f6c)</span><br><span class=\"line\">0040D828 E8 33 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D82D 83 C4 04             add         esp,4</span><br><span class=\"line\">22:           break;</span><br><span class=\"line\">23:       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里有个问题，以正向的角度来看，根据传进来的值与4比较，如果比4大，那么跳转到default分支。然而在反汇编中，是将传进来的值减去1后(实际上是减去分支中的最小值)与3去比较。</p>\n<p>接着往后分析，如果参数满足其中某一个分支，则不跳转到default，将参数传到了edx中，然后跳转到了一个地址中去。这个地址的样子是这样的：[edx*4+40D841h]。现在来看一下40D841h是什么。</p>\n<p><img src=\"/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/1.PNG\"></p>\n<p>可以看到，在40D841h中存的是一张表，这个表里面有四个地址，分别对应的是switch中的四种情况。edx*4作为一个偏移来找到正确的表项。因此前面ecx-1的目的正是为了让分支的值从0开始，便于计算表的偏移。如果case的值是从2开始的，那么就应该是ecx-2。</p>\n<p>上面生成的这张表就叫<strong>大表</strong>，表项是各个分支语句的地址。</p>\n<p>这里已经可以看出来switch与if…else语句性能的差异了。if…else语句需要判断很多次是否满足条件，而switch在case很多的情况下，只需要一条跳转语句jmp dword ptr [edx*4+40D841h]就够了，性能完爆if…else语句。</p>\n<p>接着做测试，当case的值连接但是顺序混乱时，仍然不影响大表的生成。读者可以自行做测试。</p>\n<p><em>注：不一定每个编译器都是4条case才生成大表，不同编译器有不同的算法。</em></p>\n<p><strong>3、将连续的10项中抹去1项或者2项，观察反汇编有无变化(观察大表空缺位置的处理)</strong></p>\n<p>测试代码及其反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        switch(x)</span><br><span class=\"line\">7:        &#123;</span><br><span class=\"line\">0040D7C8 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class=\"line\">0040D7CB 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class=\"line\">0040D7CE 8B 4D FC             mov         ecx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7D1 83 E9 01             sub         ecx,1</span><br><span class=\"line\">0040D7D4 89 4D FC             mov         dword ptr [ebp-4],ecx</span><br><span class=\"line\">0040D7D7 83 7D FC 09          cmp         dword ptr [ebp-4],9</span><br><span class=\"line\">0040D7DB 0F 87 82 00 00 00    ja          $L42210+0Fh (0040d863)</span><br><span class=\"line\">0040D7E1 8B 55 FC             mov         edx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7E4 FF 24 95 81 D8 40 00 jmp         dword ptr [edx*4+40D881h]</span><br><span class=\"line\">8:        case 1:</span><br><span class=\"line\">9:            printf(&quot;1\\n&quot;);</span><br><span class=\"line\">0040D7EB 68 B8 2F 42 00       push        offset string &quot;1\\n&quot; (00422fb8)</span><br><span class=\"line\">0040D7F0 E8 6B 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D7F5 83 C4 04             add         esp,4</span><br><span class=\"line\">10:           break;</span><br><span class=\"line\">0040D7F8 EB 76                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">11:       case 2:</span><br><span class=\"line\">12:           printf(&quot;2\\n&quot;);</span><br><span class=\"line\">0040D7FA 68 B4 2F 42 00       push        offset string &quot;2\\n&quot; (00422fb4)</span><br><span class=\"line\">0040D7FF E8 5C 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D804 83 C4 04             add         esp,4</span><br><span class=\"line\">13:           break;</span><br><span class=\"line\">0040D807 EB 67                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">14:       case 4:</span><br><span class=\"line\">15:           printf(&quot;4\\n&quot;);</span><br><span class=\"line\">0040D809 68 B0 2F 42 00       push        offset string &quot;5\\n&quot; (00422fb0)</span><br><span class=\"line\">0040D80E E8 4D 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D813 83 C4 04             add         esp,4</span><br><span class=\"line\">16:           break;</span><br><span class=\"line\">0040D816 EB 58                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">17:       case 6:</span><br><span class=\"line\">18:           printf(&quot;6\\n&quot;);</span><br><span class=\"line\">0040D818 68 AC 2F 42 00       push        offset string &quot;6\\n&quot; (00422fac)</span><br><span class=\"line\">0040D81D E8 3E 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D822 83 C4 04             add         esp,4</span><br><span class=\"line\">19:           break;</span><br><span class=\"line\">0040D825 EB 49                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">20:       case 7:</span><br><span class=\"line\">21:           printf(&quot;7\\n&quot;);</span><br><span class=\"line\">0040D827 68 A8 2F 42 00       push        offset string &quot;7\\n&quot; (00422fa8)</span><br><span class=\"line\">0040D82C E8 2F 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D831 83 C4 04             add         esp,4</span><br><span class=\"line\">22:           break;</span><br><span class=\"line\">0040D834 EB 3A                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">23:       case 8:</span><br><span class=\"line\">24:           printf(&quot;8\\n&quot;);</span><br><span class=\"line\">0040D836 68 74 2F 42 00       push        offset string &quot;8\\n&quot; (00422f74)</span><br><span class=\"line\">0040D83B E8 20 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D840 83 C4 04             add         esp,4</span><br><span class=\"line\">25:           break;</span><br><span class=\"line\">0040D843 EB 2B                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">26:       case 9:</span><br><span class=\"line\">27:           printf(&quot;9\\n&quot;);</span><br><span class=\"line\">0040D845 68 70 2F 42 00       push        offset string &quot;9\\n&quot; (00422f70)</span><br><span class=\"line\">0040D84A E8 11 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D84F 83 C4 04             add         esp,4</span><br><span class=\"line\">28:           break;</span><br><span class=\"line\">0040D852 EB 1C                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">29:       case 10:</span><br><span class=\"line\">30:           printf(&quot;10\\n&quot;);</span><br><span class=\"line\">0040D854 68 0C 21 42 00       push        offset string &quot;10\\n&quot; (0042210c)</span><br><span class=\"line\">0040D859 E8 02 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D85E 83 C4 04             add         esp,4</span><br><span class=\"line\">31:           break;</span><br><span class=\"line\">0040D861 EB 0D                jmp         $L42210+1Ch (0040d870)</span><br><span class=\"line\">32:       default:</span><br><span class=\"line\">33:           printf(&quot;0\\n&quot;);</span><br><span class=\"line\">0040D863 68 6C 2F 42 00       push        offset string &quot;%d %d %d\\n&quot; (00422f6c)</span><br><span class=\"line\">0040D868 E8 F3 37 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D86D 83 C4 04             add         esp,4</span><br><span class=\"line\">34:           break;</span><br><span class=\"line\">35:       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在x从1-10的分支中删除掉了3和5两个分支，反汇编代码基本的结构没有改变，仍然生成了大表，查看一下大表</p>\n<p><img src=\"/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/3.PNG\"></p>\n<p>可以发现，表里面仍然有十个地址，观察一下删除掉的3和5分支，可以看到表里面对应的内容为40D863，这个地址为default的地址。因此可以而出结论，在连续数据有个别缺失时，编译器会进行填补，填补的内容为default的地址。</p>\n<p><strong>4、在10项中连续抹去，不要抹去最大值和最小值(观察何时生成小表)</strong></p>\n<p>在上面删除一两项时，编译器会用default的地址填充空缺的位置。但是这样会有一个问题，就是会造成内存的浪费，因为default的地址本来就写在那里，不需要去填充它。因此，编译器不会允许无限制的填充下去。</p>\n<p>经测试，在VC++6.0中，连续空缺6个分支，switch的反汇编会发生变化。</p>\n<p>测试代码及其反汇编如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">switch(x)</span><br><span class=\"line\">7:        &#123;</span><br><span class=\"line\">0040D7C8 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class=\"line\">0040D7CB 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class=\"line\">0040D7CE 8B 4D FC             mov         ecx,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7D1 83 E9 01             sub         ecx,1</span><br><span class=\"line\">0040D7D4 89 4D FC             mov         dword ptr [ebp-4],ecx</span><br><span class=\"line\">0040D7D7 83 7D FC 09          cmp         dword ptr [ebp-4],9</span><br><span class=\"line\">0040D7DB 77 4E                ja          $L42202+0Fh (0040d82b)</span><br><span class=\"line\">0040D7DD 8B 45 FC             mov         eax,dword ptr [ebp-4]</span><br><span class=\"line\">0040D7E0 33 D2                xor         edx,edx</span><br><span class=\"line\">0040D7E2 8A 90 5D D8 40 00    mov         dl,byte ptr  (0040d85d)[eax]\t;注意这里</span><br><span class=\"line\">0040D7E8 FF 24 95 49 D8 40 00 jmp         dword ptr [edx*4+40D849h]</span><br><span class=\"line\">8:        case 1:</span><br><span class=\"line\">9:            printf(&quot;1\\n&quot;);</span><br><span class=\"line\">0040D7EF 68 A8 2F 42 00       push        offset string &quot;7\\n&quot; (00422fa8)</span><br><span class=\"line\">0040D7F4 E8 67 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D7F9 83 C4 04             add         esp,4</span><br><span class=\"line\">10:           break;</span><br><span class=\"line\">0040D7FC EB 3A                jmp         $L42202+1Ch (0040d838)</span><br><span class=\"line\">11:       case 8:</span><br><span class=\"line\">12:           printf(&quot;8\\n&quot;);</span><br><span class=\"line\">0040D7FE 68 74 2F 42 00       push        offset string &quot;8\\n&quot; (00422f74)</span><br><span class=\"line\">0040D803 E8 58 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D808 83 C4 04             add         esp,4</span><br><span class=\"line\">13:           break;</span><br><span class=\"line\">0040D80B EB 2B                jmp         $L42202+1Ch (0040d838)</span><br><span class=\"line\">14:       case 9:</span><br><span class=\"line\">15:           printf(&quot;9\\n&quot;);</span><br><span class=\"line\">0040D80D 68 70 2F 42 00       push        offset string &quot;9\\n&quot; (00422f70)</span><br><span class=\"line\">0040D812 E8 49 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D817 83 C4 04             add         esp,4</span><br><span class=\"line\">16:           break;</span><br><span class=\"line\">0040D81A EB 1C                jmp         $L42202+1Ch (0040d838)</span><br><span class=\"line\">17:       case 10:</span><br><span class=\"line\">18:           printf(&quot;10\\n&quot;);</span><br><span class=\"line\">0040D81C 68 0C 21 42 00       push        offset string &quot;10\\n&quot; (0042210c)</span><br><span class=\"line\">0040D821 E8 3A 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D826 83 C4 04             add         esp,4</span><br><span class=\"line\">19:           break;</span><br><span class=\"line\">0040D829 EB 0D                jmp         $L42202+1Ch (0040d838)</span><br><span class=\"line\">20:       default:</span><br><span class=\"line\">21:           printf(&quot;0\\n&quot;);</span><br><span class=\"line\">0040D82B 68 6C 2F 42 00       push        offset string &quot;%d %d %d\\n&quot; (00422f6c)</span><br><span class=\"line\">0040D830 E8 2B 38 FF FF       call        printf (00401060)</span><br><span class=\"line\">0040D835 83 C4 04             add         esp,4</span><br><span class=\"line\">22:           break;</span><br><span class=\"line\">23:       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>大体的结构没有改变，但是这里面多出来了两行，将ecx-1后传给了eax，eax作为索引在小表(0040d85d)处获取内容。然后再将获取到的内容传给edx，edx再作为索引去大表(40D849)得到相应的地址。先来看看大表的内容：<img src=\"/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/4.PNG\"></p>\n<p>可以发现，这时大表里面只有5个地址，分别是四个分支和一个default。小表紧跟在大表的后面。小表里面的0、1、2、3分别索引到大表的内容是四个分支，4索引到的是大表中default的地址。</p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]},{"title":"逆向分析：循环语句","url":"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/","content":"<p>上一次学习了全局变量和局部变量的特点，并分析了if语句在反汇编中的样子，今天来分析<strong>循环语句</strong>。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"do…while循环语句\"><a href=\"#do…while循环语句\" class=\"headerlink\" title=\"do…while循环语句\"></a>do…while循环语句</h1><p>do…while语句语法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//执行代码\t</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(表达式)\t\t</span><br></pre></td></tr></table></figure>\n\n<p>do…while语句反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DO_BEGIN地址:</span><br><span class=\"line\">\t\t影响标志位的指令</span><br><span class=\"line\">\t\tjxx DO_BEGIN</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<p><img src=\"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/1.PNG\"></p>\n<p>总结：</p>\n<p>1、根据条件跳转指令所跳转到的地址，可以得到循环语句块的起始地址。</p>\n<p>2、根据条件跳转指令所在的地址，可以得到循环语句块的结束地址。</p>\n<p>3、条件跳转的逻辑与源码相同。</p>\n<h1 id=\"while循环语句\"><a href=\"#while循环语句\" class=\"headerlink\" title=\"while循环语句\"></a>while循环语句</h1><p>while语句语法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(表达式)\t\t</span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//执行代码\t</span></span><br><span class=\"line\">&#125;\t\t</span><br></pre></td></tr></table></figure>\n\n<p>while语句反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">WHILE_BEGIN:\t\t\t\t\t\t</span><br><span class=\"line\">\t影响标志位的指令\t\t\t\t\t</span><br><span class=\"line\">\tjxx WHILE_END ;条件成立跳转到循环语句块结尾处\t\t\t\t\t</span><br><span class=\"line\">\t......\t\t\t\t\t</span><br><span class=\"line\">\tjmp WHILE_BEGIN ;跳转到条件比较处\t\t\t\t\t</span><br><span class=\"line\">WHILE_END:\t\t\t\t\t\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<p><img src=\"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/2.PNG\"></p>\n<p>总结：</p>\n<p>1、根据条件跳转指令所跳转到的地址，可以得到循环语句块的结束地址。</p>\n<p>2、根据jmp指令所跳转到的地址，可以得到循环语句块的起始地址。</p>\n<p>3、在还原while 比较时，条件跳转的逻辑与源码相反</p>\n<h1 id=\"for循环语句\"><a href=\"#for循环语句\" class=\"headerlink\" title=\"for循环语句\"></a>for循环语句</h1><p>for语句语法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(表达式<span class=\"number\">1</span>；表达式<span class=\"number\">2</span>；表达式<span class=\"number\">3</span>)\t\t\t</span><br><span class=\"line\">&#123;\t\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">//执行的代码\t\t</span></span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>for循环的执行次序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">表达式1\t\t\t</span><br><span class=\"line\">表达式2\t\t\t</span><br><span class=\"line\">执行的代码(大括号里面的内容)\t\t\t</span><br><span class=\"line\">表达式3\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">表达式2 //如果表达式2成立\t\t\t</span><br><span class=\"line\">执行的代码(大括号里面的内容)\t\t\t</span><br><span class=\"line\">表达式3\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">表达式2 //如果表达式2成立\t\t\t</span><br><span class=\"line\">执行的代码(大括号里面的内容)\t\t\t</span><br><span class=\"line\">表达式3\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">表达式2 //如果不成立\t\t\t</span><br><span class=\"line\">跳出循环\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<p><img src=\"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/3.PNG\"></p>\n<p>总结：</p>\n<p>1、第一个jmp 指令之前为赋初值部分。</p>\n<p>2、第一个jmp 指令所跳转的地址为循环条件判定部分起始。</p>\n<p>3、判断条件后面的跳转指令条件成立时跳转的循环体外面。</p>\n<p>4、条件判断跳转指令所指向的地址上面有一个jmp，jmp地址为表达式3的起始位置。</p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]},{"title":"逆向分析：参数、返回值和数组","url":"/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%8F%82%E6%95%B0%E3%80%81%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8C%E6%95%B0%E7%BB%84/","content":"<p>这次来分析参数、返回值和数组在反汇编中的表现形式。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"返回值的传递\"><a href=\"#返回值的传递\" class=\"headerlink\" title=\"返回值的传递\"></a>返回值的传递</h1><p>以char、short和int类型的返回值为例，先来看看char类型的返回值，测试代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> g_r = <span class=\"number\">1</span>;\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//返回值类型为char的函数\t\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"title function_\">Fun</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> g_r + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a = Fun();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, a);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Fun函数在反汇编中的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00401030 55                   push        ebp</span><br><span class=\"line\">00401031 8B EC                mov         ebp,esp</span><br><span class=\"line\">00401033 83 EC 40             sub         esp,40h</span><br><span class=\"line\">00401036 53                   push        ebx</span><br><span class=\"line\">00401037 56                   push        esi</span><br><span class=\"line\">00401038 57                   push        edi</span><br><span class=\"line\">00401039 8D 7D C0             lea         edi,[ebp-40h]</span><br><span class=\"line\">0040103C B9 10 00 00 00       mov         ecx,10h</span><br><span class=\"line\">00401041 B8 CC CC CC CC       mov         eax,0CCCCCCCCh</span><br><span class=\"line\">00401046 F3 AB                rep stos    dword ptr [edi]</span><br><span class=\"line\">00401048 0F BE 05 14 6B 42 00 movsx       eax,byte ptr [g_r (00426b14)]\t;注意这里的byte</span><br><span class=\"line\">0040104F 83 C0 01             add         eax,1</span><br><span class=\"line\">00401052 5F                   pop         edi</span><br><span class=\"line\">00401053 5E                   pop         esi</span><br><span class=\"line\">00401054 5B                   pop         ebx</span><br><span class=\"line\">00401055 8B E5                mov         esp,ebp</span><br><span class=\"line\">00401057 5D                   pop         ebp</span><br><span class=\"line\">00401058 C3                   ret</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这里用全局变量的符号位填入eax中，然后再向eax中低8位（byte）填入这个全局变量的值。</p>\n<p>当返回值的类型变为short和int时，byte也相应的变为了word和dword。</p>\n<p>由此可见，返回值的传递类型在汇编与源代码中是一致的。</p>\n<h1 id=\"参数的传递\"><a href=\"#参数的传递\" class=\"headerlink\" title=\"参数的传递\"></a>参数的传递</h1><p>以char、short和int类型的参数为例，先来看看char类型的参数，测试代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Function</span><span class=\"params\">(<span class=\"type\">char</span> x,<span class=\"type\">char</span> y,<span class=\"type\">char</span> z)</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">\tFunction(a, b, c);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在函数调用处查看反汇编代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">11:       char a = 1;\t\t\t\t\t\t\t</span><br><span class=\"line\">00401068 C6 45 FC 01          mov         byte ptr [ebp-4],1\t\t\t\t\t\t\t</span><br><span class=\"line\">12:       char b = 2;\t\t\t\t\t\t\t</span><br><span class=\"line\">0040106C C6 45 F8 02          mov         byte ptr [ebp-8],2\t\t\t\t\t\t\t</span><br><span class=\"line\">13:       char c = 3;\t\t\t\t\t\t\t</span><br><span class=\"line\">00401070 C6 45 F4 03          mov         byte ptr [ebp-0Ch],3\t\t\t\t\t\t\t</span><br><span class=\"line\">14:       Function(a, b, c);\t\t\t\t\t\t\t</span><br><span class=\"line\">00401074 8A 45 F4             mov         al,byte ptr [ebp-0Ch]\t\t\t\t\t\t\t</span><br><span class=\"line\">00401077 50                   push        eax\t\t\t\t\t\t\t</span><br><span class=\"line\">00401078 8A 4D F8             mov         cl,byte ptr [ebp-8]\t\t\t\t\t\t\t</span><br><span class=\"line\">0040107B 51                   push        ecx\t\t\t\t\t\t\t</span><br><span class=\"line\">0040107C 8A 55 FC             mov         dl,byte ptr [ebp-4]\t\t\t\t\t\t\t</span><br><span class=\"line\">0040107F 52                   push        edx\t\t\t\t\t\t\t</span><br><span class=\"line\">00401080 E8 80 FF FF FF       call        @ILT+0(Function) (00401005)\t\t\t\t\t</span><br><span class=\"line\">00401085 83 C4 0C             add         esp,0Ch\t\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，当参数以char类型传递时，虽然是将byte（1个字节）传给了eax，但是在调用函数前仍然push的是eax（4个字节）。当char类型换成short和int时，不同的只是eax寄存器的利用空间。因此，当参数是char和short类型时，造成了空间的浪费。</p>\n<p><em><u>因此建议，传入整数类型的参数时，应该使用int类型（4个字节）。</u></em></p>\n<p>补充一个思考题，代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数定义：\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Plus</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\tx = x + <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//入口函数\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = <span class=\"number\">1</span>;\t\t\t\t\t</span><br><span class=\"line\">\tPlus(x);\t\t\t\t\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,x);\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>这个程序打印出来的结果是1，而不是2。原因在反汇编代码中很容易看出来，在调用函数前，将x重新push了一次到Plus函数的栈中。因此Plus操作的是Plus函数栈中的那个x，而打印原来的x值没有变。</p>\n<h1 id=\"局部变量的内存分配\"><a href=\"#局部变量的内存分配\" class=\"headerlink\" title=\"局部变量的内存分配\"></a>局部变量的内存分配</h1><p>测试程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Function</span><span class=\"params\">()</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> a = <span class=\"number\">1</span>;\t\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> b = <span class=\"number\">2</span>;\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"type\">short</span> c = <span class=\"number\">3</span>;\t\t</span><br><span class=\"line\">\t<span class=\"type\">short</span> d = <span class=\"number\">4</span>;\t\t\t\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>测试程序的反汇编代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        char a = 1;</span><br><span class=\"line\">0040F028 C6 45 FC 01          mov         byte ptr [ebp-4],1</span><br><span class=\"line\">7:        char b = 2;</span><br><span class=\"line\">0040F02C C6 45 F8 02          mov         byte ptr [ebp-8],2</span><br><span class=\"line\">8:</span><br><span class=\"line\">9:        short c = 3;</span><br><span class=\"line\">0040F030 66 C7 45 F4 03 00    mov         word ptr [ebp-0Ch],offset Function+24h (0040f034)</span><br><span class=\"line\">10:       short d = 4;</span><br><span class=\"line\">0040F036 66 C7 45 F0 04 00    mov         word ptr [ebp-10h],offset Function+2Ah (0040f03a)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，不管局部变量是char还是short类型，尽管他们在赋值的时候是按照对应的长度byte(1字节)和word(2字节)来赋值，但是这些变量之间的间隔仍然是4字节。因此可以总结如下：</p>\n<p>1、小于32位的局部变量，空间在分配时，按32位分配。</p>\n<p>2、使用时按实际的宽度使用。</p>\n<p>3、不要定义char&#x2F;short类型的局部变量。</p>\n<p>4、<u>参数与局部变量没有本质区别，都是局部变量，都在栈中分配。</u></p>\n<p>5、完全可以把参数当初局部变量使用。</p>\n<h1 id=\"数组的反汇编\"><a href=\"#数组的反汇编\" class=\"headerlink\" title=\"数组的反汇编\"></a>数组的反汇编</h1><p>先来看局部变量是如何入栈的，测试程序及反汇编如下\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        int v_0 = 1;</span><br><span class=\"line\">00401038 C7 45 FC 01 00 00 00 mov         dword ptr [ebp-4],1</span><br><span class=\"line\">7:        int v_1 = 2;</span><br><span class=\"line\">0040103F C7 45 F8 02 00 00 00 mov         dword ptr [ebp-8],2</span><br><span class=\"line\">8:        int v_2 = 3;</span><br><span class=\"line\">00401046 C7 45 F4 03 00 00 00 mov         dword ptr [ebp-0Ch],3</span><br><span class=\"line\">9:        int v_3 = 4;</span><br><span class=\"line\">0040104D C7 45 F0 04 00 00 00 mov         dword ptr [ebp-10h],4</span><br><span class=\"line\">10:       int v_4 = 5;</span><br><span class=\"line\">00401054 C7 45 EC 05 00 00 00 mov         dword ptr [ebp-14h],5</span><br><span class=\"line\">11:       int v_5 = 6;</span><br><span class=\"line\">0040105B C7 45 E8 06 00 00 00 mov         dword ptr [ebp-18h],6</span><br><span class=\"line\">12:       int v_6 = 7;</span><br><span class=\"line\">00401062 C7 45 E4 07 00 00 00 mov         dword ptr [ebp-1Ch],7</span><br><span class=\"line\">13:       int v_7 = 8;</span><br><span class=\"line\">00401069 C7 45 E0 08 00 00 00 mov         dword ptr [ebp-20h],8</span><br><span class=\"line\">14:       int v_8 = 9;</span><br><span class=\"line\">00401070 C7 45 DC 09 00 00 00 mov         dword ptr [ebp-24h],9</span><br><span class=\"line\">15:       int v_9 = 10;</span><br><span class=\"line\">00401077 C7 45 D8 0A 00 00 00 mov         dword ptr [ebp-28h],0Ah</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这些局部变量是按定义顺序依次入栈的。</p>\n<p>然后来看看将它们写成数组时，反汇编是什么样子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        int arr[10] = &#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class=\"line\">00401038 C7 45 D8 01 00 00 00 mov         dword ptr [ebp-28h],1</span><br><span class=\"line\">0040103F C7 45 DC 02 00 00 00 mov         dword ptr [ebp-24h],2</span><br><span class=\"line\">00401046 C7 45 E0 03 00 00 00 mov         dword ptr [ebp-20h],3</span><br><span class=\"line\">0040104D C7 45 E4 04 00 00 00 mov         dword ptr [ebp-1Ch],4</span><br><span class=\"line\">00401054 C7 45 E8 05 00 00 00 mov         dword ptr [ebp-18h],5</span><br><span class=\"line\">0040105B C7 45 EC 06 00 00 00 mov         dword ptr [ebp-14h],6</span><br><span class=\"line\">00401062 C7 45 F0 07 00 00 00 mov         dword ptr [ebp-10h],7</span><br><span class=\"line\">00401069 C7 45 F4 08 00 00 00 mov         dword ptr [ebp-0Ch],8</span><br><span class=\"line\">00401070 C7 45 F8 09 00 00 00 mov         dword ptr [ebp-8],9</span><br><span class=\"line\">00401077 C7 45 FC 0A 00 00 00 mov         dword ptr [ebp-4],0Ah</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，当写成数组时，数据存入栈的顺序是从后向前，即先存最后的10，依次向前。与前面正好相反。</p>\n<h1 id=\"补充几个小练习\"><a href=\"#补充几个小练习\" class=\"headerlink\" title=\"补充几个小练习\"></a>补充几个小练习</h1><p>1、返回值超过32位时，存在哪里？用long long(__int64)类型做实验</p>\n<p>测试代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">__int64 <span class=\"title function_\">Function</span><span class=\"params\">()</span>\t\t\t</span><br><span class=\"line\">&#123;\t\t\t</span><br><span class=\"line\">\t__int64 x = <span class=\"number\">0x1234567890</span>;\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x;\t\t</span><br><span class=\"line\">&#125;\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>查看反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        __int64 x = 0x1234567890;</span><br><span class=\"line\">00401038 C7 45 F8 90 78 56 34 mov         dword ptr [ebp-8],34567890h</span><br><span class=\"line\">0040103F C7 45 FC 12 00 00 00 mov         dword ptr [ebp-4],12h</span><br><span class=\"line\">7:        return x;</span><br><span class=\"line\">00401046 8B 45 F8             mov         eax,dword ptr [ebp-8]</span><br><span class=\"line\">00401049 8B 55 FC             mov         edx,dword ptr [ebp-4]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，返回值位64位时，使用了两个寄存器来存储。</p>\n<p>2、探究char arr[3] &#x3D; {1,2,3};与 char arr[4] &#x3D; {1,2,3,4};哪个更节省空间？</p>\n<p>先来看char arr[3] &#x3D; {1,2,3};的反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        char arr[3] = &#123;1, 2, 3&#125;;</span><br><span class=\"line\">00401038 C6 45 FC 01          mov         byte ptr [ebp-4],1</span><br><span class=\"line\">0040103C C6 45 FD 02          mov         byte ptr [ebp-3],2</span><br><span class=\"line\">00401040 C6 45 FE 03          mov         byte ptr [ebp-2],3</span><br></pre></td></tr></table></figure>\n\n<p>然后再来看char arr[4] &#x3D; {1,2,3,4};的反汇编</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">6:        char arr[4] = &#123;1, 2, 3, 4&#125;;</span><br><span class=\"line\">00401038 C6 45 FC 01          mov         byte ptr [ebp-4],1</span><br><span class=\"line\">0040103C C6 45 FD 02          mov         byte ptr [ebp-3],2</span><br><span class=\"line\">00401040 C6 45 FE 03          mov         byte ptr [ebp-2],3</span><br><span class=\"line\">00401044 C6 45 FF 04          mov         byte ptr [ebp-1],4</span><br></pre></td></tr></table></figure>\n\n<p>分别看到它们的反汇编代码，占用的总的内存是一样大小的，反而第一种有一个字节没有被使用，浪费掉了。</p>\n","categories":["逆向分析"],"tags":["逆向分析","C"]}]