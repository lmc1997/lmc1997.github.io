<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘小白的博客</title>
  
  <subtitle>爱生活爱技术爱女盆友</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-19T11:59:06.857Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>刘小白</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>保护模式：17、TLB</title>
    <link href="http://example.com/2023/04/19/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A17%E3%80%81TLB/"/>
    <id>http://example.com/2023/04/19/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A17%E3%80%81TLB/</id>
    <published>2023-04-19T11:58:28.000Z</published>
    <updated>2023-04-19T11:59:06.857Z</updated>
    
    <content type="html"><![CDATA[<p>测试</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;测试&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：16、2-9-9-12分页</title>
    <link href="http://example.com/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/"/>
    <id>http://example.com/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/</id>
    <published>2023-04-11T05:42:59.000Z</published>
    <updated>2023-04-19T11:57:13.196Z</updated>
    
    <content type="html"><![CDATA[<p>前面学习了10-10-12分页模式，在这种分页模式下，最多可以寻址4GB物理内存。但是随着硬件的发展，4GB的物理内存范围慢慢无法满足要求了，那么怎么才能扩大物理内存的寻址范围呢？Intel涉及了新的分页模式，就是本节课要学习的2-9-9-12分页，又称为PAE（物理地址扩展）分页。</p><span id="more"></span><h1 id="如何扩大物理内存寻址"><a href="#如何扩大物理内存寻址" class="headerlink" title="如何扩大物理内存寻址"></a>如何扩大物理内存寻址</h1><p>回顾一下，在10-10-12分页中，为什么物理地址的寻址范围是4GB呢？</p><p>首先规定好了一个物理页的大小为4K（4096字节），每一个物理页基址都是由PTE指定的。在10-10-12中，PTE长度为4字节，也就是32位。因此在这种分页模式下，可寻址的物理内存范围就是 2^32&#x3D;4GB。</p><p>因此，想要增大物理内存范围，就需要扩大PTE的长度。考虑到对其的因素，扩大后的PTE长度为8个字节。这样一来，由于一页的大小还是4K，因此一张PTT表中的PTE数量就变成了512，2^9&#x3D;512，需要9位二进制作为索引就能访问每一个PTE，这就是2-9-9-12中的第二个9。</p><p>同理，PDE也扩展为8字节，PDT表中有512项PDE，也需要9位二进制索引才能访问。</p><p>那么对于32位虚拟线性地址，32-9-9-12&#x3D;2，还剩下两位怎么办呢？看下PAE分页模式的概览图：</p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/1.PNG"></p><p>PAE模式比原来的10-10-12分页多了一级表，叫做页目录指针表（PDPTT），基址由CR3指向。在这张表中有4项PDPTE，分别指向了其他PDT表。</p><p>这样一来，能寻址的物理地址范围由原来的32位（4G）变成了36位（64G）。</p><p>还有一点需要注意的是，PDPTT这张表是由CR3指向的，而CR3寄存器长度还是32位不变，因此PDPTT这张表一定位于物理地址的4GB以内，而PDT和PTT是可以高于4G的。</p><p>可以在boot.ini文件中，将execute改为noexecute并重启，即可开启PAE分页模式。</p><h1 id="结构解析"><a href="#结构解析" class="headerlink" title="结构解析"></a>结构解析</h1><p><strong>一、PDPTE</strong></p><p>结构如下：</p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/2.PNG"></p><p>第0位（P位）永远为1；PWT和PCD位得等到TLB等讲完以后再说；Avail留给操作系统用。</p><p>35-12 存储的是PDT页目录表的基址，低12位补0，共36位，得到PDT页目录基址。</p><p><strong>二、PDE</strong></p><p>结构如下：</p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/3.PNG"></p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/4.PNG"></p><p>当第7位（PS位）为1时，35-21位是大页的物理地址，36位的物理地址低21位为0。此时PDE直接指向物理页，物理页的大小为2^21&#x3D;2M，且都是2M对齐。</p><p>当PS &#x3D; 0时，35-12位是PTT页表基址,低12位补0，共36位。</p><p>注意第7位（PS位）和第8位（G位），当对应大页时，G位用来标识是否是全局页。当对应小页时，PDE指向的不是物理页，而是PTE，G位永远为0。</p><p><strong>三、PTE</strong></p><p>结构如下：</p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/5.PNG"></p><p>PTE中35-12是物理页基址，24位，低12位补0。物理页基址+12位的页内偏移指向具体数据。</p><p><strong>四、XD位（DEP防护）</strong></p><p>回想一下，在学习段的时候，在段属性中有一个属性叫做是否可执行，但是在10-10-12模式下页的属性里面没有这个属性。于是就在2-9-9-12模式下新增加了一个属性叫做XD位，来控制是否可执行，让数据的页不能当作代码来执行。</p><p>从汇编代码的角度来说，如何区分可读可写可执行呢？拿mov指令来说，能作为源操作数的是可读的，能作为目的操作数的是可写的，能赋值给EIP的是可执行的。</p><p>XD位位于PDE和PTE的最高位：</p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/16.PNG"></p><p>当X位置1时，即使EIP指向了数据区，也不会执行。</p><h1 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h1><p>问题：在2-9-9-12分页模式下练习寻找物理地址。</p><p>答案：打开记事本写入字符串，并用ce定位，字符串地址为0x010827B8</p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/6.PNG"></p><p>0x010827B8拆开为：00&#x2F;00 0001 000&#x2F;0 1000 0010 &#x2F;7B8</p><p>分别对应2-9-9-12为：0            0x8               0x82        0x7B8</p><p>在windbg中查找记事本进程CR3：</p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/7.PNG"></p><p>查找过程如下：</p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/8.PNG"></p><h1 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h1><p><strong>问题：</strong></p><ol><li>给0线性地址挂上物理页</li><li>修改页属性，实现应用层读写高2G内存地址</li><li>逆向分析MmlsAddressValid()函数，找到PAE分页模式下页目录表、页表的基址</li><li>编写代码实现第二题</li></ol><p><strong>答案：</strong></p><p>一、代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = <span class="number">0x66666666</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;临时变量的地址为:%p\n&quot;</span>, &amp;temp);</span><br><span class="line"><span class="type">int</span>* p = <span class="number">0</span>;</span><br><span class="line">*p = <span class="number">0x12345678</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0地址的值为:%x\n&quot;</span>, *p);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/9.PNG"></p><p>我们使用临时变量的地址 0x0012FF7C 对应的PTE，赋值给0地址对应的PTE即可。</p><p>00&#x2F;00 0000 000&#x2F;1 0010 1111 F7C 对应2-9-9-12为0  0 12F  F7C。</p><p>查看该地址对应的PTE：</p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/10.PNG"></p><p>我们需要的PTE即为00000000&#96;160c3886，赋值给0地址对应的PTE：</p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/11.PNG"></p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/12.PNG"></p><p>成功给0地址挂上物理页，并能够读写。</p><p>二、代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* addr = (<span class="type">int</span>*)<span class="number">0x8003f00c</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该高2G地址的值为:%x\n&quot;</span>, *addr);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取 8003f00c 地址对应的PDE和PTE，修改U&#x2F;S位的属性为1即可。</p><p>1000 0000 0000 0011 1111 00C  对应2-9-9-12为2     0    3f   00C</p><p>使用windbg修改U&#x2F;S位：</p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/13.PNG"></p><p>这里我一开始仅仅修改了PDE和PTE的U&#x2F;S位为1，但是却还是无法读取这个地址的内容。查了一下资料才发现还应该修改PTE的G位。因为当PTE的G位为1时，代表这个小页是全局页，已经缓存在了TLB中，即便现在修改了U&#x2F;S属性，程序使用的还是之前的属性。</p><p>那么为什么PDE的G位不用管呢（虽然我也顺便修改了）？因为只有当PDE的PS&#x3D;1（大页）时，PDE的G位才生效，对应的是大页为全局页。</p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/14.PNG"></p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/15.PNG"></p><p>在修改了PDE和PTE的U&#x2F;S位、PTE的G位后，成功读取了高2G的内容。</p><p>三、与10-10-12模式下思路类似，只是一些基址发生了变化。注意要分析的文件为ntkrnlpa.exe</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">.text:00439980 var_8           = dword ptr -8</span><br><span class="line">.text:00439980 var_4           = dword ptr -4</span><br><span class="line">.text:00439980 VirtualAddress  = dword ptr  8</span><br><span class="line">.text:00439980</span><br><span class="line">.text:00439980                 mov     edi, edi</span><br><span class="line">.text:00439982                 push    ebp</span><br><span class="line">.text:00439983                 mov     ebp, esp</span><br><span class="line">.text:00439985                 push    ecx</span><br><span class="line">.text:00439986                 push    ecx</span><br><span class="line">.text:00439987                 mov     ecx, [ebp+VirtualAddress] ; ecx = 虚拟地址</span><br><span class="line">.text:0043998A                 push    esi</span><br><span class="line">.text:0043998B                 mov     eax, ecx        ; eax = 虚拟地址</span><br><span class="line">.text:0043998D                 shr     eax, 12h        ; 虚拟地址右移18位</span><br><span class="line">.text:00439990                 mov     esi, 3FF8h</span><br><span class="line">.text:00439995                 and     eax, esi        ; 保留PDI并左移3位，相当于PDI*8，并且保留了2位的那个值并且乘以了4096，相当于找到了第几个PDT，由此可见在虚拟地址中，这4个PDT是连起来的</span><br><span class="line">.text:00439997                 sub     eax, 3FA00000h  ; 第一张PDT虚拟地址为0xC0600000，eax为PDE的地址</span><br><span class="line">.text:0043999C                 mov     edx, [eax]</span><br><span class="line">.text:0043999E                 mov     eax, [eax+4]    ; eax`edx为该虚拟地址对应的PDE</span><br><span class="line">.text:004399A1                 mov     [ebp+var_4], eax ; var4为该虚拟地址的PDE高4字节</span><br><span class="line">.text:004399A4                 mov     eax, edx        ; eax为该虚拟地址的PDE的低4字节</span><br><span class="line">.text:004399A6                 push    edi</span><br><span class="line">.text:004399A7                 and     eax, 1          ; 取PDE的P位</span><br><span class="line">.text:004399AA                 xor     edi, edi</span><br><span class="line">.text:004399AC                 or      eax, edi</span><br><span class="line">.text:004399AE                 jz      short loc_439A11 ; 如果PDE的P位为0，则跳转，返回假</span><br><span class="line">.text:004399B0                 mov     edi, 80h</span><br><span class="line">.text:004399B5                 and     edx, edi        ; 取PDE的PS位</span><br><span class="line">.text:004399B7                 push    0</span><br><span class="line">.text:004399B9                 mov     [ebp+var_8], edx</span><br><span class="line">.text:004399BC                 pop     eax</span><br><span class="line">.text:004399BD                 jz      short loc_4399C3 ; PS = 0跳转到小页处理</span><br><span class="line">.text:004399BF                 test    eax, eax</span><br><span class="line">.text:004399C1                 jz      short loc_439A15 ; PS = 1，大页，跳转到结束，返回1</span><br><span class="line">.text:004399C3</span><br><span class="line">.text:004399C3 loc_4399C3:                             ; CODE XREF: MmIsAddressValid(x)+3D↑j</span><br><span class="line">.text:004399C3                 shr     ecx, 9          ; 虚拟地址右移9位，也就是先右移12位（去掉虚拟地址中的页内偏移部分），然后乘以8</span><br><span class="line">.text:004399C6                 and     ecx, 7FFFF8h</span><br><span class="line">.text:004399CC                 mov     eax, [ecx-3FFFFFFCh] ; eax = [ecx + C0000000 + 4],eax为PTE高4字节</span><br><span class="line">.text:004399D2                 sub     ecx, 40000000h</span><br><span class="line">.text:004399D8                 mov     edx, [ecx]      ; edx为PTE低4字节</span><br><span class="line">.text:004399DA                 mov     [ebp+var_4], eax ; 将PTE高4字节先保存起来</span><br><span class="line">.text:004399DD                 push    ebx</span><br><span class="line">.text:004399DE                 mov     eax, edx</span><br><span class="line">.text:004399E0                 xor     ebx, ebx</span><br><span class="line">.text:004399E2                 and     eax, 1          ; 判断PTE的P位</span><br><span class="line">.text:004399E5                 or      eax, ebx</span><br><span class="line">.text:004399E7                 pop     ebx</span><br><span class="line">.text:004399E8                 jz      short loc_439A11 ; P位为0，返回假</span><br><span class="line">.text:004399EA                 and     edx, edi        ; 前面已经给edi赋值为80h，此处即为取PTE的PAT位</span><br><span class="line">.text:004399EC                 push    0</span><br><span class="line">.text:004399EE                 mov     [ebp+var_8], edx</span><br><span class="line">.text:004399F1                 pop     eax</span><br><span class="line">.text:004399F2                 jz      short loc_439A15</span><br><span class="line">.text:004399F4                 test    eax, eax</span><br><span class="line">.text:004399F6                 jnz     short loc_439A15</span><br><span class="line">.text:004399F8                 and     ecx, esi</span><br><span class="line">.text:004399FA                 mov     ecx, [ecx-3FA00000h]</span><br><span class="line">.text:00439A00                 mov     eax, 81h</span><br><span class="line">.text:00439A05                 and     ecx, eax</span><br><span class="line">.text:00439A07                 xor     edx, edx</span><br><span class="line">.text:00439A09                 cmp     ecx, eax</span><br><span class="line">.text:00439A0B                 jnz     short loc_439A15</span><br><span class="line">.text:00439A0D                 test    edx, edx</span><br><span class="line">.text:00439A0F                 jnz     short loc_439A15</span><br><span class="line">.text:00439A11</span><br><span class="line">.text:00439A11 loc_439A11:                             ; CODE XREF: MmIsAddressValid(x)+2E↑j</span><br><span class="line">.text:00439A11                                         ; MmIsAddressValid(x)+68↑j</span><br><span class="line">.text:00439A11                 xor     al, al</span><br><span class="line">.text:00439A13                 jmp     short loc_439A17</span><br><span class="line">.text:00439A15 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00439A15</span><br><span class="line">.text:00439A15 loc_439A15:                             ; CODE XREF: MmIsAddressValid(x)+41↑j</span><br><span class="line">.text:00439A15                                         ; MmIsAddressValid(x)+72↑j ...</span><br><span class="line">.text:00439A15                 mov     al, 1</span><br><span class="line">.text:00439A17</span><br><span class="line">.text:00439A17 loc_439A17:                             ; CODE XREF: MmIsAddressValid(x)+93↑j</span><br><span class="line">.text:00439A17                 pop     edi</span><br><span class="line">.text:00439A18                 pop     esi</span><br><span class="line">.text:00439A19                 leave</span><br><span class="line">.text:00439A1A                 retn    4</span><br><span class="line">.text:00439A1A __stdcall MmIsAddressValid(x) endp</span><br></pre></td></tr></table></figure><p>从上面的分析可以看出，第一张PTT表基址仍然是 0xC0000000，后面的PTT紧挨着分布。直到地址0xC0600000，遇到第一张PDT表，后面连着三张都是PDT表。</p><p>这里可以总结一下PAE模式下获取PDE与PTE的公式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pPDE = 0xC0600000 + ((addr&gt;&gt;18) &amp; 0x3FF8)</span><br><span class="line">pPTE = 0xC0000000 + ((addr&gt;&gt;9) &amp; 0x7FFFF8)</span><br></pre></td></tr></table></figure><p>四、代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//该函数用于通过有参调用门提权后修改地址对应物理页的属性</span></span><br><span class="line"><span class="comment">//将PDE和PTE的U/S位置1，PTE的G位置0</span></span><br><span class="line"><span class="comment">//PDE和PTE的寻址方式参考MmIsAddressValid函数</span></span><br><span class="line"><span class="type">void</span> _declspec(naked) ModifyMemoryPageAttr()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">pushad</span><br><span class="line">pushfd</span><br><span class="line"></span><br><span class="line">mov ecx,[esp + <span class="number">0x24</span> + <span class="number">0x8</span>]</span><br><span class="line">mov eax,ecx</span><br><span class="line">shr eax,<span class="number">12</span>h</span><br><span class="line">and eax,<span class="number">3f</span>f8h</span><br><span class="line">sub eax,<span class="number">3f</span>a00000h</span><br><span class="line">mov ebx,eax</span><br><span class="line">mov eax,[eax]</span><br><span class="line">or eax,<span class="number">4</span></span><br><span class="line">and ah,<span class="number">0f</span>eh</span><br><span class="line">mov [ebx],eax</span><br><span class="line"></span><br><span class="line">shr ecx,<span class="number">9</span></span><br><span class="line">and ecx,<span class="number">7f</span>fff8h</span><br><span class="line">sub ecx,<span class="number">40000000</span>h</span><br><span class="line">mov edx,ecx</span><br><span class="line">mov ecx,[ecx]</span><br><span class="line">or ecx,<span class="number">4</span></span><br><span class="line">and ch,<span class="number">0f</span>eh</span><br><span class="line">mov [edx],ecx</span><br><span class="line"></span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line">retf <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* addr = (<span class="type">int</span>*)<span class="number">0x8003f00c</span>;</span><br><span class="line"><span class="type">char</span> buff[] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x48</span>, <span class="number">0</span> &#125;;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">push addr</span><br><span class="line">call fword ptr[buff]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;haha\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该高2G地址的值为:%x\n&quot;</span>, *addr);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在windbg中构造调用门eq 8003f048 0040ec01&#96;00081020，具体由ModifyMemoryPageAttr函数的偏移决定。执行结果如下：</p><p><img src="/2023/04/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A16%E3%80%812-9-9-12%E5%88%86%E9%A1%B5/17.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面学习了10-10-12分页模式，在这种分页模式下，最多可以寻址4GB物理内存。但是随着硬件的发展，4GB的物理内存范围慢慢无法满足要求了，那么怎么才能扩大物理内存的寻址范围呢？Intel涉及了新的分页模式，就是本节课要学习的2-9-9-12分页，又称为PAE（物理地址扩展）分页。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：15、PDE_PTE基址</title>
    <link href="http://example.com/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/"/>
    <id>http://example.com/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/</id>
    <published>2023-03-27T10:09:26.000Z</published>
    <updated>2023-04-11T05:22:11.316Z</updated>
    
    <content type="html"><![CDATA[<p>这节课我们来学习页目录表和页表的基址。</p><span id="more"></span><h1 id="4GB的拆分"><a href="#4GB的拆分" class="headerlink" title="4GB的拆分"></a>4GB的拆分</h1><p>我们首先来拆分两个进程的4GB虚拟地址，观察两个进程中相同的虚拟地址对应的PDE、PTE以及物理页，并寻找一些规律。具体的拆分步骤大家可以自己尝试，这里直接说结论：</p><ol><li>在这两个进程中，低2G（00000000 – 7FFFFFFF）对应的PDE与PTE几乎不同。</li><li>在这两个进程中，高2G（80000000 – FFFFFFFF）对应的PDE与PTE几乎相同。</li><li>低2G（00000000 – 7FFFFFFF）的前64K和后64K都是没有映射的。</li><li>在高2G虚拟地址中，可以发现，虚拟地址0xC0300000对应的物理页就是PDT，虚拟地址0xC0000000对应的物理页就是0地址的PTT，并且从这个地址开始后面的每一页都是PTT。</li></ol><p>具体拆分的过程如下：</p><p><img src="/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/1.PNG"></p><p>可以看到，我们的目标进程的CR3为2a06a000，这也就是PDT的物理地址。下面我们来根据这个CR3来拆分0xC030000这个虚拟地址：</p><p><img src="/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/2.PNG"></p><p>在上图中我们可以看到，0xC030000这个地址对应的物理页，与PDT的地址和内容都一样，这个物理页就是PDT。也就是说，在这个进程的4GB虚拟地址空间中，该虚拟地址保存的内容就是PDT表的内容。</p><p>同理我们来拆分一下虚拟地址0xC0000000的物理页：</p><p><img src="/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/4.PNG"></p><p>我们的目标进程的CR3为0x1357d000，当我们想要查看虚拟地址0xC0000000的内容（也就是查看该地址的物理页）时，输入的命令依次为上图中的1、2、3语句，而当我们想要查看0地址对应的PTT时，输入的命令依次为上图中的2、3语句。</p><p>此时我们可以得到结论，0xC0300000存储的是PDT表，0xC0000000存储的是第一张PTT表。</p><h1 id="PDT和PTT的基址"><a href="#PDT和PTT的基址" class="headerlink" title="PDT和PTT的基址"></a>PDT和PTT的基址</h1><p>为什么需要PDT和PTT有基址呢？</p><p>试想一下，在操作系统程序中，当它想让一个地址可以访问的时候，必须要给这个线性地址挂上物理页，也就是填写正确的PDE和PTE。也就是说，程序必须要能够访问PDT和PTT这两张表，才能填写里面的内容。可是，这两张表都位于物理地址上，基址都是物理地址，程序无法访问。因此，在程序4GB进程空间的某个地方，一定保存着PDT和PTT。</p><p>先来看一下在进程的4GB虚拟地址空间中PDT和PTT表的概览图：</p><p><img src="/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/6.PNG"></p><p>下面我们来依次看一下在这4GB虚拟地址空间中的PDT和PTT：</p><p><strong>PDT：</strong></p><ol><li>从虚拟地址 0xC0300000 开始的一页，就是页目录表PDT。</li><li>这个物理页既是页目录表，本身也是页表。</li><li>页目录表是一张特殊的页表，其中的每一项指向的不是普通的物理页，而是指向其他的页表（其中第0x300项指向的是自己这张页表）。</li></ol><p><strong>PTT：</strong></p><p>从前面学习的知识我们知道，每一张PTT都是由PDT中的PDE指向的，那么在进程的4GB虚拟地址空间中，我们是否能通过 0xC0300000 这张PDT找到其他PTT呢？</p><p>答案是不能。因为尽管PTT是由 0xC0300000 这张PDT中的PDE指向的，但里面存的值仍然是物理地址，在程序中还是无法使用这个地址。</p><ol><li>页表被映射到了从 0xC0000000 到 0xC03FFFFF 的4M地址空间。</li><li>在这1024个表中有一张特殊的表：页目录表。</li><li>0xC0000000是第一张页表的地址，后面的页表紧挨着分布。</li></ol><p><strong>公式总结：</strong></p><ol><li><p>什么是PDI和PTI？</p><p>在10-10-12中，第一个10就是PDI，第二个10就是PTI。</p></li><li><p>访问页目录表的公式（修改PDE）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0xC0300000 + PDI*4</span><br></pre></td></tr></table></figure></li><li><p>访问页表的公式（修改PTE）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0xC0000000 + PDI*4096 + PTI*4</span><br></pre></td></tr></table></figure></li></ol><p>掌握了这两个地址及公式，就掌握了一个进程所有的物理内存的读写权限。</p><h1 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h1><p><strong>问题：</strong></p><p>一、通过代码实现挂物理页</p><p>二、逆向分析MmlsAddressValid()函数</p><p><strong>答案：</strong></p><p>一、代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span>* addr;</span><br><span class="line"><span class="comment">//提权后执行的函数，地址为0x00401030，有2个参数分别是要挂物理页的地址和要使用的临时的地址</span></span><br><span class="line"><span class="type">void</span> _declspec(naked) <span class="built_in">MakeMemoryPage</span>()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//int 3</span></span><br><span class="line">pushad<span class="comment">//8个寄存器，32个字节</span></span><br><span class="line">pushfd<span class="comment">//标志寄存器，4个字节</span></span><br><span class="line"></span><br><span class="line">mov eax,[esp+<span class="number">0x24</span>+<span class="number">0x8</span>]</span><br><span class="line">shr eax,<span class="number">0</span>ah</span><br><span class="line"><span class="keyword">and</span> eax,<span class="number">3F</span>FFFCh</span><br><span class="line">sub eax,<span class="number">40000000</span>h<span class="comment">//此时eax为目标PTE的地址</span></span><br><span class="line">mov eax,[eax]</span><br><span class="line"></span><br><span class="line">mov ecx,[esp+<span class="number">0x24</span>+<span class="number">0x8</span>+<span class="number">0x4</span>]</span><br><span class="line">shr ecx,<span class="number">0</span>ah</span><br><span class="line"><span class="keyword">and</span> ecx,<span class="number">3F</span>FFFCh</span><br><span class="line">sub ecx,<span class="number">40000000</span>h<span class="comment">//此时ecx指向目标地址对应的PTE</span></span><br><span class="line">mov [ecx],eax</span><br><span class="line"></span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line"></span><br><span class="line"><span class="comment">//int 3</span></span><br><span class="line">retf <span class="number">0x8</span><span class="comment">//注意堆栈平衡，写错蓝屏</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先用调用门有参数提权</span></span><br><span class="line"><span class="type">int</span> temp = <span class="number">0x66666666</span>;</span><br><span class="line"><span class="type">int</span>* Temp_addr = &amp;temp;</span><br><span class="line">addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> buff[<span class="number">6</span>];</span><br><span class="line">*(DWORD*)&amp;buff[<span class="number">0</span>] = <span class="number">0x12345678</span>;</span><br><span class="line">*(WORD*)&amp;buff[<span class="number">4</span>] = <span class="number">0x48</span>;<span class="comment">//buff[6] = &#123;0x78, 0x56, 0x34, 0x12, 0x48, 0x00&#125;</span></span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">push addr</span><br><span class="line">push Temp_addr</span><br><span class="line"></span><br><span class="line">call fword ptr[buff]</span><br><span class="line">&#125;</span><br><span class="line">*addr = <span class="number">0x12345678</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;挂物理页后0地址的值为:%x\n&quot;</span>, *addr);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下上段代码，首先申请了一个临时变量temp，随便赋值，我们需要将这个临时变量所在的物理页挂给目标地址（这里是0地址），也就是将这个临时变量的地址对应的PTE写入0地址对应的PTE上。因此，我这里将0地址和这个临时变量的地址作为参数压入堆栈，通过调用门有参数提权，进入MakeMemoryPage()函数。在该函数内部，实现PTE的赋值。寻找PTE的方法的解释参考第二题对MmlsAddressValid()函数的逆向分析。</p><p>在windbg中修改GDT表：</p><p><img src="/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/7.PNG"></p><p>运行结果如下：</p><p><img src="/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/8.PNG"></p><p>二、MmlsAddressValid()函数为内核函数，作用为判断地址是否有效</p><p>可以在windbg中，输入u MmIsAddressValid L20查看该函数的汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">kd&gt; u MmIsAddressValid L20</span><br><span class="line">nt!MmIsAddressValid:</span><br><span class="line">804e4661 8bff            mov     edi,edi</span><br><span class="line">804e4663 55              push    ebp</span><br><span class="line">804e4664 8bec            mov     ebp,esp</span><br><span class="line">804e4666 8b4d08          mov     ecx,dword ptr [ebp+8]</span><br><span class="line">804e4669 8bc1            mov     eax,ecx</span><br><span class="line">804e466b c1e814          shr     eax,14h</span><br><span class="line">804e466e bafc0f0000      mov     edx,0FFCh</span><br><span class="line">804e4673 23c2            and     eax,edx</span><br><span class="line">804e4675 2d0000d03f      sub     eax,3FD00000h</span><br><span class="line">804e467a 8b00            mov     eax,dword ptr [eax]</span><br><span class="line">804e467c a801            test    al,1</span><br><span class="line">804e467e 0f84d2f10000    je      nt!MmIsAddressValid+0x4f (804f3856)</span><br><span class="line">804e4684 84c0            test    al,al</span><br><span class="line">804e4686 7824            js      nt!MmIsAddressValid+0x53 (804e46ac)</span><br><span class="line">804e4688 c1e90a          shr     ecx,0Ah</span><br><span class="line">804e468b 81e1fcff3f00    and     ecx,3FFFFCh</span><br><span class="line">804e4691 81e900000040    sub     ecx,40000000h</span><br><span class="line">804e4697 8bc1            mov     eax,ecx</span><br><span class="line">804e4699 8b08            mov     ecx,dword ptr [eax]</span><br><span class="line">804e469b f6c101          test    cl,1</span><br><span class="line">804e469e 0f84b2f10000    je      nt!MmIsAddressValid+0x4f (804f3856)</span><br><span class="line">804e46a4 84c9            test    cl,cl</span><br><span class="line">804e46a6 0f88b6de0300    js      nt!MmIsAddressValid+0x3f (80522562)</span><br><span class="line">804e46ac b001            mov     al,1</span><br><span class="line">804e46ae 5d              pop     ebp</span><br><span class="line">804e46af c20400          ret     4</span><br></pre></td></tr></table></figure><p>或者在xp下的c:\windows\system32\ 中找到内核程序，用IDA分析。其中ntkrnlpa.exe 为2-9-9-12 分页内核程序，ntoskrnl.exe 为10-10-12 分页内核程序。</p><p><img src="/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/9.PNG"></p><p>用IDA打开该文件，全局搜索Ctrl+t，所搜字符串</p><p><img src="/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/10.PNG"></p><p>函数分析如下：</p><p><img src="/2023/03/27/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A15%E3%80%81PDT-PTT%E5%9F%BA%E5%9D%80/11.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这节课我们来学习页目录表和页表的基址。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：14、PDE_PTE属性</title>
    <link href="http://example.com/2023/03/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A14%E3%80%81PDE-PTE%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2023/03/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A14%E3%80%81PDE-PTE%E5%B1%9E%E6%80%A7/</id>
    <published>2023-03-23T10:45:34.000Z</published>
    <updated>2023-04-03T11:24:18.404Z</updated>
    
    <content type="html"><![CDATA[<p>上节课我们学习了10-10-12分页是如何找到物理内存的，并了解了PDE和PTE，通过修改PTE达到了挂物理页的效果。这节课来学习PDE和PTE的属性。</p><span id="more"></span><h1 id="PDE和PTE属性"><a href="#PDE和PTE属性" class="headerlink" title="PDE和PTE属性"></a>PDE和PTE属性</h1><p>先来看一下上节课我们找的PDE和PTE的图：</p><p><img src="/2023/03/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A14%E3%80%81PDE-PTE%E5%B1%9E%E6%80%A7/1.PNG"></p><p>在使用PDE和PTE的时候，我们将它们的低3位十六进制舍弃，并通过补0的方式，获得物理页的基址。这低3位十六进制（12位二进制）就是PDE和PTE的属性，如图：</p><p><img src="/2023/03/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A14%E3%80%81PDE-PTE%E5%B1%9E%E6%80%A7/2.PNG"></p><p>在上一节课中，我们通过给0地址挂物理页的方式，使其能够被读写。其实，0地址能被读写，不仅仅是因为有了对应的物理页，还需要物理页有效并且具有可读写的属性等。<strong>物理页的属性 &#x3D; PDE属性 &amp; PTE属性</strong>。下面我们依次来看这些属性。</p><p><strong>1、P位</strong></p><p>P &#x3D; 0，物理页无效。</p><p>P &#x3D; 1，物理页有效。</p><p>看PDE与PTE时，先看P位，P位为1时才有效。注意，如果PTE中P位&#x3D;0，影响的是一页4KB，而如果是PDE中P位&#x3D;0，影响的是这1024项所指向的页。</p><p><strong>2、R&#x2F;W位</strong></p><p>R&#x2F;W &#x3D; 0，只读。</p><p>R&#x2F;W &#x3D; 1，可读可写。</p><p>这里可以做一个实验，就是一个const只读字符串常量，正常情况下是不允许通过字符串地址对字符串的值进行修改的，但是为什么不能改呢？是谁限制了呢？答案就是页。把地址对应的PDE和PTE里面的属性改为可读可写即可。</p><p><strong>3、U&#x2F;S位</strong></p><p>U&#x2F;S &#x3D; 0，特权用户。</p><p>U&#x2F;S &#x3D; 1，普通用户。</p><p>这里可以做一个实验，通过修改一个高2G线性地址对应的PDE和PTE的属性，实现ring3对高2G的读写。</p><p>注意区分段页。前面学习段时对高2G内存的读写，是通过提权，将ring3提升到ring0来实现的。而现在是不提权，仍然在ring3实现读取。</p><p><strong>4、PS位</strong></p><p>看到上面的属性图中，只有PDE有PS位，说明PS位只对PDE有意，PS &#x3D; PageSize。</p><p>PS &#x3D; 1，说明PDE直接指向物理页，没有PTE，此时虚拟线性地址只能分成两部分，高10位寻找PDE，低22位（10+12）是页内偏移。此时一个物理页的大小为2^22 &#x3D; 4MB，俗称“大页”。</p><p>这里也可以做一个实验：分析线性地址0x8043F00C的PDE属性。</p><p><strong>5、A位</strong></p><p>表示物理页是否被访问过，被访问过置1，即使只访问一个字节也会导致PDE和PTE的A位置1。</p><p><strong>6、D位</strong></p><p>表示物理页是否被写过，也就是俗称的“脏页”。</p><p>D &#x3D; 0，该物理页没有被写过。</p><p>D &#x3D; 1，该物理页被写过。</p><p><strong>7、关于G位、PWT位、PCD位</strong></p><p>学完控制寄存器与TLB才能讲，此处略过。</p><h1 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h1><p>在上面PDE和PTE的属性图中，可以看到PDE和PTE中的第9、10、11位没有标识，说明这三位目前没用，是留给操作系统用的。</p><p>此外，再想象一下如下场景：当A进程在自己的线性地址0x12345678处存了一个10，然后操作系统发现物理内存紧张了，正好发现A进程0x12345678地址对应的那个物理页不常用，于是将这个物理页的内容存在了一个文件里，然后将这个物理页挪作他用。此时，A进程0x12345678对应的PTE要改吗？</p><p>要改，因为要是不改的话，下次再读取0x12345678这个的地址的数据，读出来的就不是10了，而是别的进程的内存。那么怎么改呢？首先得将P位改成0，然后CPU再次访问这个地址的时候，会产生缺页异常，对应IDT表中的0xe号中断。不管是PDE还是PTE，只要是CPU见到P位为0，就走e号中断。在这个e号中断中，操作系统就会根据这9、10、11位来判断，这个PTE无效的原因，是因为没有分配还是被换掉了。如果符合物理页被换掉的情况，那么操作系统就给这个PTE挂一个空白的物理页，然后将原先写入的那个内存文件的内容写回到这个空白页上。</p><p><img src="/2023/03/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A14%E3%80%81PDE-PTE%E5%B1%9E%E6%80%A7/3.PNG"></p><p>缺页是无时无刻不在发生的。具体内容我们等到物理内存管理时再讲。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上节课我们学习了10-10-12分页是如何找到物理内存的，并了解了PDE和PTE，通过修改PTE达到了挂物理页的效果。这节课来学习PDE和PTE的属性。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：13、挂物理页</title>
    <link href="http://example.com/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/"/>
    <id>http://example.com/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/</id>
    <published>2023-03-21T12:23:25.000Z</published>
    <updated>2023-03-23T10:43:44.406Z</updated>
    
    <content type="html"><![CDATA[<p>上节课简单地了解了10-10-12分页机制，这节课继续深入学习。</p><span id="more"></span><h1 id="PDE与PTE"><a href="#PDE与PTE" class="headerlink" title="PDE与PTE"></a>PDE与PTE</h1><p>先来看一张直观的图：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/1.PNG"></p><p>在上图中，第一级为一张表，叫做页目录表（Page Directory Table），基址由CR3指向，里面的每一项都是一个物理地址，宽度为4字节，指向下一级的页表，页目录表中的每一项叫做页目录项（Page Directory Entry）。第二级也为一张表，但是存在很多这样的表，叫做页表（Page Table），里面的每一项叫做页表项（Page Table Entry），也都是一个物理地址，宽度为4字节，指向最终的物理页。</p><p>为什么要按照10-10-12来分呢？一张页目录表和一张页表大小都为4KB（4096字节），每一项为4字节，故页目录表和页表都有1024项，需要10位二进制来寻找；对于最后的页表大小为4096字节，需要12位二进制来寻址。</p><p><strong>PTE（页表项）的特性</strong>：</p><ol><li>可以有PTE不指向物理页（为空）。</li><li>不同的PTE可以指向相同的物理页。</li><li>一个PTE不能同时指向两个物理页。</li></ol><p>现在来思考一个问题：如何判断两个线性地址在不在一个物理页上？（CR3一样）</p><p>答：在同一个进程中，例如对于 0x12345666 和 0x123456888 这两个虚拟地址，通过前20位的索引发现都指向了同一个PDE、PTE和物理页。因此可以得到结论，如果同一个进程中两个线性地址的高5位十六进制都一样（也就是说位于虚拟地址的同一页，大小为1000h），那么一定在同一个物理页。此外，如果高5位不一样，那么它们对应的PDE和PTE一定不是同一个，但是如果它们的PTE值相等的话，也会在同一个物理页上。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>接下来做一个实验，如下图：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/2.PNG"></p><p>当我要在地址为0的地方写入数据时，提示写入失败。这是什么原因呢？</p><p>来看一下0地址的PDT与PTT：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/3.PNG"></p><p>发现该进程的CR3为21365000，然后查找一下0地址PDT与PTT：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/4.PNG"></p><p>原来，0地址的PTE为0，即没有指向物理页，因此0地址当然不能写入数据。要想向0地址写入数据，必须要给它挂一个物理页，即给它一个有效的PTE。因此我们可以申请一个变量，得到它的地址，找到对应的PTE，并把这个PTE写入0地址的PTE：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/5.PNG"></p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/6.PNG"></p><p>然后将变量a对应的PTE写入0地址对应的PTE上：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/7.PNG"></p><p>然后再运行程序，发现0地址变成可读可写了：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/8.PNG"></p><p>最后查看物理内存，发现该值也已经写入物理页上了：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/9.PNG"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>问题：</p><ol><li>为变量X再映射一个线性地址，并通过这个新的地址读写X的值。</li><li>10-10-12分页模式物理内存能够识别的最多范围是多少？</li></ol><p>答案：</p><p>1、代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0x66666666</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;变量a的地址为:%p\n&quot;</span>, &amp;a);</span><br><span class="line"><span class="type">int</span>* new_addr = (<span class="type">int</span>*)(((<span class="type">int</span>)&amp;a)&amp;<span class="number">0xfff</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新地址为:%p\n&quot;</span>, new_addr);</span><br><span class="line"><span class="comment">//先给新地址挂物理页后执行此操作</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;通过新地址改之前的值:%x\n&quot;</span>, *new_addr);</span><br><span class="line">*new_addr = <span class="number">0x12345678</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;通过新地址改之后的值:%x\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/10.PNG"></p><p>这个新的地址0x000000F7C与0地址在同一页，因此对应的PDE和PTE是同一个，因此修改0地址的PTE：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/11.PNG"></p><p>需要将0地址对应的PTE修改成变量a的PTE，a的PTE如下：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/12.PNG"></p><p>然后将这个值填入0地址对应的PTE：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/13.PNG"></p><p>继续运行程序，成功通过新地址读写a变量：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/14.PNG"></p><p>2、物理页由PTE指向，PTE指向的物理页基址最大值为FFFFF000，故最大的物理地址为FFFFFFFF，也就是4G。</p><h1 id="出于好奇的有趣实验"><a href="#出于好奇的有趣实验" class="headerlink" title="出于好奇的有趣实验"></a>出于好奇的有趣实验</h1><p>上课时，海哥讲说如果想要读取另一个进程的数据，可以将自己的CR3改成目标进程的，然后直接读取自己进程中数据的地址，读的就相当于对方进程的数据，但是我们现在还做不到修改CR3。同时我在想另一种方法，反正目标进程的数据已经写在它对应的物理页上了，那我把自己的相同的地址对应的PTE修改成目标进程目标数据的地址对应的PTE，不就可以读对方的数据了吗？</p><p>出于好奇，我做了如下实验：</p><p>A进程代码：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/15.PNG"></p><p>在A进程中，地址0x0012FF7C的数据为0x12345678，然后启动B进程，B代码如下：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/16.PNG"></p><p>正常来讲这个代码读出来的应该是B进程中0x12ff7c位置的值，肯定读不到0x12345678。我们找到A进程目标地址对应的PTE：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/17.PNG"></p><p>将这个PTE写入B进程0x12ff7c对应的PTE的位置：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/18.PNG"></p><p>然后继续执行B进程，发现能够读取A进程的0x12345678：</p><p><img src="/2023/03/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A13%E3%80%81%E6%8C%82%E7%89%A9%E7%90%86%E9%A1%B5/19.PNG"></p><p>虽然我也不知道有啥用，就纯粹出于好奇，做着玩吧。</p><p>但是还有个问题，那就是B进程代码无法正常结束，应该是因为B进程那一页的内存全都映射到A进程的物理页上了，回不来了，所以如果向回来，还要先将PTE改回原来的值。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上节课简单地了解了10-10-12分页机制，这节课继续深入学习。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：12、10-10-12分页</title>
    <link href="http://example.com/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/"/>
    <id>http://example.com/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/</id>
    <published>2023-03-18T08:40:53.000Z</published>
    <updated>2023-03-21T12:21:48.907Z</updated>
    
    <content type="html"><![CDATA[<p>之前的课程主要学习的是段的机制，其实段的机制还有很多细节，需要我们在实验过程中详细总结。这节课开始，我们将要学习页的机制。</p><span id="more"></span><h1 id="物理地址与分页方式"><a href="#物理地址与分页方式" class="headerlink" title="物理地址与分页方式"></a>物理地址与分页方式</h1><p>我们都知道，一个程序的虚拟内存空间为4GB。但是如果多个程序一起运行，比如三个，那么就至少需要12G的内存才能满足，这样不就出问题了吗？</p><p><img src="/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/1.PNG"></p><p>实际上，这一块4GB是“假”的，很多空的地方都没有东西，只有当这个地方需要东西的时候才会映射。</p><p>接下来区分几个概念：<strong>线性地址、有效地址和物理地址</strong>。</p><p>以指令：<strong>MOV eax, dword ptr ds:[0x12345678]</strong> 为例，0x12345678 为有效地址，ds.Base + 0x12345678 为线性地址。</p><p><img src="/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/2.PNG"></p><p>当我们真正执行上面这条指令，去0x12345678去找对应的数据时，是找不到的，因为这个是假的，是虚拟的，需要转换到物理地址上才行。转换的方式分为10 -10-12和2-9-9-12的形式。</p><p>在Windows XP上可以设置为上面两种分页方式中的一种，需要修改boot.ini文件如下：</p><p><img src="/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/3.PNG"></p><p>noexecute为2-9-9-12分页，将no删掉为10-10-12分页。</p><h1 id="10-10-12分页"><a href="#10-10-12分页" class="headerlink" title="10-10-12分页"></a>10-10-12分页</h1><p>实模式与保护模式的区别在于，实模式访问的地址就是物理地址，而保护模式下访问的地址都是假的。</p><p>对于物理内存管理来说，不可能将一整块物理内存都一块管理，而是将物理内存划分成页来管理，一页的大小为4KB。</p><p>对于Windows物理内存来说，虚拟的4GB内存是紧紧依赖于物理内存的，没有了物理内存，虚拟内存也将什么都不是。因此当物理内存快使用完时，会将一部分数据不常用的物理内存拿出来存到一个内存文件中（硬盘上），然后这一部分物理内存就可以给别的程序用了，这一部分的物理内存大小就是一页（4KB）。</p><p>现在想一下，A进程有一个虚拟地址0x12345678，读取这个内存的值的话需要将其转换为物理地址，同时B进程也有一个地址0x12345678，这两个地址肯定对应的物理地址是不一样的，怎么区分呢？</p><p>每个进程里面的虚拟地址就相当于一个索引，而且每个进程有会有一套自己的目录（CR3），转换为物理地址的时候，每个进程就会根据自己的目录，通过索引找到对应的物理地址。</p><p><img src="/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/4.PNG"></p><p>第一级有一张表，基址由CR3指向（物理地址），大小为4KB（4096字节），第一级的这张表每一项大小为4字节（每一项的值为一个地址），因此第一张表有1024项。</p><p>每一项又指向了一张表，因此第二级有1024张表。（在CPU的所有寄存器中，只有一个寄存器中存放的是物理地址，就是CR3）</p><p>那么具体是如何通过索引找到物理地址的呢？虚拟线性地址为8位十六进制数，也就是32位二进制数，这32位从高位到低位分别分割成10-10-12位，前两个10都是对应物理页目录上的索引，找到最终的物理页后，通过最后12位的偏移，就找到了对应的物理地址。</p><p>10-10-12和2-9-9-12分页模式都是32位下的物理内存管理，在64位中都不用了，但是64位的分页模式与2-9-9-12非常像。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>题目：在10-10-12分页模式下寻找物理内存。</p><p>首先打开记事本程序，输入helloworld，并找到该字符串的地址：</p><p><img src="/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/5.PNG"></p><p>在windbg中找到该记事本程序的CR3物理地址，也就是DirBase：</p><p><img src="/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/6.PNG"></p><p>前面找到的字符串的虚拟地址为01089eb0，按照10-10-12可以拆为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0000 0001 00 --- 0x4</span><br><span class="line">00 1000 1001 --- 0x89</span><br><span class="line">EB0</span><br></pre></td></tr></table></figure><p><img src="/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/6.PNG"></p><p>0x4为CR3指向的目录中索引为4的项，又因为每一项大小为4字节，因此想要找到该项的物理地址，就要用索引*4。在前两级目录中，每一项指向的是下一级的物理页基址，最后3位十六进制为该物理页的属性，现在不用管，找地址的时候直接清0就行。寻找过程如下图：</p><p><img src="/2023/03/18/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A12%E3%80%8110-10-12%E5%88%86%E9%A1%B5/7.PNG"></p><p>因为是Unicode编码，因此一个字符在内存中是两个字节。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前的课程主要学习的是段的机制，其实段的机制还有很多细节，需要我们在实验过程中详细总结。这节课开始，我们将要学习页的机制。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：11、任务门</title>
    <link href="http://example.com/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/"/>
    <id>http://example.com/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/</id>
    <published>2023-03-15T10:51:49.000Z</published>
    <updated>2023-03-18T11:15:25.476Z</updated>
    
    <content type="html"><![CDATA[<p>上节课学习了任务段，知道了我们使用CALL FAR和JMP FAR指令通过任务段描述符跳转到TSS段来替换全部寄存器。这节课我们来学习如何通过任务门来访问任务段。那么这就首先带来了一个问题，明明我们都已经可以通过CALL FAR和JMP FAR指令访问任务段了，为什么还需要任务门呢？</p><span id="more"></span><h1 id="任务门"><a href="#任务门" class="headerlink" title="任务门"></a>任务门</h1><p>先来回顾一下，在IDT表中，有三种门描述符，分别是：中断门、陷阱门和任务门。任务门描述符结构如下：</p><p><img src="/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/1.PNG"></p><p>结合上图，我们构造的任务门形式应该为：0000e500&#96;XXXX0000，X部分为TSS段选择子。</p><p>注意任务门描述符中的TSS段选择子的部分，填充的是位于GDT表中的TSS段描述符的选择子（上一节课是通过CALL 与JMP指令来找到TSS段描述符，这是通过任务门中的TSS段选择子来寻找），跨表了。</p><p>任务门执行流程：</p><ol><li>INT N</li><li>查IDT表，找到任务门描述符</li><li>根据任务门描述符中的选择子，查GDT表，找到TSS段描述符</li><li>根据TSS段描述符覆盖TR段寄存器</li><li>找到TSS段，覆盖寄存器，执行EIP所指向的位置。</li><li>iretd返回</li></ol><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><p><strong>题目：</strong></p><ol><li>实现任务门访问任务段进0环</li><li>实现任务门访问任务段进1环</li></ol><p><strong>答案：</strong></p><p>1、代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">DWORD dwOk;</span><br><span class="line">DWORD dwESP;</span><br><span class="line">DWORD dwCS;</span><br><span class="line">int High2GValue;</span><br><span class="line">//0x401020</span><br><span class="line">void __declspec(naked) MyFunc()</span><br><span class="line">&#123;</span><br><span class="line">dwOk = 1;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">mov eax, esp</span><br><span class="line">mov dwESP, eax</span><br><span class="line">mov ax, cs</span><br><span class="line">mov word ptr ds : [dwCS], ax</span><br><span class="line">mov eax, 0x8003f00c</span><br><span class="line">mov eax, [eax]</span><br><span class="line">mov High2GValue, eax</span><br><span class="line">//回去的代码</span><br><span class="line">iretd</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">//构造TSS</span><br><span class="line">char bu[0x10];</span><br><span class="line">DWORD icr3;</span><br><span class="line">DWORD TSS[0x68];</span><br><span class="line">printf(&quot;TSS地址: %08X\n&quot;, TSS);</span><br><span class="line">printf(&quot;设定的ESP堆栈为: %08X\n&quot;, bu);</span><br><span class="line">printf(&quot;input cr3: \n&quot;);</span><br><span class="line">scanf(&quot;%x&quot;, &amp;icr3);//通过windbg工具 !process 0 0指令获取</span><br><span class="line">TSS[0] = 0x00000000; // Previous Task Link CPU填充，表示上一个任务的选择子</span><br><span class="line">TSS[1] = (DWORD)bu; // ESP0</span><br><span class="line">TSS[2] = 0x00000010; // SS0</span><br><span class="line">TSS[3] = 0x00000000; // ESP1</span><br><span class="line">TSS[4] = 0x00000000; // SS1</span><br><span class="line">TSS[5] = 0x00000000; // ESP2</span><br><span class="line">TSS[6] = 0x00000000; // SS2</span><br><span class="line">TSS[7] = (DWORD)icr3; // CR3 学到页就知道是啥了</span><br><span class="line">TSS[8] = 0x00401020; // EIP</span><br><span class="line">TSS[9] = 0x00000000; // EFLAGS</span><br><span class="line">TSS[10] = 0x00000000; // EAX</span><br><span class="line">TSS[11] = 0x00000000; // ECX</span><br><span class="line">TSS[12] = 0x00000000; // EDX</span><br><span class="line">TSS[13] = 0x00000000; // EBX</span><br><span class="line">TSS[14] = (DWORD)bu;  // ESP</span><br><span class="line">TSS[15] = 0x00000000; // EBP</span><br><span class="line">TSS[16] = 0x00000000; // ESI</span><br><span class="line">TSS[17] = 0x00000000; // EDI</span><br><span class="line">TSS[18] = 0x00000023; // ES</span><br><span class="line">TSS[19] = 0x00000008; // CS 0x0000001B</span><br><span class="line">TSS[20] = 0x00000010; // SS 0x00000023</span><br><span class="line">TSS[21] = 0x00000023; // DS</span><br><span class="line">TSS[22] = 0x00000030; // FS 0x0000003B</span><br><span class="line">TSS[23] = 0x00000000; // GS</span><br><span class="line">TSS[24] = 0x00000000; // LDT Segment Selector</span><br><span class="line">TSS[25] = 0x20ac0000; // I/O Map Base Address</span><br><span class="line">//修改TR寄存器</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">int 0x20</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;ok: %d    ESP: %x    CS: %x\n&quot;, dwOk, dwESP, dwCS);</span><br><span class="line">printf(&quot;%x\n&quot;, High2GValue);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在IDT表中构造的任务门和在GDT表中构造的TSS任务段描述符分别如下：</p><p><img src="/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/2.PNG"></p><p><img src="/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/3.PNG"></p><p>执行流程与前面CALL FAR到任务段一样。执行结果如下，并且成功提权进入0环。</p><p><img src="/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/4.PNG"></p><p>2、首先构造需要进到一环的所有段寄存器，并写入GDT表中如下位置：</p><p><img src="/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/5.PNG"></p><p>ES、DS不用改。</p><p>SS用00cfb300 0000ffff写入8003f0b0处，对应的选择子为0x1011 0001（第22个，0xb1）。</p><p>CS用00cfbb00 0000ffff写入8003f0b8处，对应的选择子为0x1011 1001（第23个，0xb9）。</p><p>FS用ffc0b3df f0000001写入8003f0c0处，对应的选择子为0x1100 0001（第24个，0xc1）。</p><p>修改的方法就是找到原来进入0环时的选择子，找到对应的描述符，将DPL改为1即可。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">DWORD dwOk;</span><br><span class="line">DWORD dwESP;</span><br><span class="line">DWORD dwCS;</span><br><span class="line">void __declspec(naked) MyFunc()</span><br><span class="line">&#123;</span><br><span class="line">dwOk = 1;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">mov eax, esp</span><br><span class="line">mov dwESP, eax</span><br><span class="line">mov ax, cs</span><br><span class="line">mov word ptr ds : [dwCS], ax</span><br><span class="line">//回去的代码</span><br><span class="line">iretd</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">//构造TSS</span><br><span class="line">char bu[0x10];</span><br><span class="line">DWORD icr3;</span><br><span class="line">DWORD TSS[0x68];</span><br><span class="line">printf(&quot;TSS地址: %08X\n&quot;, TSS);</span><br><span class="line">printf(&quot;设定的ESP堆栈为: %08X\n&quot;, bu);</span><br><span class="line">printf(&quot;input cr3: \n&quot;);</span><br><span class="line">scanf(&quot;%x&quot;, &amp;icr3);//通过windbg工具 !process 0 0指令获取</span><br><span class="line">TSS[0] = 0x00000000; // Previous Task Link CPU填充，表示上一个任务的选择子</span><br><span class="line">TSS[1] = 0x00000000; // ESP0</span><br><span class="line">TSS[2] = 0x00000000; // SS0</span><br><span class="line">TSS[3] = (DWORD)bu; // ESP1</span><br><span class="line">TSS[4] = 0x000000b1; // SS1</span><br><span class="line">TSS[5] = 0x00000000; // ESP2</span><br><span class="line">TSS[6] = 0x00000000; // SS2</span><br><span class="line">TSS[7] = (DWORD)icr3; // CR3 学到页就知道是啥了</span><br><span class="line">TSS[8] = (DWORD)MyFunc; // EIP</span><br><span class="line">TSS[9] = 0x00000000; // EFLAGS</span><br><span class="line">TSS[10] = 0x00000000; // EAX</span><br><span class="line">TSS[11] = 0x00000000; // ECX</span><br><span class="line">TSS[12] = 0x00000000; // EDX</span><br><span class="line">TSS[13] = 0x00000000; // EBX</span><br><span class="line">TSS[14] = (DWORD)bu; // ESP</span><br><span class="line">TSS[15] = 0x00000000; // EBP</span><br><span class="line">TSS[16] = 0x00000000; // ESI</span><br><span class="line">TSS[17] = 0x00000000; // EDI</span><br><span class="line">TSS[18] = 0x00000023; // ES</span><br><span class="line">TSS[19] = 0x000000b9; // CS 0x0000001B</span><br><span class="line">TSS[20] = 0x000000b1; // SS 0x00000023</span><br><span class="line">TSS[21] = 0x00000023; // DS</span><br><span class="line">TSS[22] = 0x000000c1; // FS 0x0000003B</span><br><span class="line">TSS[23] = 0x00000000; // GS</span><br><span class="line">TSS[24] = 0x00000000; // LDT Segment Selector</span><br><span class="line">TSS[25] = 0x20ac0000; // I/O Map Base Address</span><br><span class="line">//修改TR寄存器</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">int 0x20</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;ok: %d    ESP: %x    CS: %x\n&quot;, dwOk, dwESP, dwCS);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/6.PNG"></p><p>这里补充一下，TSS中ESP0、1、2的作用在于当使用任务门等手段进入任务段后再次发生由于权限变化导致堆栈切换时，提供对应权限的对应值，而只有ESP和SS才是当进入任务段后的堆栈。</p><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><p><strong>问题：</strong></p><ol><li>在开头已经提过了，为什么已经可以通过JMP FAR和CALL FAR访问任务段了，还需要任务门呢？</li><li>在保护模式中，当CPU检测到异常的时候，会根据异常的类型来查找对应的异常处理函数。比如当指令检测到除0异常时，将默认执行0号中断。请列出处理除0异常的函数的地址。</li><li>在保护模式中，当CPU检测到异常的时候，会根据异常的类型来查找对应的异常处理函数。比如当指令检测到除0异常时，将默认执行0号中断所指定的异常处理程序。但是，异常处理程序本身仍然可能出现异常，如果异常处理程序出现异常的时候（双重错误），CPU会默认执行8号中断，请分析：8号中断是什么？做了什么事情？替换了哪些寄存器？替换后的值是多少？为什么这样设计？</li></ol><p><strong>答案：</strong></p><ol><li><p>JMP FAR 和 CALL FAR 是主动访问任务段。设计任务门是发生错误后执行int指令被动去往对应的错误处理函数。</p></li><li><p>IDT表内容如下：</p><p><img src="/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/7.PNG"></p><p>0号中断为80538e00&#96;0008f19c。这是一个中断门，对应的代码段选择子为0x08，代码偏移为0x8053f19c，因此处理除0异常的函数地址为0x8053f19c。</p></li><li><p>8号中断为00008500&#96;00501198。这是一个任务门，里面的TSS段选择子为0x50。接着观察GDT表0x50（0101 0000，第10项）对应的段选择子，如下图：</p><p><img src="/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/8.PNG"></p><p>这是一个TSS段描述符，TSS段基址为8054af00。查看这个地址内容，如下：</p><p><img src="/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/9.PNG"></p><p>在这个TSS段中，替换的ESP0 &#x3D; 80547f00，SS0 &#x3D; 0x10，CR3 &#x3D; 00b4f000，EIP &#x3D; 805404ce，其他依次对应图中的值。且对应的程序如下：</p><p><img src="/2023/03/15/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A11%E3%80%81%E4%BB%BB%E5%8A%A1%E9%97%A8/10.PNG"></p><p>当程序出现双重错误后，将执行这里的程序，完成任务切换。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;上节课学习了任务段，知道了我们使用CALL FAR和JMP FAR指令通过任务段描述符跳转到TSS段来替换全部寄存器。这节课我们来学习如何通过任务门来访问任务段。那么这就首先带来了一个问题，明明我们都已经可以通过CALL FAR和JMP FAR指令访问任务段了，为什么还需要任务门呢？&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：10、任务段</title>
    <link href="http://example.com/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/"/>
    <id>http://example.com/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/</id>
    <published>2023-03-06T12:42:18.000Z</published>
    <updated>2023-03-15T10:48:28.796Z</updated>
    
    <content type="html"><![CDATA[<p>先来回顾一下前面所学的内容：在调用门、中断门和陷阱门中，发生权限的切换时，堆栈也会随之切换（从3环的堆栈切换成0环的堆栈），堆栈的切换就带来了ESP和SS的切换。在调用门提权时，压入堆栈的数据依次是：SS、ESP、CS和EIP。那么，EIP和CS由要跳转的地方决定，可是ESP和SS从哪里得到呢？答案就是TSS（Task-state segment）任务状态段。</p><span id="more"></span><h1 id="对TSS的理解"><a href="#对TSS的理解" class="headerlink" title="对TSS的理解"></a>对TSS的理解</h1><p>先来看一下TSS的结构：</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/1.PNG"></p><p>TSS是一块内存，结构如上图所示，大小一共为104字节。在上图中可以看到，SS和ESP一共有三组，分别对应了0、1、2环的堆栈，要去几环就拿几环的用。</p><p>在上图的结构中，前四个字节（Previous Task Link）为指向前一个TSS内存的<strong>编号</strong>。然后是0、1、2环的SS和ESP，接着是通用寄存器，后面是各种段寄存器。注意到上面有一个<strong>LDT段选择子</strong>，我们前面讲过段寄存器其中就有一个<strong>LDTR</strong>。既然是段寄存器，就一定有选择子、base和limit。想象一下，当我们用上面这一块TSS来替换全部的寄存器的时候，EAX中写的1就会直接存入EAX寄存器中，但是如果GS中写的是0x23，不是直接将0x23写入GS段寄存器中，而是通过0x23（作为选择子）查表，将查到的64位段描述符扩展成80位，加上16位的0x23，写入96位的GS段寄存器中。同理，TSS中LDT存放的也是一个选择子，对应的是GDT表中的LDT段描述符。因此加载这块TSS时，LDT段选择子会连同对应的LDT段描述符加载到LDTR段寄存器中，这个LDTR就用来描述LDT表的基址和大小。</p><p>联系一下前面的知识，在段选择子中有一个叫做TI的部分，当TI&#x3D;0时查找的是GDT表，这个GDT表可以从GDTR寄存器中获取。同理，当TI&#x3D;1（例如指令mov ds,0x5C）时查找的是LDT表，这个LDT表去哪里找呢？在LDTR中。</p><p>Intel设计TSS的本意，是通过TSS里面存放各种寄存器的值，来达到线程（任务）切换的目的。它的本意是，一个核一张GDT表，随着这个核做任务切换，会由不同的TSS对应不同的任务，一个TSS又对应一个LDT表。因此，对于单核来说，只有一张GDT表，有几个任务就有几个TSS和LDT表。但是Windows并没有按照这个意图来做，而是只用到了TSS中的SS0和ESP0。</p><p>因此，目前就要这样理解：TSS跟任务切换没有关系，不要把二者联系在一起，TSS的意义就是可以同时换掉这一堆寄存器的值，仅此而已。</p><p>注：任务是CPU层面的东西，对应的是操作系统层面的线程。</p><h1 id="寻找TSS的流程及相关知识"><a href="#寻找TSS的流程及相关知识" class="headerlink" title="寻找TSS的流程及相关知识"></a>寻找TSS的流程及相关知识</h1><p>那么CPU如何找到TSS这一块内存呢？看下图：</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/2.PNG"></p><p>在GDT表中，有一种段描述符叫做TSS段描述符。在操作系统启动时，通过<strong>TR段寄存器</strong>（96位）的段选择子部分找到GDT表中的TSS段描述符，将该描述符加载到TR寄存器的剩余部分。然后通过TR段寄存器中的BASE就得到了TSS的基址，通过Limit就得到了TSS的大小。</p><p><strong>TSS段描述符</strong>结构如下：</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/3.PNG"></p><p>在GDT表中，当S位（第12位）位0时，就代表这是一个系统段描述符，系统段描述符有很多种（比如调用门、中断门、陷阱门、TSS等），当第8-11位为9或B（1001或1011）时，就代表这是一个TSS段描述符。当为9（1001）时，代表这个TSS段描述符还没有加载到TR寄存器中，为B（1011）代表已经加载到了。</p><p>TR段寄存器的读写：</p><ol><li><p>写TR，即将TSS段描述符加载到TR寄存器</p><p>指令：LTR</p><p>说明：</p><ul><li>用LTR指令去装载的话，仅仅是改变TR寄存器的值(96位)，并没有真正改变TSS。</li><li>LTR指令只能在系统层使用（0环）。</li><li>加载后TSS段描述符会状态位会发生改变，从9（1001）变成B（1011）。</li></ul></li><li><p>读TR</p><p>指令：STR</p><p>说明：如果用STR去读的话，只读了TR的16位 也就是选择子。</p></li></ol><h1 id="修改TSS"><a href="#修改TSS" class="headerlink" title="修改TSS"></a>修改TSS</h1><p>上面介绍了LTR指令只能改变TR寄存器的值，并没有改变真正TSS的位置。CPU通过TR段寄存器来找到TSS。如果我们想用自己的TSS段来替换原来的寄存器，就要修改TR寄存器。TR寄存器的值又是来自TSS段描述符，因此可以通过在GDT表中构造一个TSS段描述符来达到修改TR的目的。</p><p><strong>修改TSS的步骤</strong>：</p><ol><li>自己准备104字节的内存，并赋值。</li><li>构造TSS段描述符：XX00e9XX~XXXX0068。以前学习的段，G位基本上都为1（粒度为4KB），TSS段描述符G位为0（粒度为1字节）。XXXXXXXX为我们自己提供的新的104个字节的地址。</li><li>修改TR段寄存器：<ul><li>如果是在0环，可以使用上面提到的LTR指令。</li><li>如果是在3环，可以使用CALL FAR指令或者JMP FAR指令来修改。</li></ul></li></ol><p>下面以JMP FAR指令来看一下：</p><ul><li>前面讲过JMP FAR去访问代码段的时候，改变的是CS和EIP，例如JMP 0x48：0x12345678，如果0x48是代码段，那么执行后CS&#x3D;0x48，EIP&#x3D;0x12345678。</li><li>如果JMP FAR去访问TSS段的时候，还是上面的指令，0x48是TSS段描述符，则先修改TR寄存器（修改过程就是用0x48指向的TSS段描述符填补TR寄存器），然后用TR.Base指向的TSS段中的值替换当前这些寄存器。</li></ul><p>CALL FAR指令也能修改TR寄存器，区别在于：</p><ol><li>如果使用JMP的话，在TSS表中前4个字节的LINK不变，原来是0后来还是0。但是CALL的话，LINK会自动由CPU写入上一个TSS的段选择子。</li><li>如果使用JMP的话，eflags中的NT位不变为0。CALL的话NT位置1。</li></ol><p>注：NT位影响的是iret指令。</p><ul><li>NT &#x3D; 0时，使用iret，从堆栈中取值，是中断返回。</li><li>NT &#x3D; 1时，使用iret，不是中断返回，会找ptl（TSS的前4个字节，前一个TSS的段选择子）。</li></ul><h1 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h1><p><strong>问题：</strong></p><p>一、使用CALL去访问一个任务段，并能够正确返回。</p><p>二、使用JMP去访问一个任务段，并能够正确返回。</p><p><strong>答案：</strong></p><p>一、代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">DWORD dwOk;</span><br><span class="line">DWORD dwESP;</span><br><span class="line">DWORD dwCS;</span><br><span class="line"><span class="type">int</span> High2GValue;</span><br><span class="line"><span class="type">void</span> __declspec(naked) <span class="built_in">MyFunc</span>()</span><br><span class="line">&#123;</span><br><span class="line">dwOk = <span class="number">1</span>;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//push fs</span></span><br><span class="line"><span class="comment">//int 3 // int 3 会修改FS</span></span><br><span class="line"><span class="comment">//pop fs</span></span><br><span class="line">mov eax, esp</span><br><span class="line">mov dwESP, eax</span><br><span class="line">mov ax, cs</span><br><span class="line">mov word ptr ds : [dwCS], ax</span><br><span class="line">mov eax, <span class="number">0x8003f00c</span></span><br><span class="line">mov eax, [eax]</span><br><span class="line">mov High2GValue, eax</span><br><span class="line"><span class="comment">//回去的代码</span></span><br><span class="line">iretd</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//构造TSS</span></span><br><span class="line"><span class="type">char</span> bu[<span class="number">0x10</span>];</span><br><span class="line">DWORD icr3;</span><br><span class="line">DWORD TSS[<span class="number">0x68</span>];</span><br><span class="line"><span class="type">char</span> buff[<span class="number">6</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;TSS地址: %08X\n&quot;</span>, TSS);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;设定的ESP堆栈为: %08X\n&quot;</span>, bu);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input cr3: \n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%x&quot;</span>, &amp;icr3);<span class="comment">//通过windbg工具 !process 0 0指令获取，并在此时将构造好的TSS描述符写入</span></span><br><span class="line">TSS[<span class="number">0</span>] = <span class="number">0x00000000</span>;<span class="comment">// Previous Task Link CPU填充，表示上一个任务的选择子</span></span><br><span class="line">TSS[<span class="number">1</span>] = (DWORD)bu;<span class="comment">// ESP0</span></span><br><span class="line">TSS[<span class="number">2</span>] = <span class="number">0x00000010</span>;<span class="comment">// SS0</span></span><br><span class="line">TSS[<span class="number">3</span>] = <span class="number">0x00000000</span>;<span class="comment">// ESP1</span></span><br><span class="line">TSS[<span class="number">4</span>] = <span class="number">0x00000000</span>;<span class="comment">// SS1</span></span><br><span class="line">TSS[<span class="number">5</span>] = <span class="number">0x00000000</span>;<span class="comment">// ESP2</span></span><br><span class="line">TSS[<span class="number">6</span>] = <span class="number">0x00000000</span>;<span class="comment">// SS2</span></span><br><span class="line">TSS[<span class="number">7</span>] = (DWORD)icr3;<span class="comment">// CR3 学到页就知道是啥了</span></span><br><span class="line">TSS[<span class="number">8</span>] = (DWORD)MyFunc;<span class="comment">// EIP</span></span><br><span class="line">TSS[<span class="number">9</span>] = <span class="number">0x00000000</span>;<span class="comment">// EFLAGS</span></span><br><span class="line">TSS[<span class="number">10</span>] = <span class="number">0x00000001</span>;<span class="comment">// EAX</span></span><br><span class="line">TSS[<span class="number">11</span>] = <span class="number">0x00000002</span>;<span class="comment">// ECX</span></span><br><span class="line">TSS[<span class="number">12</span>] = <span class="number">0x00000003</span>;<span class="comment">// EDX</span></span><br><span class="line">TSS[<span class="number">13</span>] = <span class="number">0x00000004</span>;<span class="comment">// EBX</span></span><br><span class="line">TSS[<span class="number">14</span>] = (DWORD)bu;<span class="comment">// ESP</span></span><br><span class="line">TSS[<span class="number">15</span>] = <span class="number">0x00000000</span>;<span class="comment">// EBP</span></span><br><span class="line">TSS[<span class="number">16</span>] = <span class="number">0x00000000</span>;<span class="comment">// ESI</span></span><br><span class="line">TSS[<span class="number">17</span>] = <span class="number">0x00000000</span>;<span class="comment">// EDI</span></span><br><span class="line">TSS[<span class="number">18</span>] = <span class="number">0x00000023</span>;<span class="comment">// ES</span></span><br><span class="line">TSS[<span class="number">19</span>] = <span class="number">0x00000008</span>;<span class="comment">// CS 0x0000001B</span></span><br><span class="line">TSS[<span class="number">20</span>] = <span class="number">0x00000010</span>;<span class="comment">// SS 0x00000023</span></span><br><span class="line">TSS[<span class="number">21</span>] = <span class="number">0x00000023</span>;<span class="comment">// DS</span></span><br><span class="line">TSS[<span class="number">22</span>] = <span class="number">0x00000030</span>;<span class="comment">// FS 0x0000003B</span></span><br><span class="line">TSS[<span class="number">23</span>] = <span class="number">0x00000000</span>;<span class="comment">// GS</span></span><br><span class="line">TSS[<span class="number">24</span>] = <span class="number">0x00000000</span>;<span class="comment">// LDT Segment Selector</span></span><br><span class="line">TSS[<span class="number">25</span>] = <span class="number">0x20ac0000</span>;<span class="comment">// I/O Map Base Address</span></span><br><span class="line"><span class="comment">//修改TR寄存器</span></span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">call fword ptr[buff]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ok: %d    ESP: %x    CS: %x\n&quot;</span>, dwOk, dwESP, dwCS);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, High2GValue);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来分析一下这段代码的执行流程：想要通过CALL FAR访问任务段，首先要自己构造一个TSS内存块，这里我们用数组来构造。里面的ESP0和ESP就填入我们自己申请的bu[0x10]堆栈，并将CS赋值为0x00000008；然后将EIP（即访问任务段后要执行的代码）写成MyFunc函数地址，并分别给通用寄存器赋值。还有一个要点是CR3的值，需要我们在windbg中输入!process 0 0获取该进程的DirBase得到，如下图：</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/4.PNG"></p><p>然后代码通过call fword ptr[buff] 指令查询GDT表的选择子为0x48的位置，我们需要在这里构造TSS段描述符，结合已经打印出来的TSS数组的地址，构造如下图：</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/5.PNG"></p><p>执行结果如下图：</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/6.PNG"></p><p>可以看到，代码通过访问TSS段描述符，使用我们自己构造的TSS段，成功提权并执行了我们的函数，读取了高2G内存。关于提权，我们在TSS中给CS赋值为0x08（0000 1000），CPL&#x3D;0，选择子对应的代码段选择子DPL&#x3D;0，因此提权。如果我们在TSS中给CS赋值为0x1B（0001 1011），那么CPL&#x3D;3，对应的代码段DPL&#x3D;3，不提权。</p><p>此外，我还想验证一下在进入TSS前后4个通用寄存器的变化情况以及堆栈的情况，因此做如下改进：在进入TSS之前将EXA、ECX、EDX、EBX分别赋值为9、8、7、6，在TSS数组中给它们分别赋值1、2、3、4，并且在进入到函数MyFunc()后push几个值，并下断点，最后返回，观察情况。</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/8.PNG"></p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/9.PNG"></p><p>在MyFunc()函数中断下来后，可以看到这几个寄存器都被我们构造的TSS替换了，并且当我们向此时的堆栈中压入值时，压入的地址是我们设定的bu[0x10]数组。</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/7.PNG"></p><p>当代码从MyFunc()中返回后，可以看到这几个通用寄存器又被替换回来了。为什么会替换回来了呢？因为这些值被保存在上一个TSS中，在使用CALL FAR去访问TSS的时候，CPU填充PTL，同时NT位置1，使用iretd非中断返回，通过PTL寻找上一个TSS，替换回原来的寄存器。</p><p>在上面的实验中，有如下两个值得注意的点：</p><ul><li>我这里为0环申请的堆栈为bu[0x10]，首地址为0x12ff70，但是由于压栈是从高地址向低地址，所以在给TSS中的ESP0和ESP赋值时，应该写入的是bu数组的最高地址(DWORD)bu + 0x10，我这里写错了。</li><li>在MyFunc()函数使用int 3指令，由于该指令会修改FS寄存器，因此在该指令前后应该保存并弹出fs，但是我这里不清楚为什么还是会蓝屏。因此在这里使用int 3指令需要小心，至于为什么后面再研究研究。</li></ul><p>二、代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">DWORD dwOk;</span><br><span class="line">DWORD dwESP;</span><br><span class="line">DWORD dwCS;</span><br><span class="line"><span class="type">int</span> High2GValue;</span><br><span class="line">BYTE PrevTr[<span class="number">6</span>];<span class="comment">// 旧TR，供裸函数返回</span></span><br><span class="line"><span class="comment">//0x401020</span></span><br><span class="line"><span class="type">void</span> __declspec(naked) <span class="built_in">MyFunc</span>()</span><br><span class="line">&#123;</span><br><span class="line">dwOk = <span class="number">1</span>;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">mov eax, esp</span><br><span class="line">mov dwESP, eax</span><br><span class="line">mov ax, cs</span><br><span class="line">mov word ptr ds : [dwCS], ax</span><br><span class="line">mov eax, <span class="number">0x8003f00c</span></span><br><span class="line">mov eax, [eax]</span><br><span class="line">mov High2GValue, eax</span><br><span class="line"><span class="comment">//回去的代码</span></span><br><span class="line">jmp fword ptr[PrevTr]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//构造TSS</span></span><br><span class="line"><span class="type">char</span> bu[<span class="number">0x1000</span>];</span><br><span class="line">DWORD icr3;</span><br><span class="line">DWORD TSS[<span class="number">0x68</span>];</span><br><span class="line"><span class="type">char</span> buff[<span class="number">6</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x48</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;TSS地址: %08X\n&quot;</span>, TSS);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;设定的ESP堆栈为: %08X\n&quot;</span>, bu + <span class="number">0x900</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input cr3: \n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%x&quot;</span>, &amp;icr3);<span class="comment">//通过windbg工具 !process 0 0指令获取</span></span><br><span class="line">TSS[<span class="number">0</span>] = <span class="number">0x00000000</span>;<span class="comment">// Previous Task Link CPU填充，表示上一个任务的选择子</span></span><br><span class="line">TSS[<span class="number">1</span>] = <span class="number">0x00000000</span>;<span class="comment">// ESP0</span></span><br><span class="line">TSS[<span class="number">2</span>] = <span class="number">0x00000000</span>;<span class="comment">// SS0</span></span><br><span class="line">TSS[<span class="number">3</span>] = <span class="number">0x00000000</span>;<span class="comment">// ESP1</span></span><br><span class="line">TSS[<span class="number">4</span>] = <span class="number">0x00000000</span>;<span class="comment">// SS1</span></span><br><span class="line">TSS[<span class="number">5</span>] = <span class="number">0x00000000</span>;<span class="comment">// ESP2</span></span><br><span class="line">TSS[<span class="number">6</span>] = <span class="number">0x00000000</span>;<span class="comment">// SS2</span></span><br><span class="line">TSS[<span class="number">7</span>] = (DWORD)icr3;<span class="comment">// CR3 学到页就知道是啥了</span></span><br><span class="line">TSS[<span class="number">8</span>] = (DWORD)MyFunc; <span class="comment">// EIP</span></span><br><span class="line">TSS[<span class="number">9</span>] = <span class="number">0x00000000</span>;<span class="comment">// EFLAGS</span></span><br><span class="line">TSS[<span class="number">10</span>] = <span class="number">0x00000000</span>;<span class="comment">// EAX</span></span><br><span class="line">TSS[<span class="number">11</span>] = <span class="number">0x00000000</span>;<span class="comment">// ECX</span></span><br><span class="line">TSS[<span class="number">12</span>] = <span class="number">0x00000000</span>;<span class="comment">// EDX</span></span><br><span class="line">TSS[<span class="number">13</span>] = <span class="number">0x00000000</span>;<span class="comment">// EBX</span></span><br><span class="line">TSS[<span class="number">14</span>] = (DWORD)bu + <span class="number">0x900</span>; <span class="comment">// ESP</span></span><br><span class="line">TSS[<span class="number">15</span>] = <span class="number">0x00000000</span>;<span class="comment">// EBP</span></span><br><span class="line">TSS[<span class="number">16</span>] = <span class="number">0x00000000</span>;<span class="comment">// ESI</span></span><br><span class="line">TSS[<span class="number">17</span>] = <span class="number">0x00000000</span>;<span class="comment">// EDI</span></span><br><span class="line">TSS[<span class="number">18</span>] = <span class="number">0x00000023</span>;<span class="comment">// ES</span></span><br><span class="line">TSS[<span class="number">19</span>] = <span class="number">0x00000008</span>;<span class="comment">// CS 0x00000008</span></span><br><span class="line">TSS[<span class="number">20</span>] = <span class="number">0x00000010</span>;<span class="comment">// SS 0x00000023</span></span><br><span class="line">TSS[<span class="number">21</span>] = <span class="number">0x00000023</span>;<span class="comment">// DS</span></span><br><span class="line">TSS[<span class="number">22</span>] = <span class="number">0x00000030</span>;<span class="comment">// FS 0x0000003B</span></span><br><span class="line">TSS[<span class="number">23</span>] = <span class="number">0x00000000</span>;<span class="comment">// GS</span></span><br><span class="line">TSS[<span class="number">24</span>] = <span class="number">0x00000000</span>;<span class="comment">// LDT Segment Selector</span></span><br><span class="line">TSS[<span class="number">25</span>] = <span class="number">0x20ac0000</span>;<span class="comment">// I/O Map Base Address</span></span><br><span class="line"><span class="comment">//修改TR寄存器</span></span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//保存原来的TR段寄存器中的选择子</span></span><br><span class="line">str ax</span><br><span class="line">lea edi, [PrevTr + <span class="number">4</span>]</span><br><span class="line">mov[edi], ax</span><br><span class="line">jmp fword ptr[buff]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ok: %d    ESP: %x    CS: %x\n&quot;</span>, dwOk, dwESP, dwCS);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, High2GValue);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的执行流程跟使用CALL时一样，先在0x48对应的位置构造TSS段描述符，然后获取该进程的CR3，就可以跳转到MyFunc函数并成功提权执行，执行结果如下：</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/10.PNG"></p><p>需要注意的是返回方式，在CALL FAR进入任务段时，在我们构造的TSS中会自动填充Pre Task Link字段（即原来的TR），并且NT位置1，直接使用iretd返回即可。但是通过JMP FAR访问任务段的话，既没有自动填充PreTR，NT位也没有置1，使用iretd返回的话会当成中断返回来使用，因此需要依次向栈中压入SS ESP EFLAGS CS EIP再使用iretd返回，比较麻烦。</p><p>返回的另一种方式，就是仍然通过JMP FAR的方式返回。既然还是跳回来，那么我们就需要在跳走前保存TR，使用指令str可以将此时TR中的段选择子保存起来，然后写入数组中，返回的时候直接JMP FAR到原来的TR就可以找到原来的TSS，就可以跳回来了。</p><p>我在保存TR的时候下了个断点，得到ax的值，然后在GDT中寻找对应的描述符，验证一下：</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/11.PNG"></p><p>ax&#x3D;0x28（0010 1000），索引为5，看一下GDT表：</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/12.PNG"></p><p>这里的描述符为80008b04&#96;200020ab，确实是一个TSS段描述符，TSS的地址为80042000，在windbg中看一下：</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A10%E3%80%81%E4%BB%BB%E5%8A%A1%E6%AE%B5/13.PNG"></p><p>这就是当前的TSS段。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先来回顾一下前面所学的内容：在调用门、中断门和陷阱门中，发生权限的切换时，堆栈也会随之切换（从3环的堆栈切换成0环的堆栈），堆栈的切换就带来了ESP和SS的切换。在调用门提权时，压入堆栈的数据依次是：SS、ESP、CS和EIP。那么，EIP和CS由要跳转的地方决定，可是ESP和SS从哪里得到呢？答案就是TSS（Task-state segment）任务状态段。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：9、陷阱门</title>
    <link href="http://example.com/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A9%E3%80%81%E9%99%B7%E9%98%B1%E9%97%A8/"/>
    <id>http://example.com/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A9%E3%80%81%E9%99%B7%E9%98%B1%E9%97%A8/</id>
    <published>2023-03-06T03:46:58.000Z</published>
    <updated>2023-03-06T09:57:18.200Z</updated>
    
    <content type="html"><![CDATA[<p>上节课讲到了IDT表，在IDT表中有三种门描述符分别是：中断门描述符、任务门描述符和陷阱门描述符。这节课来学习陷阱门。</p><span id="more"></span><h1 id="陷阱门"><a href="#陷阱门" class="headerlink" title="陷阱门"></a>陷阱门</h1><p>先来回顾一下中断门描述符结构：</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A9%E3%80%81%E9%99%B7%E9%98%B1%E9%97%A8/1.PNG"></p><p>再来看一下陷阱门描述符结构：</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A9%E3%80%81%E9%99%B7%E9%98%B1%E9%97%A8/2.PNG"></p><p>可以看到陷阱门对比中断门的结构来说，只有TYPE域不一样，中断门为1110，而陷阱门为1111。</p><p>中断门与陷阱门几乎一样，但是只有一点不同：<strong>中断门执行时，将IF位清零，但陷阱门不会</strong>。</p><h1 id="IF位"><a href="#IF位" class="headerlink" title="IF位"></a>IF位</h1><p>EFLAGS寄存器结构如下图所示：</p><p><img src="/2023/03/06/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A9%E3%80%81%E9%99%B7%E9%98%B1%E9%97%A8/3.PNG"></p><p>IF标志位于eflags寄存器中的标号为9的位置，也就是从后面查的第10个位置。</p><p>中断分为可屏蔽中断和不可屏蔽中断。IF标志用于控制处理器对<strong>可屏蔽中断</strong>请求的响应。置1以响应可屏蔽中断，置0则禁止可屏蔽中断。IF标志对不可屏蔽中断没有影响。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上节课讲到了IDT表，在IDT表中有三种门描述符分别是：中断门描述符、任务门描述符和陷阱门描述符。这节课来学习陷阱门。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：8、中断门</title>
    <link href="http://example.com/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/"/>
    <id>http://example.com/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/</id>
    <published>2023-03-03T12:41:29.000Z</published>
    <updated>2023-03-06T03:42:08.044Z</updated>
    
    <content type="html"><![CDATA[<p>上节课讲的是调用门，我们知道了调用门存在的价值就是提权。但是在Windows系统中，并没有使用调用门，而是使用了中断门，用来实现系统调用和调试相关的工作。</p><span id="more"></span><h1 id="中断门"><a href="#中断门" class="headerlink" title="中断门"></a>中断门</h1><p>在Windows中，除了有GDT表以外，还有一张IDT表。与GDT表类似，IDT表也是由一系列描述符组成的，每个描述符也有8个字节。但是与GDT不同的是，GDT的第一项是空，而IDT的第一项不为空。在windbg中可以通过如下指令查看IDT表：</p><p><img src="/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/1.PNG"></p><p>前面讲过，见到CALL FAR这种指令，CPU就会去查GDT表，而见到<strong>INT</strong>这种指令，CPU就会去查IDT表。在CALL FAR指令中，后面跟的值有3个含义：索引、TI、RPL。而在INT指令（如INT 3）中，后面跟的值只有一个含义，那就是索引。因此这里就会有一个问题：为什么中断门这里不需要RPL了呢？这就意味着，调用门的权限检查需要检查RPL和CPL，而中断门只需要检查CPL。</p><p>在GDT表中，描述符分为如下三种：系统段、代码段、数据段。而在IDT表中，也有三种东西：任务门描述符、中断门描述符、陷阱门描述符。中断门结构如下：</p><p><img src="/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/2.PNG"></p><p>在上图中，P&#x3D;1，S&#x3D;0（第12位），TYPE&#x3D;1110（第8-11位），就是中断门。与调用门类似的是，这里中断门的DLP也必须为3，CPL&#x3D;3的代码才能访问这个中断门。因此中断门的基础结构应该是0000ee00~00000000。</p><p>中断门的执行流程为：首先根据INT指令后面的索引查询IDT表，找到对应的中断门描述符。然后通过中断门描述符中的代码段选择子，查询GDT表，找到GDT中对应的代码段描述符。最后结合中断门中的偏移，跳转到目标代码处执行。</p><p><strong>关于堆栈：</strong></p><ol><li>在没有权限切换的情况下，会向堆栈PUSH3个值，分别是：CS、EFLAGS、EIP（返回地址）。</li><li>在有权限切换的情况下，会向堆栈PUSH5个值，分别是：SS、ESP、EFLAGS、CS、EIP。</li></ol><p>注意堆栈中EFLAGS的位置，可以与调用门的堆栈对比看看。</p><p><strong>关于中断返回：</strong></p><p>CALL FAR指令的调用门使用的是<strong>retf</strong>指令返回，而对于中断门来说，<u>正常情况下</u>不能使用retf指令返回，而应该使用<strong>IRET或IRETD</strong>指令返回。（IRET和IRETD其实是有区别的，具体先不讲，下面做实验看看）</p><p><strong>调用门与中断门的区别总结：</strong></p><ol><li>调用门通过CALL FAR指令执行，中断门通过INT 指令执行。</li><li>调用门查询GDT表，而中断门先查询IDT表后查询GDT表，跨表了。</li><li>CALL CS:IP中的CS是段选择子，由三部分组成；但INT N中的N只是索引，中断门不检查RPL，只检查CPL。</li><li>调用门可以有参数，中断门没有参数。</li></ol><h1 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>自己实现中断门。</li><li>在调用门中实现使用IRETD返回，在中断门中实现使用RETF返回。</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>一、首先查看IDT表如下：</p><p><img src="/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/3.PNG"></p><p>在位于0x8003f500的位置有一个空的描述符，我们可以将构造好的中断门写入这里，这里的索引为32，因此可以通过INT 32指令进入这个中断门。</p><p>再来查看GDT表：</p><p><img src="/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/4.PNG"></p><p>我们通过中断门访问标注出来的代码段描述符，该代码段描述符我们前面使用过很多次了，是一个DPL&#x3D;0的代码段，可以用来提权。因此目前的中断门应该构造为0000ee00&#96;00080000。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">DWORD dwHigh2GValue;</span><br><span class="line">//0x401020</span><br><span class="line">void __declspec(naked) FunctionHas0CPL()</span><br><span class="line">&#123;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov eax, 0x8003f00c</span><br><span class="line">mov eax, [eax]</span><br><span class="line">mov dwHigh2GValue, eax</span><br><span class="line">IRETD// 这里写成iret 会蓝屏，因为 iret的硬编码是66CF，32位下应该使用iretd，硬编码是CF</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123; </span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">INT 32 // 进入中断门，查询IDT表第32项</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%08x\n&quot;, dwHigh2GValue);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察想要跳转的目标函数的地址：</p><p><img src="/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/5.PNG"></p><p>我们的函数FunctionHas0CPL的地址为0x401020，故修改IDT表第32项为0040ee00&#96;00081020：</p><p><img src="/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/6.PNG"></p><p>执行结果如下图：</p><p><img src="/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/7.PNG"></p><p>这里成功通过中断门提权。注意执行中断返回的时候要使用IRETD指令。</p><p>二、（1）代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">DWORD Value;</span><br><span class="line">//0x40DDF0</span><br><span class="line">void _declspec(naked) MyFunc()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">mov eax, 0x8003f00c</span><br><span class="line">mov ebx, [eax]</span><br><span class="line">mov Value, ebx</span><br><span class="line">pushfd</span><br><span class="line">mov eax,[esp]//eflags</span><br><span class="line">mov ebx,[esp+4]//eip</span><br><span class="line">mov ecx,[esp+8]//cs</span><br><span class="line">mov [esp+8],eax</span><br><span class="line">mov [esp+4],ecx</span><br><span class="line">mov [esp],ebx</span><br><span class="line">//retf</span><br><span class="line">iretd</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">char buff[6] = &#123;0x78, 0x56, 0x34, 0x12, 0x48, 0x00&#125;;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">call fword ptr[buff]</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%x\n&quot;, Value);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心思想就是利用pushfd指令将eflags入栈，然后交换eflags、eip和cs的位置，使之结构与通过中断门后的堆栈一致，就可以利用iretd返回。结果如下：</p><p><img src="/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/8.PNG"></p><p>二、（2）代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">DWORD Value;</span><br><span class="line">//0x40DDD0</span><br><span class="line">void _declspec(naked) MyFunc()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">mov eax, 0x8003f00c</span><br><span class="line">mov ebx, [eax]</span><br><span class="line">mov Value, ebx</span><br><span class="line">mov eax,[esp]//eip</span><br><span class="line">mov ebx,[esp+4]//cs</span><br><span class="line">mov ecx,[esp+8]//eflags</span><br><span class="line">mov [esp],ecx</span><br><span class="line">mov [esp+4],eax</span><br><span class="line">mov [esp+8],ebx</span><br><span class="line">popfd</span><br><span class="line">retf</span><br><span class="line">//iretd</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">INT 32</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%x\n&quot;, Value);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上面类似，核心思想就是先调整位置，然后利用popfd将eflags弹出，最后使用retf返回。执行结果如下：</p><p><img src="/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/9.PNG"></p><p>总结：正常情况下，在调用门中利用retf返回，在中断门中利用iretd返回。但是并不一定必须这样，因为只要知道了这两条返回语句的作用，即可灵活运用。</p><p>retf是分别按顺序弹出保存eip、cs、esp和ss（提权情况下）</p><p>iretd是分别按顺序弹出保存eip、cs、eflags、esp和ss（提权情况下）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上节课讲的是调用门，我们知道了调用门存在的价值就是提权。但是在Windows系统中，并没有使用调用门，而是使用了中断门，用来实现系统调用和调试相关的工作。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：7、调用门</title>
    <link href="http://example.com/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/"/>
    <id>http://example.com/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/</id>
    <published>2023-02-24T11:30:19.000Z</published>
    <updated>2023-03-03T12:48:00.150Z</updated>
    
    <content type="html"><![CDATA[<p>上一节课讲解了CALL及CALL FAR指令的格式和堆栈的变化，知道了想要提权可以通过调用门的方式来实现。这节课我们就来具体讲解调用门的结构以及执行流程，并分析在无参和有参的情况下堆栈的区别。</p><span id="more"></span><h1 id="无参调用门提权"><a href="#无参调用门提权" class="headerlink" title="无参调用门提权"></a>无参调用门提权</h1><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>指令格式为：CALL CS:EIP（EIP废弃）</p><ol><li>根据CS的值查GDT表，找到对应的段描述符，这个描述符是一个调用门。</li><li>在调用门描述符中存储着另一个代码段的段选择子，位于低4字节的16-31位。（注意必须是代码段）</li><li>选择子指向的段.Base + 偏移地址，就是真正要执行的地址，偏移地址存储在调用门描述符低4字节0-15位和高4字节16-31位。</li></ol><h2 id="调用门描述符结构"><a href="#调用门描述符结构" class="headerlink" title="调用门描述符结构"></a>调用门描述符结构</h2><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/1.PNG"></p><p>注意这里段描述符的DPL，由于我们是用调用门来提权，是从3环访问调用门，然后通过调用门去到指定的代码段，因此调用门的DPL必须是3。如果是0的话，3环的代码无法访问调用门，连敲门的权限都没有了。</p><p>而调用门中的选择子指向的代码段的DPL可以为0，这样就实现了通过调用门来提权。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>下面我们通过代码做实验，实现无参调用门提权读取高2G内存，并观察堆栈与寄存器的变化。</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/2.PNG"></p><p>首先观察GDT表，在虚拟地址0x8003f048的位置是空白，这里系统没有用到，我们可以在这里构造调用门，调用门的选择子为0100 1000（0x48）。在调用门中，我们打算指向上图中标注出来的位于8003f008处的段描述符，index&#x3D;1，选择子应为0000 1000（0x08），这是一个DPL为0的代码段（注意这个描述符下方是一个DPL为3的代码段，这两个段很常用）。至于偏移，我们还不清楚，先写成0。</p><p>因此，构造完的调用门为：0000EC00 00080000。实验代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">DWORD dwH2GValue;</span><br><span class="line">void _declspec(naked) MyFunc()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">int 3</span><br><span class="line">/*</span><br><span class="line">pushad</span><br><span class="line">pushfd</span><br><span class="line">mov eax,0x8003f00c//读取高2G内存</span><br><span class="line">mov ebx,[eax]</span><br><span class="line">mov dwH2GValue,ebx</span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line">*/</span><br><span class="line">retf//注意返回，不能是ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">char buff[6] = &#123;0x78, 0x56, 0x34, 0x12, 0x48, 0x00&#125;;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">call fword ptr[buff]</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%08x&quot;, dwH2GValue);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看一下上面的代码，在main函数中通过CALL FAR指令进入调用门，调用门处的选择子为0x48。然后通过调用门进入我们提权后要执行的函数MyFunc处，这个函数MyFunc是一个裸函数，格式固定必须这么写。提权后即可访问0x8003f00c（高2G）处的内存。</p><p>因此，我们需要获取MyFunc的函数偏移，来写入构造的调用门中的偏移部分，如下图：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/3.PNG"></p><p>可以看到我们目标函数的偏移为0x00401030，结合前面构造的调用门，最终构造的结果为0040ec00&#96;00081030，并将这个调用门写入对应位置，如下图：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/4.PNG"></p><p>此处我们先来看一下进入调用门提权之前，一些寄存器的值：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/5.PNG"></p><p>可以看到，提权之前CS&#x3D;001B，SS&#x3D;0023，说明CPL&#x3D;3，ESP&#x3D;0012FF28，说明此时堆栈位于3环。此时我们进入调用门，转到我们要执行的MyFunc函数，执行到指令int 3后，会中断到0环的调试器中：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/6.PNG"></p><p>可以看到，中断的指令为00401030处的int 3指令，就是我们前面要跳转到的MyFunc函数的位置。同时，CS&#x3D;0008，SS&#x3D;0010，说明CPL&#x3D;0，ESP&#x3D;b1c61dd0，说明此时堆栈位于0环。然后我们观察堆栈，可以看到，从低到高依次是：返回地址、原CS、原ESP、原SS，符合上节课讲的堆栈图。继续执行代码，得到结果：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/7.PNG"></p><p>代码在通过调用门提权后，成功读取到高2G的内存。</p><h1 id="有参调用门提权"><a href="#有参调用门提权" class="headerlink" title="有参调用门提权"></a>有参调用门提权</h1><p>我们在通过调用门提权的时候，也可以传递参数给要执行的函数，方法就是在进入调用门之前先通过push指令将要传递的参数压入3环的堆栈。同时观察上面调用门的结构图，在高4字节的0-4位的Param Count部分代表的就是参数的数量。在进入调用门时，CPU会根据这个参数数量，将3环堆栈上的参数压入0环的堆栈中。那么此时0环堆栈又是怎样的呢？下面来做实验：</p><p>我们打算传入1和2两个参数，因此将上面构造的调用门中参数数量部分改为2。</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/8.PNG"></p><p>实验代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">int x;</span><br><span class="line">int y;</span><br><span class="line">void _declspec(naked) MyFunc()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">pushad//8个寄存器，32个字节</span><br><span class="line">pushfd//标志寄存器，4个字节</span><br><span class="line">mov eax,[esp+0x24+0x8+0x4]</span><br><span class="line">mov dword ptr ds:[x],eax</span><br><span class="line">mov eax,[esp+0x24+0x8+0x0]</span><br><span class="line">mov dword ptr ds:[y],eax</span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line">//int 3</span><br><span class="line">retf 0x8//注意堆栈平衡，写错蓝屏</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">char buff[6] = &#123;0x78, 0x56, 0x34, 0x12, 0x48, 0x00&#125;;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">push 1</span><br><span class="line">push 2</span><br><span class="line">call fword ptr[buff]</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;x = %x  y = %x\n&quot;, x, y);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们执行代码，中断在MyFunc函数中的int 3指令时，在windbg中查看堆栈如下：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/9.PNG"></p><p>在0环堆栈中，由低地址到高地址依次为：返回地址、原CS、参数2、参数1、原ESP、原SS。可以看到，传入的参数是被夹在了中间。这样一来，MyFunc函数中的汇编代码就很好理解了。执行结果如下图：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/10.PNG"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>当通过门，权限不变的时候，只会PUSH两个值：CS、返回地址。新的CS的值由调用门决定。</li><li>当通过门，权限改变的时候，会PUSH四个值：SS、ESP、CS、返回地址。新的CS的值由调用门决定，新的SS和ESP由TSS提供。</li><li>通过门调用时，要执行哪行代码由调用门决定，但使用RETF返回时，由堆栈中压入的值决定，这就是说，进门时只能按指定路线走，出门时可以翻墙（只要改变堆栈里面的值就可以想去哪去哪）。</li><li>可不可以再建个门出去呢？也就是用Call。当然可以了，前门进，后门出。</li></ol><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><p>仔细思考上面总结中的最后两条，并完成下面两道题。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>在前面实验的基础上进行修改，实现通过翻墙的方式返回到其它地址。</li><li>在前面实验的基础上进行修改，在门中再建一个门跳转到其它地址。</li></ol><p>要求：代码正常执行不蓝屏。</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>一、代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int Value;</span><br><span class="line">int OldEip;</span><br><span class="line">int DestAddr;</span><br><span class="line">//0x401030</span><br><span class="line">void _declspec(naked) MyFunc()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">mov eax, 0x8003f00c</span><br><span class="line">mov ebx, [eax]</span><br><span class="line">mov Value, ebx</span><br><span class="line">mov eax,[esp]</span><br><span class="line">mov OldEip,eax</span><br><span class="line">mov eax,[DestAddr]//这里也可以写成mov eax,DestAddr</span><br><span class="line">mov [esp],eax</span><br><span class="line">retf</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void FanQiang()</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(0, 0, 0, 0);</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">jmp OldEip</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">char buff[6] = &#123;0x78, 0x56, 0x34, 0x12, 0x48, 0x00&#125;;</span><br><span class="line">DestAddr = (int)FanQiang;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">call fword ptr[buff]</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%x\n&quot;, Value);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路就是在通过调用门提权进入MyFunc函数后，将0环堆栈顶部的返回地址替换成要跳转的其他函数FanQiang的地址（当然替换前要保存原来的EIP，用来返回原函数继续执行），在函数FanQiang中执行代码，最后jmp回原来的返回地址，即可实现”翻墙“。结果如下：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/11.PNG"></p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/12.PNG"></p><p>二、代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int Value1;</span><br><span class="line">int Value2;</span><br><span class="line">char buff1[6] = &#123; 0x00, 0x00, 0x00, 0x00, 0x48, 0x00 &#125;;//第一个调用门</span><br><span class="line">char buff2[6] = &#123; 0x00, 0x00, 0x00, 0x00, 0x90, 0x00 &#125;;//第二个调用门</span><br><span class="line">//从第一个调用门0x48进来的</span><br><span class="line">void _declspec(naked) MyFunc1()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">pushad</span><br><span class="line">pushfd</span><br><span class="line">mov eax, 0x8003f00c</span><br><span class="line">mov ebx, [eax]</span><br><span class="line">mov Value1, ebx</span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line">call fword ptr[buff2]</span><br><span class="line">retf</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//从第二个调用门0x90进来的</span><br><span class="line">void _declspec(naked) MyFunc2()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">pushad</span><br><span class="line">pushfd</span><br><span class="line">mov eax, 0x8003f01c</span><br><span class="line">mov ebx, [eax]</span><br><span class="line">mov Value2, ebx</span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line">retf</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">call fword ptr[buff1]</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%x %x\n&quot;, Value1, Value2);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然是在门中再建一个门，那么就需要在GDT表的空白位置构造两个调用门，如下：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/13.PNG"></p><p>执行结果如下：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/14.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一节课讲解了CALL及CALL FAR指令的格式和堆栈的变化，知道了想要提权可以通过调用门的方式来实现。这节课我们就来具体讲解调用门的结构以及执行流程，并分析在无参和有参的情况下堆栈的区别。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：6、代码间的调用-跨段调用</title>
    <link href="http://example.com/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/"/>
    <id>http://example.com/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/</id>
    <published>2023-02-23T11:18:26.000Z</published>
    <updated>2023-02-24T11:33:45.639Z</updated>
    
    <content type="html"><![CDATA[<p>上节课我们讲解了代码段间跳转JMP FAR指令及其执行流程，该指令可以同时改变CS和EIP。此外，CALL指令也有类似的作用。该指令与JMP类指令的区别在于，CALL FAR指令不仅可以同时改变CS和EIP，同时还会影响堆栈。除此以外，JMP类指令无法从低权限的非一致代码段跳转到高权限的非一致代码段，来提升CPL当前特权级，而CALL FAR指令却可以，就是通过调用门。</p><span id="more"></span><h1 id="短调用"><a href="#短调用" class="headerlink" title="短调用"></a>短调用</h1><p>指令格式：CALL 立即数&#x2F;寄存器&#x2F;内存。</p><p><img src="/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/1.PNG"></p><p>这就是普通的函数调用，并没有发生特权级别的变化（即CPL没有发生改变），上图所示的是同一个堆栈。</p><p>发生改变的寄存器为：ESP EIP。</p><h1 id="长调用（跨段不提权）"><a href="#长调用（跨段不提权）" class="headerlink" title="长调用（跨段不提权）"></a>长调用（跨段不提权）</h1><p>指令格式：CALL CS:EIP（EIP是废弃的）</p><p>在这里，CALL FAR后面跟了6个字节，其中高2字节是CS段选择子，低4字节随便写（因为是废弃的）。这里就来问题了，为什么是废弃的？既然是废弃的，那么执行这条指令后会跳到哪里去呢？其实跳到的地方是由CS段选择子指向的<strong>调用门</strong>决定的，具体怎么决定，下节课讲调用门的时候再说。</p><p><img src="/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/2.PNG"></p><p>发生改变的寄存器为：ESP EIP CS。</p><h1 id="长调用（跨段并提权）"><a href="#长调用（跨段并提权）" class="headerlink" title="长调用（跨段并提权）"></a>长调用（跨段并提权）</h1><p>指令格式：CALL CS:EIP（EIP是废弃的）</p><p>虽然指令的格式与上面不提权的情况相同，但是不同的是对应的段描述符的DPL。在不提权的情况下，对应的段描述符DPL&#x3D;3，而在提权的情况下，对应的段描述符（调用门）DPL&#x3D;0。</p><p>我们都知道，在一个程序中，代码的执行必须要用到堆栈，代码与堆栈是不分家的。因此CS和SS的权限必须一致，一个级别一套堆栈，当跳级的时候堆栈也换了一套对应级别的堆栈。</p><p>那么这就带来一个问题，长调用的时候既然切换了堆栈，那么当返回的时候怎么才能找到原来的堆栈呢？为了解决这个问题，程序在调用的时候不仅会将CS和返回地址压入堆栈中，还会将原来3环堆栈的SS和ESP也压入堆栈中（这里的堆栈是0环的堆栈）。如下图：</p><p><img src="/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/3.PNG"></p><p><img src="/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/4.PNG"></p><p>那么现在又会有一个问题：当通过CALL FAR使用调用门发生权限切换的时候，代码段和堆栈都会发生切换，切换后的代码执行位置由调用门所指定，可是0环的堆栈（SS和ESP）去哪里找呢？这两个寄存器在指令中没有体现，而是要去找TSS段。只要提权了，就去找TSS要SS和ESP。具体TSS是啥先不用管。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上节课我们讲解了代码段间跳转JMP FAR指令及其执行流程，该指令可以同时改变CS和EIP。此外，CALL指令也有类似的作用。该指令与JMP类指令的区别在于，CALL FAR指令不仅可以同时改变CS和EIP，同时还会影响堆栈。除此以外，JMP类指令无法从低权限的非一致代码段跳转到高权限的非一致代码段，来提升CPL当前特权级，而CALL FAR指令却可以，就是通过调用门。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：5、代码间的跳转-段间跳转</title>
    <link href="http://example.com/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/"/>
    <id>http://example.com/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/</id>
    <published>2023-02-21T11:04:59.000Z</published>
    <updated>2023-02-23T11:14:41.224Z</updated>
    
    <content type="html"><![CDATA[<p>上节课我们学习了访问数据段的时候，段权限是如何检查的，即：**CPL &lt;&#x3D; DPL 并且 RPL &lt;&#x3D; DPL (数值上的比较)**。后面我们来学习访问代码段时，段的权限是如何检查的。</p><span id="more"></span><h1 id="代码段间跳转的流程"><a href="#代码段间跳转的流程" class="headerlink" title="代码段间跳转的流程"></a>代码段间跳转的流程</h1><p>通过前面的学习，我们已经知道了段寄存器共有八个，分别是：ES、CS、SS、DS、FS、GS、LDTR和TR。当我们想要修改段寄存器的值时，有<strong>MOV</strong>指令的类似于<strong>LES</strong>的指令。</p><p>但是，对于CS代码段寄存器，却不能用上面这两种方式修改。因为CS的改变意味着EIP的改变，想要改变CS，就必须同时改变EIP（段间跳转），但是可以只改变EIP而不改变CS（段内跳转）。CS.Base + EIP &#x3D; 真正要执行的地址。因此，代码段间的跳转，本质上就是CS寄存器的修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同时修改CS和EIP的指令（段间跳转）：JMP FAR / CALL FAR / RETF / INT /IRETED</span><br><span class="line">只修改EIP的指令（段内跳转）：JMP / CALL / JCC / RET</span><br></pre></td></tr></table></figure><p>既然是跳转到另一个代码段，那么就可以根据目标代码段的种类分为两种情况：一致代码段和非一致代码段。具体怎么区分两种代码段，请参见前面的课程。</p><p>下面我们就来讲解代码段间的跳转（<strong>JMP FAR</strong>）的执行流程：</p><p>首先需要明确的是，JMP FAR指令后面需要跟6个字节，例如：JMP 0x20:0x004183D7，其中，高2字节为0x20，代表段选择子，而低4字节为0x004183D7，代表段内偏移。而JMP指令为段内长跳转，JMP后面跟4字节，为跳转的目标地址。</p><p>以指令<strong>JMP 0x20:0x004183D7</strong>为例，执行流程如下：</p><p><strong>1、拆分段选择子</strong></p><p>0x20为0010 0000，RPL &#x3D; 0，TI &#x3D; 0。查GDT表，index &#x3D; 4</p><p><strong>2、判断该段描述符的种类</strong></p><p>通过index找到GDT中对应的段描述符，只有如下四种段描述符可以跳转成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码段、调用门、TSS任务段、任务门（目前只分析代码段）</span><br></pre></td></tr></table></figure><p><strong>3、权限检查</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果是非一致代码段，要求:CPL == DPL 并且 RPL &lt;= DPL。（windows基本上使用的都是这个）</span><br><span class="line">如果是一致代码段，要求:CPL &gt;= DPL。</span><br></pre></td></tr></table></figure><p><strong>4、加载段描述符</strong></p><p>如果通过了上面的权限检查，CPU就会将段描述符加载进CS段寄存器中。</p><p><strong>5、代码执行</strong></p><p>CPU将CS.Base + Offset的值写入EIP中，然后执行CS：EIP处的代码，段间跳转结束。</p><h1 id="一致代码段和非一致代码段"><a href="#一致代码段和非一致代码段" class="headerlink" title="一致代码段和非一致代码段"></a>一致代码段和非一致代码段</h1><p>上面提到了对于跳转到这两种代码段，有着不同的权限检查，那么这两种代码段是什么意思呢？</p><p><strong>一致代码段：也就是共享的段</strong></p><p>一致代码段，通俗地来讲，就是系统用来共享、提供给低特权级的程序使用或调用的代码段。有如下特点：</p><ul><li>特权级别高的程序不允许访问特权级别低的程序的数据：核心态不允许访问用户态的数据。</li><li>特权级别低的程序可以访问到特权级别高的数据，但特权级别CPL不会改变：用户态还是用户态。</li></ul><p><strong>非一致代码段：也就是普通的段</strong></p><p>非一致代码段，就是为了避免被低特权级程序访问而被系统保护起来的代码段。有如下特点：</p><ul><li>只允许同级别的访问。</li><li>绝对禁止不同级别的访问：核心态不是用户态，用户态也不是核心态。</li></ul><p><strong>注意</strong>：直接对代码段进行JMP操作，无论目标是一致还是非一致代码段，CPL都不会发生改变。想要提升CPL的权限，即我就是要访问DPL为0的普通代码段，需要通过调用门等方式。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>下面来练习通过JMP FAR指令，成功跳转到一致代码段和非一致代码段。</p><p>首先在虚拟机Windows XP中查看GDT表，如下图，并打算在标注出来的位置构造一致代码段和非一致代码段。这个位置位于虚拟地址0x8003f048处，对应的Index为9。</p><p><img src="/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/2.PNG"></p><p>用OD随便打开一个程序，我们只需要更改入口的第一条指令为JMP FAR即可。假如我们准备跳转到下图中标注出来的地址0x0040AA33。</p><p><img src="/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/3.PNG"></p><p>现在构造非一致代码段及其选择子，DPL需要是3，RPL最少为3，这里我们可以取0。因此构造出来的非一致代码段描述符为00cffe00~0000ffff，其选择子为0x48，因此指令应改为：JMP 0x48:0x0040AA33。</p><p><img src="/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/4.PNG"></p><p><img src="/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/5.PNG"></p><p>可以看到，在执行指令后成功通过构造的非一致代码段跳转到目标地址。</p><p>一致代码段同理，感兴趣的可以自行尝试。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上节课我们学习了访问数据段的时候，段权限是如何检查的，即：**CPL &amp;lt;&amp;#x3D; DPL 并且 RPL &amp;lt;&amp;#x3D; DPL (数值上的比较)**。后面我们来学习访问代码段时，段的权限是如何检查的。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：4、段权限检查</title>
    <link href="http://example.com/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/"/>
    <id>http://example.com/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/</id>
    <published>2023-02-20T13:04:29.000Z</published>
    <updated>2023-02-21T11:41:29.127Z</updated>
    
    <content type="html"><![CDATA[<p>上节课讲了段描述符里面的一些位，先来复习一下：对于一个段描述符，先看它的P位是否有效，然后看它的S位和TYPE域来区分该段的类型。这节课继续来学习段描述符的其他位。</p><span id="more"></span><p>老规矩，还是先上段描述符的结构图，方面查看和记忆：</p><p><img src="/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/1.PNG"></p><h1 id="D-x2F-B位"><a href="#D-x2F-B位" class="headerlink" title="D&#x2F;B位"></a>D&#x2F;B位</h1><p>D&#x2F;B位比较复杂，加载到不同的段寄存器中的影响是不一样的。</p><p><strong>1、段描述符加载到数据段如：DS、ES</strong></p><p>其含义代表的是段上限的大小。（这也就是昨天提到的向上向下拓展时候影响段上限的位）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D = 1，段上限为4GB</span><br><span class="line">D = 0，段上限为64KB</span><br></pre></td></tr></table></figure><p><img src="/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/2.PNG"></p><p><strong>2、段描述符加载到代码段如CS</strong></p><p>影响的是默认的选址方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D = 1，默认采用32位寻址方式</span><br><span class="line">D = 0，默认采用16位寻址方式</span><br></pre></td></tr></table></figure><p>指令前缀67 改变寻址方式。</p><p><strong>3、段描述符加载到数据段如SS</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D = 1，隐式堆栈访问指令（如：PUSH POP CALL） 使用32位堆栈指针寄存器ESP</span><br><span class="line">D = 0，隐式堆栈访问指令（如：PUSH POP CALL） 使用16位堆栈指针寄存器SP</span><br></pre></td></tr></table></figure><p>跟上面加载到CS道理其实差不多。</p><h1 id="段权限检查"><a href="#段权限检查" class="headerlink" title="段权限检查"></a>段权限检查</h1><p>先来回顾一下几个概念：</p><p><strong>RPL</strong>：请求特权级，存在于16位的段选择子中。</p><p><strong>DPL</strong>：描述了访问该段至少需要什么级别，存在于段描述符中。</p><p>那么如何查看程序处于几环？也就是说，如何查看CPU当前处于哪个级别呢？这里有一个新的概念：</p><p><strong>CPL</strong>：当前特权级，存在于CS和SS中存储的段选择子最后2位。</p><p>这个CPL的意义是，当前CPU执行到某一位置时CPU的级别。如下图：</p><p><img src="/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/3.PNG"></p><p>当CPU执行到80527da8这个地址时，CS值为8（1000），CPL &#x3D; 0。</p><p>有些指令在CPL &#x3D; 3时不能使用，但是在CPL &#x3D; 0时可以使用。</p><p>那么，段权限检查需要满足什么条件才能算成功呢？</p><p>**CPL &lt;&#x3D; DPL 并且 RPL &lt;&#x3D; DPL (数值上的比较)**。注意两个条件必须要同时满足。</p><p><strong>特别说明</strong>：数据段的权限检查与代码段的权限检查不一样。上面的只适用于数据段的权限检查，代码段的权限是如何检查的，在以后的课程中会讲到。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上节课讲了段描述符里面的一些位，先来复习一下：对于一个段描述符，先看它的P位是否有效，然后看它的S位和TYPE域来区分该段的类型。这节课继续来学习段描述符的其他位。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：3、段描述符属性</title>
    <link href="http://example.com/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/</id>
    <published>2023-02-16T12:38:00.000Z</published>
    <updated>2023-02-20T13:02:34.070Z</updated>
    
    <content type="html"><![CDATA[<p>上一节课讲了段描述符和段选择子的结构，这节课来具体讲解段描述符里面的一些位具体代表什么，并且来解决上节课遗留的一个问题：64位的段描述符如何填入96位段寄存器中不可见的80位？</p><span id="more"></span><p>先来回顾一下段描述符的结构：</p><p><img src="/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/1.PNG"></p><p>下面是段寄存器的结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Segment&#123;</span><br><span class="line">WORD Selector;//段选择子（可见）16位</span><br><span class="line">WORD Attributes;//段属性  （不可见）16位</span><br><span class="line">WORD Base;//段起始地址  （不可见）32位</span><br><span class="line">WORD Limit;//段大小  （不可见）32位</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在填入段寄存器时，属性部分写入的是段描述符高4字节中8-23位，共16位；基址部分填入的是段描述符中的基址共32位。现在问题来了，段寄存器的limit部分需要32位，而在段描述符里面limit只有20位，该怎么填入呢？我们从段描述符的属性入手。</p><h1 id="P位"><a href="#P位" class="headerlink" title="P位"></a>P位</h1><p>P位位于段描述符高4字节的第15位，决定了该描述符是否有效。对于一个段描述符，首先就要看它的P位是否为有效位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P=0无效</span><br><span class="line">P=1有效</span><br></pre></td></tr></table></figure><p><img src="/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/2.PNG"></p><p>对于上图的GDT表来说，被标出来的部分大于等于8，就意味着P&#x3D;1，是有效的段描述符。</p><h1 id="G位"><a href="#G位" class="headerlink" title="G位"></a>G位</h1><p>G位决定了该段的粒度，前面提到的如何用段描述符20位的limit填入段寄存器32位的limit，就是通过G位来决定的。在段描述符中，20位的limit最大值为FFFFF。</p><p>G&#x3D;0时，limit单位是字节，也就是说该是多少就是多少。20位limit最大为FFFFF，前面补0即可，limit最大为000FFFFF。</p><p>G &#x3D; 1时，limit单位是kb，也就是说，limit每加1，实际上加了1kb也就是FFF。因此limit范围是00000FFF ~ FFFFFFFF。（在后面补FFF）</p><h1 id="S位"><a href="#S位" class="headerlink" title="S位"></a>S位</h1><p>在GDT表中，段描述符分为两类，一类是数据或代码段描述符，另一类是系统段描述符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S = 0时，该段描述符是系统段描述符</span><br><span class="line">S = 1时，该段描述符是代码段或数据段描述符</span><br></pre></td></tr></table></figure><p><img src="/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/4.PNG"></p><p>在上图中，被标出来的部分的最后一个二进制位就是S位。</p><h1 id="TYPE域"><a href="#TYPE域" class="headerlink" title="TYPE域"></a>TYPE域</h1><p>对于S位取不同的值，TYPE域各位有不同的涵义</p><p><strong>1、S &#x3D; 1时，有两种情况，分别是数据段和代码段描述符</strong></p><p>也就是说，在段描述符高4字节的8个16进制数中，第5个数是1001（9）或者1111（F）时，为数据段或者代码段描述符。如下图所示：</p><p><img src="/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/5.PNG"></p><p>上图可以看出来又分了两种情况：</p><p>1.1 当第11位 &#x3D; 0时，是数据段。也就是第6个16进制数 &lt; 8。A位代表是否已经被访问过（有没有被加载过）。W位代表是否可写。E位代表拓展方向。E &#x3D; 0时向上拓展，E &#x3D; 1时向下拓展。</p><p>1.2 当第11位 &#x3D; 1时，是代码段。也就是第6个16进制数 &gt; 8。A位代表是否已经被访问过（有没有被加载过）。R位代表是否可读。C位是一致位。C &#x3D; 1时代表一致代码段，C &#x3D; 0时代表非一致代码段。具体C位什么意思，后续介绍。</p><p>对于E位的拓展方向，解释如下图：</p><p><img src="/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/6.PNG"></p><p>左边为E &#x3D; 0向上拓展（正常），右边为E &#x3D; 1向下拓展（不正常）。红色代表有效地址，也就是说可以访问的地址。因此与其说是向上或下拓展，不如说是取反。</p><p>对于右边的红色部分具体有多大，还要看另外一个没有讲过的属性来决定，有两种可能分别是64kb和4GB，以后再说。（向下拓展基本没见过）</p><p><strong>2、S &#x3D; 0时，为系统描述符</strong></p><p>系统描述符又分为以下类型：</p><p><img src="/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/7.PNG"></p><p>这里面描述的具体分类是什么意思，目前还用不到，后续会讲解。目前只要知道TYPE域各位的含意即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一节课讲了段描述符和段选择子的结构，这节课来具体讲解段描述符里面的一些位具体代表什么，并且来解决上节课遗留的一个问题：64位的段描述符如何填入96位段寄存器中不可见的80位？&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：2、段描述符与段选择子</title>
    <link href="http://example.com/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/"/>
    <id>http://example.com/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/</id>
    <published>2023-02-11T12:17:32.000Z</published>
    <updated>2023-02-16T12:35:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一节课中，我们学习了段寄存器的结构，知道了段寄存器除了可见部分的16位段选择子，还有不可见的16位属性、32位基址和32位段限长。上一节课还遗留了一个问题：指令<strong>mov ds,ax</strong>是如何用16位的ax填写96位的段寄存器？这节课我们就来学习相关的知识</p><span id="more"></span><p>对于CPU来说，有两张很重要的表，分别是GDT表和IDT表（LDT表Windows没有使用），段描述符就存在段描述符表中。当我们执行类似<strong>mov ds,ax</strong>的指令时，CPU会去查表，16位的ax叫做段选择子，CPU会根据ax的值来决定查找GDT（全局描述符表）还是LDT（局部描述符表），查找表的什么位置。</p><h1 id="段描述符"><a href="#段描述符" class="headerlink" title="段描述符"></a>段描述符</h1><p>段描述符结构如下：</p><p><img src="/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/1.PNG"></p><p>在这张图中，上面代表高4字节，下面代表低4字节，一共8字节64位。在这个结构中，具体哪些位代表什么意思，慢慢我们都会讲到，这里先不纠结。现在只需要做一件事：给定一个段描述符，能够按照上面的结构拆分出来。</p><p>那么GDT表位于什么地方呢？这张表又有多大呢？它们分别位于寄存器gdtr和gdtl中，在windbg中可以通过<strong>r gdtr</strong>和<strong>r gdtl</strong>来查看它们的值：（这里涉及到双机调试，网络上有很多资料，请自行参考）</p><p><img src="/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/2.PNG"></p><p>在这里我们看到了GDT表位于虚拟地址0x8003f000，大小为0x3ff，可以通过dq指令查看该位置的内容：</p><p><img src="/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/4.PNG"></p><p>dq为一次显示8字节（q代表QWORD），在第二项00cf9b00~0000ffff中，前面为高4字节，后面为低4字节，按照格式拆分如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">拆分为64位二进制为：</span><br><span class="line">  0    0    c    f    9    b    0    0    0    0    0    0    f    f    f    f</span><br><span class="line">0000 0000 1100 1111 1001 1011 0000 0000 0000 0000 0000 0000 1111 1111 1111 1111</span><br><span class="line">Base31~24：0000 0000</span><br><span class="line">G：1</span><br><span class="line">D/B：1</span><br><span class="line">L：0</span><br><span class="line">AVL：0</span><br><span class="line">Limit19~16：1111</span><br><span class="line">P：1</span><br><span class="line">DPL：00</span><br><span class="line">S：1</span><br><span class="line">TYPE：1011</span><br><span class="line">Base23~16：0000 0000</span><br><span class="line">Base15~00：0000 0000 0000 0000</span><br><span class="line">Limit15~00：1111 1111 1111 1111</span><br></pre></td></tr></table></figure><p>不熟悉的请读者自行挑选段描述符练习拆分。</p><h1 id="段选择子"><a href="#段选择子" class="headerlink" title="段选择子"></a>段选择子</h1><p>段选择子结构如下：</p><p><img src="/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/5.PNG"></p><p>在上图结构中，第0-1位RPL代表请求特权级别，具体什么意思稍后讲，第2位TI代表要查询的表（在Windows下一般都是0，查询GDT表），第3-15位代表索引，表示要查询表的第几项。因此想要查看内存中对应的项的内容，地址应该是GDT表的基址+索引*8。</p><p>在上一节课我们提到了，指令<strong>mov ds,ax</strong>是如何用16位的ax填写96位的ds的呢？刨去段寄存器中可见的16位段选择子，还剩80位，因此CPU会用GDT中对应的段描述符来写入这80位。那么问题来了，这64位是如何填满80位的呢？后面再讲。</p><p>例如，对于段选择子0x23来讲，RPL&#x3D;3，index&#x3D;4，查找的是GDT表序号为4的项（序号从0开始）。</p><p>现在来看RPL，代表的意思是当前的特权级别，有四种情况分别是0 1 2 3。同时注意到在段描述符结构中有一个DPL，代表目标特权级别，意思可以理解成：你既然要访问我这个段，你最少是什么级别。因此，在CPU通过选择子查找到目标段描述符后，会将选择子的RPL与目标段描述符的DPL进行对比，当RPL的级别大于等于DPL时（数值上RPL小于等于DPL），才能够成功访问。例如RPL&#x3D;0，DPL&#x3D;3时就可以成功访问，反过来就不行。</p><p>总结一下，想要修改段寄存器的值，可以使用MOV指令，方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0x20</span><br><span class="line">mov ds,ax</span><br></pre></td></tr></table></figure><p>此外，还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器。对于CS寄存器来讲，没有对应的LCS指令，因为CS为代码段，CS的修改就意味着EIP的更改。因此必须同时改变CS和EIP才行，具体指令后面讲。以LES指令为例，使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">       char buffer[6] = &#123;0&#125;;</span><br><span class="line">       __asm &#123;</span><br><span class="line">              // 高 2 字节加载到 ES 寄存器，低 4 字节复制到 ecx 寄存器。fword 表示 6 字节。</span><br><span class="line">              // LDS/LSS/LFS/LGS 用法是类似的。没有LCS指令，要修改CS，需要使用其它指令，这里就不给出。</span><br><span class="line">              // 这行指令是有坑的，不一定可以执行成功，取决于buffer中的值。</span><br><span class="line">              les ecx, fword ptr ds:[buffer]</span><br><span class="line">       &#125;</span><br><span class="line">       return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在上一节课中，我们学习了段寄存器的结构，知道了段寄存器除了可见部分的16位段选择子，还有不可见的16位属性、32位基址和32位段限长。上一节课还遗留了一个问题：指令&lt;strong&gt;mov ds,ax&lt;/strong&gt;是如何用16位的ax填写96位的段寄存器？这节课我们就来学习相关的知识&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：1、段寄存器属性探测</title>
    <link href="http://example.com/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/"/>
    <id>http://example.com/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/</id>
    <published>2023-02-08T11:24:19.000Z</published>
    <updated>2023-02-13T10:19:30.169Z</updated>
    
    <content type="html"><![CDATA[<p>开一个新坑，最近正在学习海哥Windows内核方面相关的知识，也已经学习了很多，因此想及时在这里总结复习一下，并持续跟进未来的学习。对于Windows内核来讲，我准备分成保护模式与操作系统两个大模块来学习与总结。保护模式是操作系统的根本，而段页的知识又是保护模式的根本，因此学习好段页很重要（当然前面3环还剩下一些项目，未来也会慢慢总结跟进的）。</p><span id="more"></span><p>在实模式下，给出一个地址就是物理地址，这个物理地址的内容可以被随意更改。而保护模式之所以叫保护模式，就是为了保护内存不被随意访问与更改。那么，又是什么限制了对一个内存地址的访问呢？比如下面这句汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOV DWORD PTR DS:[0xF1234567], EBX</span><br></pre></td></tr></table></figure><p>将EBX寄存器的内容送入一个地址（真正的地址是DS.base + 0xF1234567），要满足什么条件才能执行成功呢？一个是DS中的Attribute，也就是段的属性；另一个是0xF1234567所在内存页的属性。我们先来学习段相关的知识。</p><h1 id="段寄存器结构"><a href="#段寄存器结构" class="headerlink" title="段寄存器结构"></a>段寄存器结构</h1><p>上面的DS就是一个CPU中的段寄存器，在CPU中，一共有8个段寄存器，它们分别是：ES CS SS DS FS GS LDTR和TR。段寄存器的结构如下图所示。</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8.PNG"></p><p>下面是在OD中，各个段寄存器的显示效果：</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/2.PNG"></p><p>可以看到，这些段寄存器显示出来的值只有2个字节也就是16位，后面的32位表示这是一个大段（关于什么是大段小段，后面会讲），紧跟着后面的0是这个段的base，也就是基址，后面括号里的F表示这个段的limit，也就是段限长，描述了段的范围。当我们执行指令<strong>MOV AX,ES</strong>之后，也能看到结果是将16位的值送入了AX中。</p><p>于是我们可以根据段寄存器的结构图来看，除了可见部分的16位是段寄存器的段选择子，还分别有不可见的16位属性、32位基址和32位段限长，一共96位。</p><p>对于段寄存器的读操作（ES CS SS DS FS GS），比如<strong>MOV AX,ES</strong> 指令，读取的是16位的可见部分；而对于它们的写操作，比如<strong>MOV DS,AX</strong> 指令，写入的是96位。（16位的AX是如何写入96位DS中的呢？后面会讲）</p><p>此外，读LDTR的指令为<strong>SLDT&#x2F;LLDT</strong>，读TR的指令为<strong>STR&#x2F;LTR</strong>。</p><p>下面来看一下各个段寄存器成员：</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/3.PNG"></p><p>GS段寄存器Windows没有使用，一直为0。FS寄存器很重要，学到进程线程再讲。ES SS和DS存储的都是数据段，属性为可读可写，CS为代码段，属性为可读可执行。</p><h1 id="段寄存器属性探测"><a href="#段寄存器属性探测" class="headerlink" title="段寄存器属性探测"></a>段寄存器属性探测</h1><p>上面介绍了段寄存器一共有96位，那么如何证明呢？</p><h2 id="探测Attribute"><a href="#探测Attribute" class="headerlink" title="探测Attribute"></a>探测Attribute</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int var = 0;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax,ss//cs不行 cs是可读 可执行 但不可写</span><br><span class="line">mov ds,ax</span><br><span class="line">mov dword ptr ds:[var],eax</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，首先读SS，然后写入DS，此时DS寄存器就等同于SS寄存器的内容，然后将EAX的内容送入该段的一个地址中去（其实就是SS.base），程序运行结果如下，可以正常执行。</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/4.PNG"></p><p>而当我们把SS改变成CS后继续执行程序，当向内存写入的时候，触发了内存访问错误：</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/5.PNG"></p><p>是什么限制了对这块内存的写入呢？就是CS中的属性部分，该段寄存器不具有可写属性。</p><h2 id="探测Base"><a href="#探测Base" class="headerlink" title="探测Base"></a>探测Base</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int a = 0;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax,fs</span><br><span class="line">mov es,ax</span><br><span class="line">mov eax,es:[0]</span><br><span class="line">mov a,eax</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;, a);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，es&#x3D;fs，按照常理来说，0地址是无法访问的，由于es的段base为0，因此只访问es:[0]会触发内存访问错误，运行结果如下图：</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/6.PNG"></p><p>而将es赋值成fs之后，由于上面讲过，fs的基址不是0，因此可以访问并成功给a赋值：</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/7.PNG"></p><h2 id="探测Limit"><a href="#探测Limit" class="headerlink" title="探测Limit"></a>探测Limit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax,fs</span><br><span class="line">mov es,ax</span><br><span class="line">mov eax,es:[0x1000]</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给es赋值后es&#x3D;fs，但由于fs的limit为0xFFF，对超过limit的内存地址访问，会出现内存访问错误：</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/8.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;开一个新坑，最近正在学习海哥Windows内核方面相关的知识，也已经学习了很多，因此想及时在这里总结复习一下，并持续跟进未来的学习。对于Windows内核来讲，我准备分成保护模式与操作系统两个大模块来学习与总结。保护模式是操作系统的根本，而段页的知识又是保护模式的根本，因此学习好段页很重要（当然前面3环还剩下一些项目，未来也会慢慢总结跟进的）。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Win32：加密壳的编写</title>
    <link href="http://example.com/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/"/>
    <id>http://example.com/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/</id>
    <published>2022-10-19T10:49:28.000Z</published>
    <updated>2023-02-07T12:36:49.038Z</updated>
    
    <content type="html"><![CDATA[<p>这节课来完成对壳程序的编写。壳可以分成两类：加密壳和压缩壳，加密壳又可以分成两类：分别是二进制壳和源代码加密壳。对于二进制壳来所，它并不改变代码的指令，而是对整个PE文件结构做一个扭曲变形，并且对关键代码进行加密。但是对于所有这种二进制壳，不管怎么变形，当这个程序执行时，在内存中拉伸后一定是要恢复原状的。想要脱这种二进制壳，需要跟着它的汇编指令执行到在内存中展开后，将内存dump出来，再修改OEP到正常程序的入口点，即可完成脱壳。本节课我们就来完成对这种二进制壳的编写。</p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><u>特别说明，在本篇文章中，壳程序称为<strong>shell</strong>，准备加密的程序称为<strong>src</strong>。</u></p><p>对于这种二进制壳，有以下两种编写方法：</p><p><strong>一、将PE文件中的各种表移动出来，再加密（本节课不做这个）</strong></p><ol><li>新增一个节，移动各种表</li><li>对原来PE文件加密</li><li>这时候程序还不能跑起来，因为OEP还在被加密的文件中，系统不认识，需要在最后追加一段代码</li><li>这个代码作用为解密，解完密后跳转到原来的OEP</li></ol><p>但这时候有一个问题：在解密代码中有可能会用到别的DLL的函数，这个DLL又可能还没有被导入进来，或者原来的PE文件压根没有这个DLL文件要导入，因此需要自己在解密代码中导入需要用到的DLL。</p><p>还有一个问题，解密代码中会有可能有全局变量，地址都是写死的，若解密代码没有加到预定的位置，就不能用了。这种情况需要使用win32汇编来编写解密代码。</p><p><strong>二、不移动各种表，直接加密整个文件</strong></p><ol><li>将SRC文件读入内存，加密</li><li>将加密后的文件追加到Shell文件新增的节中</li></ol><p>此时加壳结束。这时生成的程序中，被加密的SRC程序就是一堆被加密的数据，静态分析是看不出来的，但是动态分析一步一步跟是可以分析的。</p><p>现在有一个问题，这个程序的主体是壳子程序，双击之后跑起来的是壳子，不是被加密的SRC程序。因此要在壳子程序中写解壳程序。因此完成这个加壳的过程，需要加壳程序与解壳程序两步。</p><h1 id="加壳程序的编写"><a href="#加壳程序的编写" class="headerlink" title="加壳程序的编写"></a>加壳程序的编写</h1><p>步骤如下：</p><ol><li>获取Shell程序的路径</li><li>获取src程序的路径</li><li>将src程序读取到内存中，加密</li><li>在Shell程序中新增一个节，并将加密后的src程序追加到Shell程序的新增节中</li><li>加壳完毕</li></ol><p>图解如下：</p><p><img src="/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/1.PNG"></p><p>此时生成的文件还是原来的那个壳子程序，仅仅是在一个新增的节中写入了一堆数据，根本看不到我们加密的程序，只用静态分析的话是无法分析出我们加密的程序的，同时如果被加密的程序是病毒的话，杀毒软件也无法杀死我们的程序（文件免杀）。</p><p>加密程序代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码实现软件加壳，其中拉伸、增加节、还原的函数代码在前面几节课中已经给出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Add_Protect</span><span class="params">(<span class="type">char</span>* shell_Filename, <span class="type">char</span>* src_Filename)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1、获得shell壳子程序路径，已经在参数中给出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、在shell程序中新增一个节</span></span><br><span class="line">    <span class="type">char</span>* shell_ImageBuffer = File_To_Image(shell_Filename);           <span class="comment">//拉伸</span></span><br><span class="line"><span class="type">char</span>* shell_ImageBuffer2 = AddSection(shell_ImageBuffer, <span class="number">0x100000</span>);</span><br><span class="line"><span class="type">char</span>* shell_NewBuffer = image_to_file(shell_ImageBuffer2);</span><br><span class="line"></span><br><span class="line">dos_header* pdh = (dos_header*)shell_NewBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、获取src程序路径，已经在参数中给出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、将src程序读取到内存中，加密</span></span><br><span class="line"><span class="type">char</span>* src_Buffer = ReadMem_Exe(src_Filename);</span><br><span class="line">FILE* src_fp = fopen(src_Filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="type">int</span> src_size = getlength(src_fp);</span><br><span class="line"><span class="comment">//这里应该是加密函数，对src文件进行加密，这里为了简便起见，只做取反运算</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; src_size; i++)</span><br><span class="line">&#123;</span><br><span class="line">*(src_Buffer + i) = ~(*(src_Buffer + i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、将加密后的src程序追加到shell程序中新增的节中</span></span><br><span class="line"><span class="comment">//定位到shell程序最后一个节</span></span><br><span class="line"><span class="type">char</span>* src_Section = (<span class="type">char</span>*)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData + (<span class="type">int</span>)shell_NewBuffer);</span><br><span class="line"><span class="built_in">memcpy</span>(src_Section, src_Buffer, src_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6、存盘</span></span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">size = (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData) + (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;SizeOfRawData);</span><br><span class="line">FILE* pfp = fopen(<span class="string">&quot;C:\\Documents and Settings\\easy\\桌面\\Shell_test.exe&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">fwrite(shell_NewBuffer, size, <span class="number">1</span>, pfp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将文件读入内存中，并返回该块内存首地址</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">ReadMem_Exe</span><span class="params">(<span class="type">char</span>* Filename)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">fp = fopen(Filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无法打开 EXE 文件!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">size = getlength(fp);</span><br><span class="line"><span class="type">char</span>* FileBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line">fread(FileBuffer, size, <span class="number">1</span>, fp);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="keyword">return</span> FileBuffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件大小</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getlength</span><span class="params">(FILE* fp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);</span><br><span class="line">size = ftell(fp);</span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，想要这个文件运行起来后执行我们的加密程序，还需要下面的解密过程。</p><h1 id="解密过程的编写"><a href="#解密过程的编写" class="headerlink" title="解密过程的编写"></a>解密过程的编写</h1><p>解密过程的代码实际上就是壳子程序的代码</p><ol><li><p>获取shell程序的路径</p></li><li><p>获取src的数据</p><p>(1). 定位到shell文件最后一个节</p><p>(2). 将数据取出，并解密</p></li><li><p>拉伸PE：将解密后的PE文件在内存中拉伸，并存储到缓冲区中</p></li><li><p>以挂起方式运行shell程序</p><p>(1). 以挂起方式创建shell进程，并得到主线程的context</p><p>(2). 卸载外壳程序的文件镜像(<strong>ZwUnmapViewOfSection</strong>函数)。卸载内存镜像后，得到一个干净的4GB空间，可以直接从内存启动一个进程，而不像CreateProcess一样涉及从磁盘上读取</p><p>(3). 在指定的位置(src的ImageBase)申请指定大小(src的SizeOfImage)的内存(<strong>VirtualAllocEx</strong>函数)</p><p>(4). 如果创建失败，查看src是否包含重定位表，如果包含重定位表，就在任意位置申请src的SizeOfImage大小的内存，然后修复重定位表</p><p>(5). 如果在指定位置申请内存失败，并且没有重定位表的数据，直接返回失败</p><p>(6). 如果内存申请成功，将新的数据复制到内存中</p><p>(7). 修正运行环境的基址和入口地址</p><p>(8). 恢复主线程执行</p></li></ol><p>示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个简单的壳程序</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/subsystem:\&quot;windows\&quot;  /entry:\&quot;mainCRTStartup\&quot;&quot;</span>   ) </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一、获取SHELL程序的路径</span></span><br><span class="line"><span class="type">char</span>* shell_path;</span><br><span class="line">shell_path = _getcwd(<span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//将上面获得的路径中的&#x27;\&#x27;变成&#x27;/&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(shell_path); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(shell_path[j] == <span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">shell_path[j] = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcat</span>(shell_path, <span class="string">&quot;/Shell_test.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//二、获得SRC数据</span></span><br><span class="line"><span class="comment">//将shell程序读入内存</span></span><br><span class="line"><span class="type">char</span>* shell_FileBuffer = ReadMem_Exe(shell_path); </span><br><span class="line"><span class="keyword">if</span>(!shell_FileBuffer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;读取文件失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定位各个文件头部分</span></span><br><span class="line">dos_header* pdh = (dos_header*)shell_FileBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"><span class="comment">//定位最后一个节</span></span><br><span class="line"><span class="type">char</span>* Last_Section = (<span class="type">char</span>*)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData + (<span class="type">int</span>)shell_FileBuffer);</span><br><span class="line"><span class="comment">//将最后一个节的数据取出来并解密，放进缓冲区中</span></span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">*(Last_Section + i) = ~(*(Last_Section + i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定位各个文件头部分</span></span><br><span class="line">dos_header* src_pdh = (dos_header*)Last_Section;</span><br><span class="line">pe_header* src_pph = (pe_header*)(src_pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)src_pdh);</span><br><span class="line">optional_pe_header* src_poph = (optional_pe_header*)((<span class="type">int</span>)(src_pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)src_pdh);</span><br><span class="line"><span class="type">int</span> src_size = src_poph-&gt;SizeOfImage; <span class="comment">//获取src的SizeOfImage</span></span><br><span class="line"><span class="type">char</span>* src_ImageBase = (<span class="type">char</span>*)src_poph-&gt;ImageBase;        <span class="comment">//获取src的ImageBase</span></span><br><span class="line"><span class="type">char</span>* src_FileBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(src_size);</span><br><span class="line"><span class="built_in">memcpy</span>(src_FileBuffer, Last_Section, src_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三、拉伸PE</span></span><br><span class="line"><span class="type">char</span>* src_ImageBuffer = File_To_Image(src_FileBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//四、以挂起方式运行Shell进程，注意是壳子本身这个进程!</span></span><br><span class="line"><span class="comment">//0、以挂起方式创建Shell进程</span></span><br><span class="line">STARTUPINFO ie_si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">PROCESS_INFORMATION ie_pi;</span><br><span class="line">ie_si.cb = <span class="keyword">sizeof</span>(ie_si);</span><br><span class="line"></span><br><span class="line">CreateProcess(</span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">shell_path, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>,  </span><br><span class="line">FALSE,                   </span><br><span class="line">CREATE_SUSPENDED,     </span><br><span class="line"><span class="literal">NULL</span>,                    </span><br><span class="line"><span class="literal">NULL</span>,                    </span><br><span class="line">&amp;ie_si,                  </span><br><span class="line">&amp;ie_pi                  </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、获得外壳程序的Context，留着后面备用</span></span><br><span class="line">CONTEXT context;</span><br><span class="line">context.ContextFlags = CONTEXT_FULL;</span><br><span class="line">::GetThreadContext(ie_pi.hThread,&amp;context);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、卸载外壳程序的文件镜像(ZwUnmapViewOfSection)</span></span><br><span class="line"><span class="comment">// 获取 ZwUnmapViewOfSection 函数指针</span></span><br><span class="line">HMODULE hModuleNt = LoadLibrary(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hModuleNt == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取ntdll句柄失败\n&quot;</span>);</span><br><span class="line">TerminateThread(ie_pi.hThread, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">DWORD</span><span class="params">(WINAPI *_TZwUnmapViewOfSection)</span><span class="params">(HANDLE, PVOID)</span>;</span><br><span class="line">_TZwUnmapViewOfSection pZwUnmapViewOfSection = (_TZwUnmapViewOfSection)GetProcAddress(hModuleNt, <span class="string">&quot;ZwUnmapViewOfSection&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pZwUnmapViewOfSection == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取 ZwUnmapViewOfSection 函数指针失败\n&quot;</span>);</span><br><span class="line">TerminateThread(ie_pi.hThread, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pZwUnmapViewOfSection(ie_pi.hProcess, GetModuleHandle(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、在指定的位置(src的ImageBase)申请指定大小(src的SizeOfImage)的内存(VirtualAllocEx)</span></span><br><span class="line">LPVOID pImageBase = VirtualAllocEx(ie_pi.hProcess, (LPVOID)src_ImageBase, src_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pImageBase != src_ImageBase)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VirtualAllocEx 错误码: 0x%X\n&quot;</span>, GetLastError()); <span class="comment">// 0x1e7 试图访问无效地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;申请到的指针: 0x%X, 期望的地址: 0x%X\n&quot;</span>, (DWORD)pImageBase, src_ImageBase);</span><br><span class="line">TerminateThread(ie_pi.hThread, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、如果成功，将Src的PE文件拉伸 复制到该空间中</span></span><br><span class="line"><span class="comment">//memcpy(src_ImageBase, src_ImageBuffer, src_size);</span></span><br><span class="line"><span class="type">int</span> flag = WriteProcessMemory(ie_pi.hProcess, (LPVOID)src_ImageBase, src_ImageBuffer, src_size, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;写入源程序内存镜像失败\n&quot;</span>);</span><br><span class="line">TerminateThread(ie_pi.hThread, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、修改外壳程序的Context</span></span><br><span class="line"><span class="comment">//将Context的OPE 改成 Src的OEP</span></span><br><span class="line">context.Eax = (<span class="type">unsigned</span> <span class="type">long</span>)(src_poph-&gt;AddressOfEntryPoint + src_ImageBase);</span><br><span class="line"><span class="comment">//将Context的ImageBase 改成 Src的ImageBase</span></span><br><span class="line">WriteProcessMemory(ie_pi.hProcess, (LPVOID)(context.Ebx + <span class="number">8</span>), &amp;src_ImageBase, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6、设置Context 并恢复主线程</span></span><br><span class="line">context.ContextFlags = CONTEXT_FULL;</span><br><span class="line">SetThreadContext(ie_pi.hThread, &amp;context);</span><br><span class="line">ResumeThread(ie_pi.hThread);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/2.PNG"></p><p>下面的ShellCode.exe即为我们的壳子程序，MY_PE by win32.exe为我们要保护的程序，加壳后生成的程序为Shell_test.exe，双击这个生成的程序，发现正常运行我们被保护的程序：</p><p><img src="/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/3.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这节课来完成对壳程序的编写。壳可以分成两类：加密壳和压缩壳，加密壳又可以分成两类：分别是二进制壳和源代码加密壳。对于二进制壳来所，它并不改变代码的指令，而是对整个PE文件结构做一个扭曲变形，并且对关键代码进行加密。但是对于所有这种二进制壳，不管怎么变形，当这个程序执行时，在内存中拉伸后一定是要恢复原状的。想要脱这种二进制壳，需要跟着它的汇编指令执行到在内存中展开后，将内存dump出来，再修改OEP到正常程序的入口点，即可完成脱壳。本节课我们就来完成对这种二进制壳的编写。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Win32：挂起方式创建进程</title>
    <link href="http://example.com/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/"/>
    <id>http://example.com/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/</id>
    <published>2022-10-07T08:00:13.000Z</published>
    <updated>2022-10-13T06:31:07.437Z</updated>
    
    <content type="html"><![CDATA[<p>上节课讲解了CreateProcess函数，并介绍了其中的几个参数。这节课来介绍另外几个参数，并且会讲解如何以挂起方式创建进程，为我们下一节课写一个简单的加密壳打下基础。</p><span id="more"></span><h1 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h1><p>再来回顾一下CreateProcess函数的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">CreateProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">  LPCTSTR lpApplicationName,                 <span class="comment">// name of executable module</span></span></span><br><span class="line"><span class="params">  LPTSTR lpCommandLine,                      <span class="comment">// command line string</span></span></span><br><span class="line"><span class="params">  LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// SD</span></span></span><br><span class="line"><span class="params">  LPSECURITY_ATTRIBUTES lpThreadAttributes,  <span class="comment">// SD</span></span></span><br><span class="line"><span class="params">  BOOL bInheritHandles,                      <span class="comment">// handle inheritance option</span></span></span><br><span class="line"><span class="params">  DWORD dwCreationFlags,                     <span class="comment">// creation flags</span></span></span><br><span class="line"><span class="params">  LPVOID lpEnvironment,                      <span class="comment">// new environment block</span></span></span><br><span class="line"><span class="params">  LPCTSTR lpCurrentDirectory,                <span class="comment">// current directory name</span></span></span><br><span class="line"><span class="params">  LPSTARTUPINFO lpStartupInfo,               <span class="comment">// startup information</span></span></span><br><span class="line"><span class="params">  LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// process information</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>先来看lpProcessAttributes和lpThreadAttributes这两个参数。</p><p>与CreateEvent函数类似：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HANDLE  <span class="title function_">CreateEvent</span><span class="params">(</span></span><br><span class="line"><span class="params">　　LPSECURITY_ATTRIBUTES  lpEventAttributes,<span class="comment">// 安全属性 </span></span></span><br><span class="line"><span class="params">　　BOOL  bManualReset,<span class="comment">// 复位方式</span></span></span><br><span class="line"><span class="params">　　BOOL  bInitialState,<span class="comment">// 初始状态</span></span></span><br><span class="line"><span class="params">　　LPCTSTR  lpName <span class="comment">// 对象名称 </span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>都是创建内核对象的函数，CreateEvent函数的的lpEventAttributes参数代表着这个内核对象能否被子进程继承。同理，CreateProcess函数中的lpProcessAttributes和lpThreadAttributes参数，代表着进程内核对象与线程内核对象能否被继承。</p><p>我们知道，在父进程被创建时，在它的高2G会生成一张空的句柄表，当父进程执行CreateProcess函数创建子进程时，会在这张句柄表里写入两项内容，一个是子进程的句柄，一个是子进程主线程的句柄。当这两个参数被赋值后，子进程就可以继承这两个句柄。下面看一个程序例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进程A代码</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> szBuffer[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> szHandle[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">SECURITY_ATTRIBUTES ie_sa_p;</span><br><span class="line">ie_sa_p.nLength = <span class="keyword">sizeof</span>(ie_sa_p);</span><br><span class="line">ie_sa_p.lpSecurityDescriptor = <span class="literal">NULL</span>;</span><br><span class="line">ie_sa_p.bInheritHandle = TRUE; </span><br><span class="line"></span><br><span class="line">SECURITY_ATTRIBUTES <span class="type">ie_sa_t</span>;</span><br><span class="line"><span class="type">ie_sa_t</span>.nLength = <span class="keyword">sizeof</span>(<span class="type">ie_sa_t</span>);</span><br><span class="line"><span class="type">ie_sa_t</span>.lpSecurityDescriptor = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">ie_sa_t</span>.bInheritHandle = TRUE; </span><br><span class="line"><span class="comment">//创建一个可以被继承的内核对象,此处是个进程</span></span><br><span class="line">STARTUPINFO ie_si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">PROCESS_INFORMATION ie_pi;</span><br><span class="line">ie_si.cb = <span class="keyword">sizeof</span>(ie_si);</span><br><span class="line"></span><br><span class="line">TCHAR szCmdline[] =TEXT(<span class="string">&quot;c://program files//internet explorer//iexplore.exe&quot;</span>);</span><br><span class="line">CreateProcess(</span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">szCmdline, </span><br><span class="line">&amp;ie_sa_p, </span><br><span class="line">&amp;<span class="type">ie_sa_t</span>, </span><br><span class="line">TRUE, </span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, &amp;ie_si, &amp;ie_pi); </span><br><span class="line"></span><br><span class="line"><span class="comment">//组织命令行参数</span></span><br><span class="line"><span class="built_in">sprintf</span>(szHandle,<span class="string">&quot;%x %x&quot;</span>,ie_pi.hProcess,ie_pi.hThread);</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer,<span class="string">&quot;C:/guaqitest_B.exe %s&quot;</span>,szHandle);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义创建进程需要用的结构体</span></span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">PROCESS_INFORMATION pi;</span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建子进程</span></span><br><span class="line">BOOL res = CreateProcess(</span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">szBuffer, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">TRUE, </span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, &amp;si, &amp;pi); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程B代码</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">DWORD dwProcessHandle = <span class="number">-1</span>;</span><br><span class="line">DWORD dwThreadHandle = <span class="number">-1</span>;</span><br><span class="line"><span class="type">char</span> szBuffer[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(szBuffer,argv[<span class="number">1</span>],<span class="number">8</span>);</span><br><span class="line"><span class="built_in">sscanf</span>(szBuffer,<span class="string">&quot;%x&quot;</span>,&amp;dwProcessHandle);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(szBuffer,<span class="number">0</span>,<span class="number">256</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(szBuffer,argv[<span class="number">2</span>],<span class="number">8</span>);</span><br><span class="line"><span class="built_in">sscanf</span>(szBuffer,<span class="string">&quot;%x&quot;</span>,&amp;dwThreadHandle);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取IE进程、主线程句柄\n&quot;</span>);</span><br><span class="line">Sleep(<span class="number">2000</span>);</span><br><span class="line"><span class="comment">//挂起主线程</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;挂起主线程\n&quot;</span>);</span><br><span class="line">::SuspendThread((HANDLE)dwThreadHandle);</span><br><span class="line"></span><br><span class="line">Sleep(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复主线程</span></span><br><span class="line">::ResumeThread((HANDLE)dwThreadHandle);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;恢复主线程\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">Sleep(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭ID进程</span></span><br><span class="line">::TerminateProcess((HANDLE)dwProcessHandle,<span class="number">1</span>);</span><br><span class="line">::WaitForSingleObject((HANDLE)dwProcessHandle, INFINITE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ID进程已经关闭.....\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下上面代码，在进程A中，首先创建了一个浏览器子进程，并设置了浏览器进程与其主进程的句柄可以被继承，这时候在A进程的句柄表中就会生成浏览器进程与其主线程的句柄。然后A进程又创建了一个子进程B，B子进程继承了A的句柄表，这时候在B的句柄表中也存在浏览器进程与其主线程的句柄，并且A通过命令行参数将这两个句柄值传递给了B子进程，这时候B进程就可以通过这两个句柄值对浏览器进程进行控制了。在B进程中，可以将前面的浏览器进程做挂起、恢复和结束等操作。如果B没有继承这两个句柄，是无法通过这两个值对浏览器进程进行控制的。</p><p>接下来再看CreateProcess函数的另一个参数lpCurrentDirectory，这个参数可以获取程序的当前目录。</p><p>通过下面的例子来说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进程A代码，位于C：/1文件夹下</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> szBuffer[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer,<span class="string">&quot;C:/B.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义创建进程需要用的结构体</span></span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">PROCESS_INFORMATION pi;</span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建子进程</span></span><br><span class="line">BOOL res = CreateProcess(</span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">szBuffer, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">TRUE, </span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">&amp;si, &amp;pi); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程B代码，位于位于C：/下</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> szBuffer[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">GetCurrentDirectory(<span class="number">256</span>,szBuffer);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,szBuffer);</span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下代码，在父进程A中创建子进程B，进程B的任务是打印进程所在的目录位置。当父进程A中CreateProcess函数的参数lpCurrentDirectory设置为NULL时，结果如下：</p><p><img src="/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/1.PNG"></p><p>可以看到，lpCurrentDirectory设置为NULL时，子进程B打印的是父进程A的目录位置。而当我们将这个参数设置为一个存在的目录时，打印的结果就是我们设定的目录，结果如下图：</p><p><img src="/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/2.PNG"></p><p>这个当前目录的参数很多人会觉得无所谓，但这是我们后面写壳的一个很重要的地方。</p><h1 id="以挂起方式创建进程"><a href="#以挂起方式创建进程" class="headerlink" title="以挂起方式创建进程"></a>以挂起方式创建进程</h1><p>最后来看一下我们要学习的CreateProcess函数的最后一个参数dwCreationFlags。在前面的程序中，我们把这个参数的值赋成了CREATE_NEW_CONSOLE，这样一来，对于控制台程序来说，子进程就会将它打印的东西打印到一个新的控制台中。而当dwCreationFlags赋值为NULL时，子进程就会与父进程共用一个控制台窗口。</p><p>而当我们把dwCreationFlags这个参数赋值成CREATE_SUSPENDED时，就是我们要讲的以挂起的方式创建进程。</p><p>先来看下面的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    STARTUPINFO ie_si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">    PROCESS_INFORMATION ie_pi;</span><br><span class="line">    ie_si.cb = <span class="keyword">sizeof</span>(ie_si);</span><br><span class="line"></span><br><span class="line">    TCHAR szBuffer[<span class="number">256</span>] = <span class="string">&quot;C:\\1.exe&quot;</span>;</span><br><span class="line">    CreateProcess(</span><br><span class="line">        <span class="literal">NULL</span>,                  </span><br><span class="line">        szBuffer,                </span><br><span class="line">        <span class="literal">NULL</span>, </span><br><span class="line">        <span class="literal">NULL</span>,  </span><br><span class="line">        FALSE,                   </span><br><span class="line">        CREATE_SUSPENDED, <span class="comment">//挂起    </span></span><br><span class="line">        <span class="literal">NULL</span>,                    </span><br><span class="line">        <span class="literal">NULL</span>,                    </span><br><span class="line">        &amp;ie_si,                  </span><br><span class="line">        &amp;ie_pi                  </span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//恢复执行</span></span><br><span class="line">    ResumeThread(ie_pi.hThread);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序首先以挂起的方式创建1.exe进程，然后立即恢复该进程，因此当这个程序一运行，就相当于正常启动了1.exe这个进程，观察该进程的运行状态以及模块状态如下：</p><p><img src="/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/3.png"></p><p><img src="/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/4.png"></p><p>可以看到，当进程正常创建后，内存使用为1568K（正常大小），并且也可以遍历到该进程的模块。</p><p>接下来，在ResumeThread(ie_pi.hThread)处下断点，相当于让1.exe进程以挂起方式创建，观察结果：</p><p><img src="/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/5.png"></p><p><img src="/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/6.png"></p><p>可以看到，以挂起方式创建进程后，进程被挂起没有运行，在任务管理器中可以看到该进程，但是大小却只有76K，远小于正常执行的大小1568K，同时还可以看到该进程的模块没有被加载。这意味着此时这个进程还是一个空壳。</p><p>那是否可以这样想，当我们以挂起的方式创建一个进程后，通过修改这个空壳的内容，将我们自己的程序拉伸后替换原来外壳程序的内容，那么再恢复这个进程后，表面上看是运行的一开始创建的进程，但实际上运行的内容却是我们刚刚替换的自己的程序。（这也是我们后面写壳的思路）</p><p>那么既然要替换原程序的内容，我们就得需要修改如下两个点：ImageBase和程序入口点。具体怎么修改，下节课讲制作壳程序的原理的时候再详细说明，这里先说下如何获取外壳程序进程的ImageBase和程序入口点。看下面的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    STARTUPINFO ie_si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">    PROCESS_INFORMATION ie_pi;</span><br><span class="line">    ie_si.cb = <span class="keyword">sizeof</span>(ie_si);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以挂起的方式创建进程</span></span><br><span class="line">    TCHAR szBuffer[<span class="number">256</span>] = <span class="string">&quot;C:\\ipmsg.exe&quot;</span>;</span><br><span class="line">    CreateProcess(</span><br><span class="line">        <span class="literal">NULL</span>,                    <span class="comment">// name of executable module</span></span><br><span class="line">        szBuffer,                <span class="comment">// command line string</span></span><br><span class="line">        <span class="literal">NULL</span>,  <span class="comment">// SD</span></span><br><span class="line">        <span class="literal">NULL</span>,               <span class="comment">// SD</span></span><br><span class="line">        FALSE,                   <span class="comment">// handle inheritance option</span></span><br><span class="line">        CREATE_SUSPENDED,      <span class="comment">// creation flags  </span></span><br><span class="line">        <span class="literal">NULL</span>,                    <span class="comment">// new environment block</span></span><br><span class="line">        <span class="literal">NULL</span>,                    <span class="comment">// current directory name</span></span><br><span class="line">        &amp;ie_si,                  <span class="comment">// startup information</span></span><br><span class="line">        &amp;ie_pi                   <span class="comment">// process information</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    CONTEXT contx;  </span><br><span class="line">    contx.ContextFlags = CONTEXT_FULL;  </span><br><span class="line">    GetThreadContext(ie_pi.hThread, &amp;contx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取入口点</span></span><br><span class="line">    DWORD dwEntryPoint = contx.Eax;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取ImageBase</span></span><br><span class="line">    <span class="type">char</span>* baseAddress = (CHAR *) contx.Ebx+<span class="number">8</span>;</span><br><span class="line">    <span class="built_in">memset</span>(szBuffer,<span class="number">0</span>,<span class="number">256</span>);</span><br><span class="line">    ReadProcessMemory(ie_pi.hProcess,baseAddress,szBuffer,<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    ResumeThread(ie_pi.hThread);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个程序中，我们想要获取目标进程ipmsg.exe的入口点和ImageBase，可以通过以挂起的方式创建目标进程，然后获取此时目标进程的上下文（通过GetThreadContext函数）。注意，目标进程的<strong>入口点</strong>保存在contx.Eax中，<strong>ImageBase的地址</strong>保存在contx.Ebx+8中，这两个值目前记住就好，想要了解的话需要涉及内核中PEB的知识。另外需要注意的是，contx.Eax中保存的是程序入口点，这个值就是目标程序的入口点，可以直接打印；而contx.Ebx+8中存放的是目标进程ImageBase的地址，但是不能简单的通过*（contx.Ebx+8）获取，因为这个地址不在当前的程序中，而是在目标进程ipmsg.exe中，所以可以通过ReadProcessMemory函数来读取目标进程的地址来获取。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上节课讲解了CreateProcess函数，并介绍了其中的几个参数。这节课来介绍另外几个参数，并且会讲解如何以挂起方式创建进程，为我们下一节课写一个简单的加密壳打下基础。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Win32：进程创建与句柄表</title>
    <link href="http://example.com/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/"/>
    <id>http://example.com/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/</id>
    <published>2022-05-13T06:29:24.000Z</published>
    <updated>2022-08-25T06:02:43.061Z</updated>
    
    <content type="html"><![CDATA[<p>上一章节学习了线程相关的知识。有关线程的同步与互斥，例如临界区与互斥量等的问题，网络上有很多资料，这里不做赘述。本章节我们将要学习进程的创建，了解在进程创建过程中系统都做了哪些事情，以及句柄表在内核中的表现形式。</p><span id="more"></span><h1 id="进程的创建过程"><a href="#进程的创建过程" class="headerlink" title="进程的创建过程"></a>进程的创建过程</h1><p>首先来区分一下三个概念：程序、镜像、进程。</p><p>程序就是一个存在于磁盘上的PE格式的文件。镜像就是程序在内存中拉伸后的ImageBuffer，这里面是没有线程的。进程就是在内存中运行着的程序，结构与ImageBuffer一样，但是这里面有线程。</p><p>一个程序是怎样运行起来的？</p><p><img src="/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/1.PNG"></p><p>步骤1：当系统启动后，创建一个进程：Explorer.exe 也就是桌面进程。</p><p>步骤2：当用户双击某一个EXE时，Explorer进程使用CreateProcess函数创建被双击的EXE，也就是说，我们在桌面上双击创建的进程都是Explorer进程的子进程。</p><p>下面来研究一下，CreateProcess函数都做了哪些事情</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">CreateProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">  LPCTSTR lpApplicationName,                 <span class="comment">// name of executable module</span></span></span><br><span class="line"><span class="params">  LPTSTR lpCommandLine,                      <span class="comment">// command line string</span></span></span><br><span class="line"><span class="params">  LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// SD</span></span></span><br><span class="line"><span class="params">  LPSECURITY_ATTRIBUTES lpThreadAttributes,  <span class="comment">// SD</span></span></span><br><span class="line"><span class="params">  BOOL bInheritHandles,                      <span class="comment">// handle inheritance option</span></span></span><br><span class="line"><span class="params">  DWORD dwCreationFlags,                     <span class="comment">// creation flags</span></span></span><br><span class="line"><span class="params">  LPVOID lpEnvironment,                      <span class="comment">// new environment block</span></span></span><br><span class="line"><span class="params">  LPCTSTR lpCurrentDirectory,                <span class="comment">// current directory name</span></span></span><br><span class="line"><span class="params">  LPSTARTUPINFO lpStartupInfo,               <span class="comment">// startup information</span></span></span><br><span class="line"><span class="params">  LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// process information，OUT类型</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p><strong>1、创建内核对象</strong></p><p>当我们在3环调用CreateProcess函数时，实际上是系统在0环(内核层)调用NtCreateProcess，这个函数会在该进程的高2G创建一块内存，用来存放一张表(这张表就是句柄表)。在进程刚刚被创建时，这张表是空的。当我们在这个进程中创建其他的内核对象，比如CreateProcess、CreateThread、CreateEvent、CreateMutex、CreateFile、CreateFileMapping等时，我们会得到这些内核对象的地址。但是如果直接将这些地址返回给3环的程序是不安全的，因为有可能会对这些地址进行恶意或者无意的修改导致错误。因此会对这些地址给一个编号，这个编号就是我们说的句柄。</p><p><img src="/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/2.PNG"></p><p><strong>2、分配4GB的虚拟空间(Windows32位)</strong></p><p>这部分内容前面章节已经讲过，直接上图</p><p><img src="/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/3.PNG"></p><p><strong>3、创建进程的主线程</strong></p><p>当进程的空间创建完毕，EXE与导入表中的DLL都正确加载完毕后，会创建一个线程。当线程得到CPU的时候，程序就开始指向了，EIP的初始值设定为：ImageBase+OEP。然后程序就可以运行起来了。</p><p>创建成功后，会将进程的句柄和ID、主线程的句柄和ID存储在一个结构中，该结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_INFORMATION</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   HANDLE hProcess;<span class="comment">//进程句柄</span></span><br><span class="line">   HANDLE hThread;<span class="comment">//主线程句柄</span></span><br><span class="line">   DWORD dwProcessId;<span class="comment">//进程ID</span></span><br><span class="line">   DWORD dwThreadId;<span class="comment">//线程ID</span></span><br><span class="line">&#125; PROCESS_INFORMATION;</span><br></pre></td></tr></table></figure><p>该结构就是CreateProcess函数的最后一个OUT参数。至此，整个进程创建的过程结束。</p><p>可以总结一句比较经典的话：<strong>进程就是4GB，线程就是EIP</strong>。</p><h1 id="有关CreateProcess函数"><a href="#有关CreateProcess函数" class="headerlink" title="有关CreateProcess函数"></a>有关CreateProcess函数</h1><p>这个函数有很多参数，而且每个参数都比较重要，这里先对前两个和后两个参数进行讲解。</p><p>第一个参数为lpApplicationName，也就是要打开的进程名字，应该指定程序的完整路径。</p><p>第二个参数为lpCommandLine，命令行参数，不仅可以指定进程名，还可以指定给要创建的进程传参。</p><p>上面两个参数均可以创建一个进程。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">VOID <span class="title function_">TestCreateProcessByAPPName</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line"></span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line">TCHAR szApplicationName[] =TEXT(<span class="string">&quot;c://program files//internet explorer//iexplore.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">BOOL res = CreateProcess(</span><br><span class="line">szApplicationName, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">FALSE, </span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, &amp;si, &amp;pi);   </span><br><span class="line">&#125;</span><br><span class="line">VOID <span class="title function_">TestCreateProcessByCmdline</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line"></span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line">TCHAR szCmdline[] =TEXT(<span class="string">&quot;c://program files//internet explorer//iexplore.exe http://www.ifeng.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">BOOL res = CreateProcess(</span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">szCmdline, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">FALSE, </span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, &amp;si, &amp;pi); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>倒数第二个参数为lpStartupInfo，是一个结构，用来设定要创建的应用程序的属性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">STARTUPINFO</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   DWORD cb;</span><br><span class="line">   PSTR lpReserved;</span><br><span class="line">   PSTR lpDesktop;</span><br><span class="line">   PSTR lpTitle;</span><br><span class="line">   DWORD dwX;</span><br><span class="line">   DWORD dwY;</span><br><span class="line">   DWORD dwXSize;</span><br><span class="line">   DWORD dwYSize;</span><br><span class="line">   DWORD dwXCountChars;</span><br><span class="line">   DWORD dwYCountChars;</span><br><span class="line">   DWORD dwFillAttribute;</span><br><span class="line">   DWORD dwFlags;</span><br><span class="line">   WORD wShowWindow;</span><br><span class="line">   WORD cbReserved2;</span><br><span class="line">   PBYTE lpReserved2;</span><br><span class="line">   HANDLE hStdInput;</span><br><span class="line">   HANDLE hStdOutput;</span><br><span class="line">   HANDLE hStdError;</span><br><span class="line">&#125; STARTUPINFO, *LPSTARTUPINFO;</span><br></pre></td></tr></table></figure><p>一般情况下，只需要对该结构的第一个成员赋值就行了，该值为当前结构的大小。</p><p>最后一个参数lpProcessInformation前面讲解过，也是一个结构，存储了进程与主线程的句柄和ID。下面关于句柄与ID进行一下说明，两者概念很多人容易混淆。</p><p>1、句柄与ID都是系统分配的一个编号，句柄是客户程序使用，ID主要是系统调度时使用。</p><p>2、调用CloseHandle关闭进程或者线程句柄的时候，只是让内核计数器减少一个，并不是终止进程或者线程。<strong>进程或线程将继续运行，直到它自己终止运行</strong>(在我们创建和打开内核对象时，该内核对象计数器会+1，内核对象计数器不为0时代表该内核对象还在被使用中)。</p><p>3、线程与进程ID是不可能相同的，但是并不意味着我们得到了ID就能对其进行操作。因为一个进程结束后再运行起来时，其ID是有可能会变化的，前面的那个ID有可能被赋给了其他进程或线程。因此我们3环的客户程序一般都是通过句柄操作。</p><h1 id="进程终止"><a href="#进程终止" class="headerlink" title="进程终止"></a>进程终止</h1><p>与线程类似，进程终止也有三种方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、VOID　<span class="title function_">ExitProcess</span><span class="params">(UINT fuExitCode)</span>;<span class="comment">//进程自己调用</span></span><br><span class="line"><span class="number">2</span>、BOOL <span class="title function_">TerminateProcess</span><span class="params">(HANDLE hProcess, UINT fuExitCode)</span>;<span class="comment">//终止其他进程</span></span><br><span class="line"><span class="number">3</span>、ExitThread;<span class="comment">//终止进程中的所有线程，进程也会终止</span></span><br></pre></td></tr></table></figure><p>可以通过GetExitCodeProcess函数获取进程退出结束的退出码。</p><p>进程终止时的相关操作：</p><p>1、进程中剩余的所有线程全部终止运行</p><p>2、进程指定的所有用户对象均被释放，所有内核对象均被关闭</p><p>3、进程内核对象的状态变成收到通知的状态</p><p>4、进程内核对象的使用计数递减1</p><h1 id="句柄的继承"><a href="#句柄的继承" class="headerlink" title="句柄的继承"></a>句柄的继承</h1><p>如果想要让两个进程共享一个内核对象，一种方法是可以在一个进程中创建一个内核对象，并为这个对象起一个名字，然后在另一个进程中通过这个名字打开这个内核对象。</p><p>还有一种方法是通过句柄继承。前面讲过，一个进程在创建时，会创建一张句柄表。那么通过这个进程创建的子进程就可以继承父进程的句柄表。使得不同的进程拥有相同的内核对象。</p><p>以CreateEvent函数为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HANDLE  <span class="title function_">CreateEvent</span><span class="params">(</span></span><br><span class="line"><span class="params">　　LPSECURITY_ATTRIBUTES  lpEventAttributes,<span class="comment">// 安全属性 </span></span></span><br><span class="line"><span class="params">　　BOOL  bManualReset,<span class="comment">// 复位方式</span></span></span><br><span class="line"><span class="params">　　BOOL  bInitialState,<span class="comment">// 初始状态</span></span></span><br><span class="line"><span class="params">　　LPCTSTR  lpName <span class="comment">// 对象名称 </span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>第一个参数lpEventAttributes为一个结构，表示该内核对象是否能被继承，NULL表示不能继承。</p><p>第二个参数bManualReset为复位方式。TRUE表示手动复位，必须通过ResetEvent手动将事件恢复到无信号状态。FALSE表示自动复位，当一个线程被释放以后，系统将自动将事件状态复位为无信号状态;对于自动复位的Event对象，仅释放第一个等待到该事件的线程，对其它线程无效；手动复位的Event对象对所有线程有效。</p><p>第三个参数bInitialState为初始状态。TRUE，初始状态有信号；FALSE，初始状态无信号。</p><p>第四个参数lpName为对象名称。</p><p>再来看一下这张图：</p><p><img src="/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/2.PNG"></p><p>当创建内核对象时，安全属性被赋值的话，上图第三个字段就为1，表示该内核对象可以被继承（<strong>注意这里是可以被继承，而不是被继承了</strong>）。安全属性为NULL的话则是0，代表不能被继承。</p><p>那么子进程如何才能继承得到父进程的句柄表中可以被继承的内核对象呢？这就涉及到了CreateProcess函数的第五个参数bInheritHandles。当该值为TRUE时，才能继承父进程句柄表中那些允许被继承的内核对象，为FALSE时，无法继承父进程的所有内核对象（注意这里是将父进程的句柄表复制一份，而不是将内核对象复制）。</p><p>下面做一个实验，进程A创建一个可被继承的内核对象，然后创建一个子进程B来继承它。在A中设置信号的地方下断点，然后在B进程中监听这个对象是否发信号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父进程A代码</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> szBuffer[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> szHandle[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//若要创建能继承的句柄，父进程必须指定一个SECURITY_ATTRIBUTES结构并对它进行初始化</span></span><br><span class="line"><span class="comment">//三个成员的意义：大小、默认安全属性、是否可以继承</span></span><br><span class="line">SECURITY_ATTRIBUTES sa;</span><br><span class="line">sa.nLength = <span class="keyword">sizeof</span>(sa);</span><br><span class="line">sa.lpSecurityDescriptor = <span class="literal">NULL</span>;</span><br><span class="line">sa.bInheritHandle = TRUE; </span><br><span class="line"><span class="comment">//创建一个可以被继承的内核对象</span></span><br><span class="line">HANDLE g_hEvent = CreateEvent(&amp;sa, TRUE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//组织命令行参数C:/Documents and Settings/easy/桌面/逆向/B/Debug/B.exe</span></span><br><span class="line"><span class="built_in">sprintf</span>(szHandle,<span class="string">&quot;%x&quot;</span>,g_hEvent);</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer,<span class="string">&quot;C:/Documents and Settings/easy/桌面/逆向/B/Debug/B.exe %s&quot;</span>,szHandle);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义创建进程需要用的结构体</span></span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">PROCESS_INFORMATION pi;</span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建子进程</span></span><br><span class="line">BOOL res = CreateProcess(</span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">szBuffer, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">TRUE,<span class="comment">//TRUE说明子进程可以继承父进程的句柄表</span></span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, &amp;si, &amp;pi); </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置事件为已通知</span></span><br><span class="line">SetEvent(g_hEvent);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭句柄 内核对象不会被销毁，而是对象计数器-1</span></span><br><span class="line">CloseHandle(g_hEvent);  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子进程B代码</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> szBuffer[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(szBuffer,argv[<span class="number">1</span>],<span class="number">8</span>);</span><br><span class="line">DWORD dwHandle = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">sscanf</span>(szBuffer,<span class="string">&quot;%x&quot;</span>,&amp;dwHandle);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,dwHandle);</span><br><span class="line">HANDLE g_hEvent = (HANDLE)dwHandle;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;开始等待.....\n&quot;</span>);</span><br><span class="line"><span class="comment">//当事件变成已通知时 </span></span><br><span class="line">WaitForSingleObject(g_hEvent, INFINITE);</span><br><span class="line"></span><br><span class="line">DWORD dwCode = GetLastError();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;等到消息.....%x\n&quot;</span>,dwCode);</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在A进程中的SetEvent(g_hEvent)处下断点，内核对象event被创建时无信号，B进程会在WaitForSingleObject(g_hEvent, INFINITE)处无限等待直到该对象有信号。</p><p><img src="/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/4.PNG"></p><p>在进程A中单步执行，使内核对象有信号，子进程B将会得到信号，代表子进程继承了父进程的内核对象。</p><p><img src="/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/5.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一章节学习了线程相关的知识。有关线程的同步与互斥，例如临界区与互斥量等的问题，网络上有很多资料，这里不做赘述。本章节我们将要学习进程的创建，了解在进程创建过程中系统都做了哪些事情，以及句柄表在内核中的表现形式。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
</feed>
