<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘小白的博客</title>
  
  <subtitle>爱生活爱技术爱女盆友</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-24T05:31:55.241Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>刘小白</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PE研究：新增节并添加代码</title>
    <link href="http://example.com/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/</id>
    <published>2022-04-23T07:30:31.000Z</published>
    <updated>2022-04-24T05:31:55.241Z</updated>
    
    <content type="html"><![CDATA[<p>上一章是在原本存在的代码节中添加代码，本章实现新增一个节，并在新增的节中添加代码。</p><span id="more"></span><p>先来整理一下，如果需要新增一个节，需要修改哪些东西：节表、新增一个节、在新增的节后面保证有一个节大小的0、修改PE头中节的数量、修改SizeOfImage大小、修正新增节的属性。</p><p><strong>1、修改节表</strong></p><p>先来看一下节表中每一项的内容</p><p><img src="/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/1.PNG"></p><p>在节表中，每一项长度为40字节，描述了对应的节区的各种属性。那么Windows系统是怎么判断节表里面有多少项的呢？答案是，在节表的最后，是以一个节表项大小(40字节)全为0的内存，来表示节表的结束，类似于C语言中的字符串。因此，如果想要新增一个节，就需要保证在原有的节表后面，必须有2个节表项大小的0。再来看一张图</p><p><img src="/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/2.PNG"></p><p>由上面的图可以看到，判断能否在原来的节表中新增加一项，判断公式为**SizeOfHeader - (DOS + 垃圾数据 + PE标记 + 标准PE头 + 可选PE头 + 已存在节表) &gt;&#x3D; 2个节表项大小(80字节)**。那么现在问题出来了，如果能容得下，直接添加就好了，如果容不下怎么办？</p><p>再次看一下上面的图，在DOS头和NT头中间的浅蓝色区域，其实是一块垃圾数据，这里面的数据不影响程序的运行。因为Windows系统根据DOS头中的Ifanew字段直接找到了NT头，跳过了那段垃圾区域。因此，如果节表容不下新增一个项，那么我们可以将NT头和节表那一整块整体上移至DOS头下方，然后修改Ifanew字段，指向刚刚移动的位置，然后再新增一个节表项即可。</p><p><strong>2、其他要修改的内容</strong></p><p>节的数量：位于PE头中，+1。</p><p>sizeofimage：位于可选PE头，比如我们新增节大小为0x1000h(4096字节)，那么sizeofimage + 1000。</p><p>在最后一个节的后面新增节：要注意对齐。</p><p>新增节的属性：可以直接将代码段的属性复制到新增的节上。</p><p>在节中添加代码。</p><p>还有需要注意的一点是，在新增节的时候，应该另外申请一个ImageBuffer2空间的大小，用于盛放原来的ImageBuffer的内容和新增节的内容。</p><p>代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 新增一个节，添加弹框代码 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MessageBoxAddr 0x77D507EA</span></span><br><span class="line"><span class="type">char</span> shellcode[] = </span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,<span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//新增节的名称为.haha</span></span><br><span class="line"><span class="type">char</span> sectionname[] = &#123;<span class="number">0x2E</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"><span class="type">int</span> shellcode_length = <span class="number">18</span>;</span><br><span class="line"><span class="comment">//函数实现新增节，参数分别为拉伸后的ImageBuffer和新增节大小的字节数</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">AddSection</span><span class="params">(<span class="type">char</span>* ImageBuffer, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 定义各文件头 */</span></span><br><span class="line">dos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> size = (<span class="type">int</span>)((poph-&gt;SizeOfImage) + len);</span><br><span class="line"><span class="type">char</span>* ImageBuffer2 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="built_in">memset</span>(ImageBuffer2, <span class="number">0</span>, size);</span><br><span class="line"><span class="built_in">memcpy</span>(ImageBuffer2, ImageBuffer, poph-&gt;SizeOfImage);</span><br><span class="line"></span><br><span class="line">pdh = (dos_header*)ImageBuffer2;</span><br><span class="line">pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加一个节表 */</span></span><br><span class="line"><span class="type">int</span> up_size = <span class="number">4</span> + <span class="number">20</span> + pph-&gt;SizeOfOptionalHeader + (pph-&gt;NumberOfSection)*<span class="number">40</span>;</span><br><span class="line"><span class="type">char</span>* des = (<span class="type">char</span>*)((<span class="type">int</span>)ImageBuffer2 + <span class="number">64</span>);</span><br><span class="line"><span class="type">char</span>* src = (<span class="type">char</span>*)((<span class="type">int</span>)ImageBuffer2 + pdh-&gt;e_lfanew);</span><br><span class="line"><span class="built_in">memcpy</span>(des, src, up_size);            <span class="comment">//上移NT头</span></span><br><span class="line"><span class="built_in">memset</span>((<span class="type">char</span>*)(des + up_size), <span class="number">0</span>, <span class="number">160</span>);   <span class="comment">//160=E0+up_size-(64+up_zise)  清0</span></span><br><span class="line">pdh-&gt;e_lfanew = <span class="number">0x40</span>;</span><br><span class="line"></span><br><span class="line">pdh = (dos_header*)ImageBuffer2;</span><br><span class="line">pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* des_pish = (<span class="type">char</span>*)((<span class="type">int</span>)pish + (<span class="type">int</span>)(pph-&gt;NumberOfSection*<span class="number">40</span>));</span><br><span class="line"><span class="type">char</span>* src_pish = (<span class="type">char</span>*)((<span class="type">int</span>)pish);</span><br><span class="line"><span class="built_in">memcpy</span>(des_pish, src_pish, <span class="number">40</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">(pish + pph-&gt;NumberOfSection)-&gt;name[i] = sectionname[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改PE头中节的数量 */</span></span><br><span class="line">pph-&gt;NumberOfSection += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改sizeofimage大小 */</span></span><br><span class="line">poph-&gt;SizeOfImage = poph-&gt;SizeOfImage + len;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修正新增节表的属性 */</span></span><br><span class="line">(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;Misc.VirtualAddress = len;</span><br><span class="line">(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress = (pish + pph-&gt;NumberOfSection - <span class="number">2</span>)-&gt;VirtualAddress + (pish + pph-&gt;NumberOfSection - <span class="number">2</span>)-&gt;SizeOfRawData;</span><br><span class="line">(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;SizeOfRawData = len;</span><br><span class="line">(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData = (pish + pph-&gt;NumberOfSection - <span class="number">2</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class="number">2</span>)-&gt;SizeOfRawData;</span><br><span class="line">(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;Characteristics = (pish + <span class="number">2</span>)-&gt;Characteristics;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在节中添加代码 */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">memcpy((char*)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + (int)ImageBuffer2), shellcode, shellcode_length);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int CallAddr = (int)(MessageBoxAddr - ((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + 13 + poph-&gt;ImageBase));</span></span><br><span class="line"><span class="comment">int* addr1 = (int*)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + (int)ImageBuffer2 + 9);</span></span><br><span class="line"><span class="comment">*addr1 = CallAddr;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int RetAddr = (int)(poph-&gt;AddressOfEntryPoint + poph-&gt;ImageBase - ((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + 18 + poph-&gt;ImageBase));</span></span><br><span class="line"><span class="comment">int* addr2 = (int*)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + (int)ImageBuffer2 + 14);</span></span><br><span class="line"><span class="comment">*addr2 = RetAddr;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int OEP = (int)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress);</span></span><br><span class="line"><span class="comment">poph-&gt;AddressOfEntryPoint = OEP;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ImageBuffer2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果：</p><p>在原本的记事本程序中，有三个节：</p><p><img src="/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/3.PNG"></p><p>代码运行成功后，节添加成功：</p><p><img src="/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/4.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一章是在原本存在的代码节中添加代码，本章实现新增一个节，并在新增的节中添加代码。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>PE研究：代码节空白区添加代码</title>
    <link href="http://example.com/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/</id>
    <published>2022-04-22T07:49:31.000Z</published>
    <updated>2022-04-23T07:17:52.765Z</updated>
    
    <content type="html"><![CDATA[<p>代码节是PE结构中的一个节区，一般用于存放代码段。本节来做一个小实验，向代码节的空白区添加代码。实现的功能是，双击运行记事本文件时，先弹出一个对话框，关掉后才能运行记事本程序。</p><span id="more"></span><p>这个实验大致的一种思路可以是，将MessageBox(0, 0, 0, 0)这段代码加入到目标程序中，修改程序的入口点，让它指向我们新加入的这段代码，然后再让程序跳回到原来的入口点执行原来的程序。但是这里有一个问题，就是我们是向已经存在的程序加入代码，不可能直接将MessageBox(0, 0, 0, 0)这个代码直接放进去，而是应该将其转化为<strong>shellcode</strong>二进制代码，再放进去。</p><p>具体步骤如下：</p><p><strong>1、获取MessageBox地址，构造shellcode。</strong></p><p>打开OD，随便拖入一个文件，在命令行中输入bp MessageBoxA，然后打开断点视图，双击到断点处，得到MessageBox的地址。</p><p><img src="/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/1.PNG"></p><p>我这里的地址为77D507EA，不同的机器地址不一样。</p><p>还需要注意的是，在调用MessageBox时，还需要push4个参数，push的硬编码为0x6A。因此我们构造出来的shellcode为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> shellcode1[] = </span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,<span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2、读取文件，判断代码节(一般都是第一个节)空白区域能否放得下前面的shellcode(这里是18字节)。</strong></p><p><strong>3、将shellcode加入代码节空白区域。</strong></p><p><strong>4、修改E8与E9</strong></p><p>本程序的流程是，通过程序入口(OEP)进入到我们的shellcode，我们的shellcode完成的任务是调用(call)MessageBox函数，然后再跳(jmp)回去。call的硬编码是E8，后面跟了一个地址(4个字节)，jmp的硬编码是E9，后面跟了一个地址(4个字节)。先来研究一下后面跟的地址的计算规则：</p><p><img src="/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/2.PNG"></p><p>公式为：真正要跳转的地址 &#x3D; E8这条指令的下一行地址 + X，而E8指令的长度为5字节。因此，公式可以转化为：要跳转的地方 &#x3D; E8当前的地址 + 5 + X，**X &#x3D; 要跳转的地址 - (E8的地址 + 5)**。E9的公式同理。</p><p><strong>5、修改OEP</strong></p><p><strong>注：如果加在别的节中，还需要修改节属性。</strong></p><p>现在还有一个问题，就是我们加入的shellcode，是加在FileBuffer中呢，还是加在ImageBuffer中呢？答案是ImageBuffer中，因为在shellcode中涉及到地址，这个地址是拉伸后准备运行的地址。当然，如果将shellcode加在FileBuffer中也是可以的，只不过需要多一步，将shellcode中的地址从FOA转换为RVA。</p><p>现在基本没有什么问题了，直接上代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MessageBoxAddr 0x77D507EA</span></span><br><span class="line"><span class="type">char</span> shellcode1[] = </span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,<span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> shellcode_length1 = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编程实现在代码节添加MessageBox函数代码，弹出框 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_shellcode</span><span class="params">(<span class="type">char</span>* ImageBuffer)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 定义各文件头 */</span></span><br><span class="line">dos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断第一个节的空白区域是否大于18字节 */</span></span><br><span class="line"><span class="keyword">if</span>((((pish+<span class="number">1</span>)-&gt;VirtualAddress) - (pish-&gt;VirtualAddress) - pish-&gt;Misc.VirtualAddress) &lt; <span class="number">18</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无法添加代码!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将shellcode加入代码节空白区域 */</span></span><br><span class="line">    <span class="comment">//注意这里要加ImageBuffer</span></span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">char</span>*)(pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress + (<span class="type">int</span>)ImageBuffer), shellcode1, shellcode_length1);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改E8 */</span></span><br><span class="line">    <span class="comment">//E8后面的地址，为MessageBox()地址 - E8下一条语句的地址</span></span><br><span class="line">    <span class="comment">//这个下一条地址应该是对齐后加上imagebase地址，因为程序已经跑起来了</span></span><br><span class="line"><span class="type">int</span> CallAddr = (<span class="type">int</span>)(MessageBoxAddr - (pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress + <span class="number">13</span> + poph-&gt;ImageBase));</span><br><span class="line"><span class="type">int</span>* addr1 = (<span class="type">int</span>*)(pish-&gt;VirtualAddress + (<span class="type">int</span>)ImageBuffer + pish-&gt;Misc.VirtualAddress + <span class="number">9</span>);</span><br><span class="line">*addr1 = CallAddr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改E9 */</span> </span><br><span class="line">    <span class="comment">//注意都要加上ImageBase</span></span><br><span class="line"><span class="type">int</span> RetAddr = (<span class="type">int</span>)(poph-&gt;AddressOfEntryPoint + poph-&gt;ImageBase - (pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress + <span class="number">18</span> + poph-&gt;ImageBase));</span><br><span class="line"><span class="type">int</span>* addr2 = (<span class="type">int</span>*)(pish-&gt;VirtualAddress + (<span class="type">int</span>)ImageBuffer + pish-&gt;Misc.VirtualAddress + <span class="number">14</span>);</span><br><span class="line">*addr2 = RetAddr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改OEP */</span></span><br><span class="line">    <span class="comment">//OEP本来存的就是RVA，不需要加ImageBase</span></span><br><span class="line"><span class="type">int</span> OEP = (<span class="type">int</span>)(pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress);</span><br><span class="line">poph-&gt;AddressOfEntryPoint = OEP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面提过，这段代码执行前要先拉伸，执行完毕后再还原回去存盘即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;代码节是PE结构中的一个节区，一般用于存放代码段。本节来做一个小实验，向代码节的空白区添加代码。实现的功能是，双击运行记事本文件时，先弹出一个对话框，关掉后才能运行记事本程序。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>PE研究：PE文件的加载</title>
    <link href="http://example.com/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/"/>
    <id>http://example.com/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-04-20T05:27:41.000Z</published>
    <updated>2022-04-22T07:45:27.047Z</updated>
    
    <content type="html"><![CDATA[<p>PE文件是Windows操作系统下使用的32位可执行文件格式。关于PE文件的结构以及各字段的意义，网络上有很详细的资料，这里不再赘述(或者用到的时候再说明)。本版块主要涉及Windows下的一些小应用。</p><span id="more"></span><h1 id="PE文件的加载过程"><a href="#PE文件的加载过程" class="headerlink" title="PE文件的加载过程"></a>PE文件的加载过程</h1><p>首先要知道，PE文件有在磁盘上与在内存中的两种状态。如下图所示</p><p><img src="/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/1.PNG"></p><p>可以看到，这两种状态大体的结构布局是一致的，但是占用的内存大小是不同的，而且两者对齐的大小<strong>有可能</strong>不同。说是有可能，是因为PE文件在磁盘上的对齐方式为FileAlignment，其值可能为0x200h或者0x1000h，而在内存中的对齐方式为SectionAlignment，其值一般为0x1000h。</p><p>Windows系统将PE文件从磁盘读入内存并执行的过程中，就存在上面的这个“拉伸”的过程。DOS头和NT头以及块表位置与大小不变，剩下的各个节按照对齐方式对齐。现在可以将PE文件的加载过程总结如下：</p><p>1、将文件从磁盘读取并拷贝到内存中，这时内存中的布局与在磁盘上的布局是一样的，拷贝在内存中的地址我们一般称为FileBuffer。</p><p>2、根据SizeOfImage的大小，开辟一块缓冲区，将来“拉伸”后的内容就会放到这里面，这个地址我们一般称为ImageBuffer。这块内存会被放入4GB大小的进程空间中。</p><p>3、根据SizeOfHeader的大小，将头信息从FileBuffer拷贝到ImageBuffer。</p><p>4、根据节表中的信息循环将FileBuffer中的节拷贝到ImageBuffer中。</p><p><img src="/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/2.PNG"></p><p>在“拉伸”完毕后，程序还不能跑起来，Windows系统还需要做一些收尾的工作才能运行。后续我们会通过代码来模拟这一过程。</p><h1 id="PE文件拉伸与还原的实现"><a href="#PE文件拉伸与还原的实现" class="headerlink" title="PE文件拉伸与还原的实现"></a>PE文件拉伸与还原的实现</h1><p>前面提到过，一个PE文件从磁盘被读入并拉伸后，还不能立即运行起来。现在我们要实现这样的功能，将PE文件读入内存并拉伸，然后再将拉伸后的内容还原回原来的PE文件并存盘，该文件是可以双击运行的。如图：</p><p><img src="/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/3.PNG"></p><p>各个模块实现代码如下(PE的各结构定义这里不再赘述)</p><p><strong>1、将文件读入内存，并返回FileBuffer</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">Read_exe</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">fp = fopen(<span class="string">&quot;C:\\Windows\\System32\\notepad.exe&quot;</span>,<span class="string">&quot;rb&quot;</span>);<span class="comment">//这里存放要读取的PE文件</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>(!fp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无法打开 EXE 文件!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">size = getlength(fp);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* FileBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="keyword">if</span>(FileBuffer != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fread(FileBuffer, size, <span class="number">1</span>, fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Wrong!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> FileBuffer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取文件的大小</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getlength</span><span class="params">(FILE* fp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);</span><br><span class="line">size = ftell(fp);</span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、将读入内存的文件拉伸，并返回ImageBuffer</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">file_to_image</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 完成初始化工作 */</span></span><br><span class="line"><span class="type">char</span>* FileBuffer = Read_exe();</span><br><span class="line">dos_header* pdh = (dos_header*)FileBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew +<span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line"><span class="type">int</span> SizeOfImage = (<span class="type">int</span>)poph-&gt;SizeOfImage;</span><br><span class="line"><span class="type">char</span>* ImageBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(SizeOfImage);</span><br><span class="line"><span class="built_in">memset</span>(ImageBuffer, <span class="number">0</span>, SizeOfImage);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> size_part1 = <span class="number">0</span>;<span class="comment">//计算头与节表的大小之和</span></span><br><span class="line">size_part1 = ((image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph))-&gt;PointerToRawData;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(ImageBuffer, FileBuffer, size_part1);    <span class="comment">//将文件头与节表复制到imagebuffer中</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> numofsections = (<span class="type">int</span>)(pph-&gt;NumberOfSection);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numofsections; i++)          <span class="comment">//循环将每个节复制到imagebuffer中</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* des = (<span class="type">char</span>*)((<span class="type">int</span>)ImageBuffer + pish-&gt;VirtualAddress);</span><br><span class="line"><span class="type">char</span>* src = (<span class="type">char</span>*)((<span class="type">int</span>)FileBuffer + pish-&gt;PointerToRawData);</span><br><span class="line"><span class="type">int</span> size = (<span class="type">int</span>)(pish-&gt;SizeOfRawData);</span><br><span class="line"><span class="built_in">memcpy</span>(des, src, size);</span><br><span class="line">pish++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ImageBuffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、将拉伸后的内容还原为原来的PE文件，并存盘</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>*  <span class="title function_">image_to_file</span><span class="params">(<span class="type">char</span>* ImageBuffer)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 完成初始化工作 */</span></span><br><span class="line"><span class="comment">//char* ImageBuffer = file_to_image();</span></span><br><span class="line">dos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">size = (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData) + (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;SizeOfRawData);</span><br><span class="line"><span class="type">char</span>* NewBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="built_in">memset</span>(NewBuffer, <span class="number">0</span>, size);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算头与节表的大小之和,将文件头与节表复制到newbuffer中 */</span></span><br><span class="line"><span class="type">int</span> size_part1 = <span class="number">0</span>;</span><br><span class="line">size_part1 = (<span class="type">int</span>)pish-&gt;VirtualAddress;</span><br><span class="line"><span class="built_in">memcpy</span>(NewBuffer, ImageBuffer, size_part1);<span class="comment">//将文件头与节表复制到Newbuffer中</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> numofsections = (<span class="type">int</span>)(pph-&gt;NumberOfSection);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numofsections; i++)<span class="comment">//循环将每个节复制到Newbuffer中</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* des = (<span class="type">char</span>*)((<span class="type">int</span>)NewBuffer + pish-&gt;PointerToRawData);</span><br><span class="line"><span class="type">char</span>* src = (<span class="type">char</span>*)((<span class="type">int</span>)ImageBuffer + pish-&gt;VirtualAddress);</span><br><span class="line"><span class="type">int</span> size = (<span class="type">int</span>)(pish-&gt;SizeOfRawData);</span><br><span class="line"><span class="built_in">memcpy</span>(des, src, size);</span><br><span class="line">pish++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存盘</span></span><br><span class="line">FILE* pfp = fopen(<span class="string">&quot;C:\\Documents and Settings\\easy\\桌面\\test.exe&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">fwrite(NewBuffer, size, <span class="number">1</span>, pfp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NewBuffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经测试，还原后的文件可以正常运行。</p><h1 id="RVA与FOA转化的实现"><a href="#RVA与FOA转化的实现" class="headerlink" title="RVA与FOA转化的实现"></a>RVA与FOA转化的实现</h1><p>不论是在以后分析PE文件，还是做其他相关的事情，RVA(内存中的偏移)和FOA(文件中的偏移)之间的相互转换都是很重要的。转换大体思路就是先判断该地址是位于PE头还是节中，若是在PE头中，则地址不变，若是在节中，则要找出该地址位于哪个节，然后计算差值即可。</p><p><strong>RVA转换为FOA</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">RVA_TO_FOA</span><span class="params">(<span class="type">char</span>* RVA)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span>* FileBuffer = <span class="built_in">Read_exe</span>();</span><br><span class="line"><span class="type">char</span>* ImageBuffer = <span class="built_in">file_to_image</span>();</span><br><span class="line"></span><br><span class="line">dos_header* pdh = (dos_header*)FileBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line">    <span class="comment">//如果该地址在头中，则不变</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="type">int</span>)RVA &lt;= poph-&gt;SizeOfHeaders)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> RVA;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//如果该地址在节中</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pph-&gt;NumberOfSection; i++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">//找出RVA位于哪个节</span></span><br><span class="line"><span class="keyword">if</span>((<span class="type">int</span>)RVA &gt;= (pish-&gt;VirtualAddress) &amp;&amp; (<span class="type">int</span>)RVA &lt; (pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress))</span><br><span class="line">&#123;</span><br><span class="line">                <span class="comment">//加上差值即可</span></span><br><span class="line"><span class="built_in">return</span> (RVA - pish-&gt;VirtualAddress) + pish-&gt;PointerToRawData;</span><br><span class="line">&#125;</span><br><span class="line">pish++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FOA转换为RVA代码基本一致，只是反过来而已。需要注意的是在ImageBuffer中，判断位于哪个节的依据是VirtualAddress+Misc，而在FileBuffer中判断的依据是PointerToRawData+SizeOfRawData。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;PE文件是Windows操作系统下使用的32位可执行文件格式。关于PE文件的结构以及各字段的意义，网络上有很详细的资料，这里不再赘述(或者用到的时候再说明)。本版块主要涉及Windows下的一些小应用。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>逆向分析：switch语句</title>
    <link href="http://example.com/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/"/>
    <id>http://example.com/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/</id>
    <published>2022-04-19T05:34:35.000Z</published>
    <updated>2022-04-20T05:04:33.812Z</updated>
    
    <content type="html"><![CDATA[<p>本章探究switch语句的反汇编表现形式及特点。</p><span id="more"></span><p><strong>1、先来看看当case分支较少时的反汇编代码</strong></p><p>测试代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Func</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">6:        switch(x)</span><br><span class="line">7:        &#123;</span><br><span class="line">0040D708 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class="line">0040D70B 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class="line">0040D70E 83 7D FC 01          cmp         dword ptr [ebp-4],1</span><br><span class="line">0040D712 74 0E                je          Func+32h (0040d722)</span><br><span class="line">0040D714 83 7D FC 02          cmp         dword ptr [ebp-4],2</span><br><span class="line">0040D718 74 17                je          Func+41h (0040d731)</span><br><span class="line">0040D71A 83 7D FC 03          cmp         dword ptr [ebp-4],3</span><br><span class="line">0040D71E 74 20                je          Func+50h (0040d740)</span><br><span class="line">0040D720 EB 2D                jmp         Func+5Fh (0040d74f)</span><br><span class="line">8:        case 1:</span><br><span class="line">9:            printf(&quot;1\n&quot;);</span><br><span class="line">0040D722 68 74 2F 42 00       push        offset string &quot;1\n&quot; (00422f74)</span><br><span class="line">0040D727 E8 34 39 FF FF       call        printf (00401060)</span><br><span class="line">0040D72C 83 C4 04             add         esp,4</span><br><span class="line">10:           break;</span><br><span class="line">0040D72F EB 2B                jmp         Func+6Ch (0040d75c)</span><br><span class="line">11:       case 2:</span><br><span class="line">12:           printf(&quot;2\n&quot;);</span><br><span class="line">0040D731 68 70 2F 42 00       push        offset string &quot;2\n&quot; (00422f70)</span><br><span class="line">0040D736 E8 25 39 FF FF       call        printf (00401060)</span><br><span class="line">0040D73B 83 C4 04             add         esp,4</span><br><span class="line">13:           break;</span><br><span class="line">0040D73E EB 1C                jmp         Func+6Ch (0040d75c)</span><br><span class="line">14:       case 3:</span><br><span class="line">15:           printf(&quot;3\n&quot;);</span><br><span class="line">0040D740 68 0C 21 42 00       push        offset string &quot;3\n&quot; (0042210c)</span><br><span class="line">0040D745 E8 16 39 FF FF       call        printf (00401060)</span><br><span class="line">0040D74A 83 C4 04             add         esp,4</span><br><span class="line">16:           break;</span><br><span class="line">0040D74D EB 0D                jmp         Func+6Ch (0040d75c)</span><br><span class="line">17:       default:</span><br><span class="line">18:           printf(&quot;0\n&quot;);</span><br><span class="line">0040D74F 68 6C 2F 42 00       push        offset string &quot;%d %d %d&quot; (00422f6c)</span><br><span class="line">0040D754 E8 07 39 FF FF       call        printf (00401060)</span><br><span class="line">0040D759 83 C4 04             add         esp,4</span><br><span class="line">19:           break;</span><br><span class="line">20:       &#125;</span><br></pre></td></tr></table></figure><p>就目前的情况来看，似乎与if…else语句没什么性能上的差异，只不过是把比较的代码全部放到了前面，但也是挨个依次比较判断。<strong>这种情况下与if…else语句没有本质上的区别</strong>。</p><p><strong>2、逐渐增加case的情况分支，观察反汇编代码的情况(何时生成大表)</strong></p><p>在VC++6.0编译器中，当分支有4个时，反汇编发生了变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">6:        switch(x)</span><br><span class="line">7:        &#123;</span><br><span class="line">0040D7C8 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class="line">0040D7CB 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class="line">0040D7CE 8B 4D FC             mov         ecx,dword ptr [ebp-4]</span><br><span class="line">0040D7D1 83 E9 01             sub         ecx,1;注意这里</span><br><span class="line">0040D7D4 89 4D FC             mov         dword ptr [ebp-4],ecx</span><br><span class="line">0040D7D7 83 7D FC 03          cmp         dword ptr [ebp-4],3</span><br><span class="line">0040D7DB 77 46                ja          $L42202+0Fh (0040d823)</span><br><span class="line">0040D7DD 8B 55 FC             mov         edx,dword ptr [ebp-4]</span><br><span class="line">0040D7E0 FF 24 95 41 D8 40 00 jmp         dword ptr [edx*4+40D841h];还有这里</span><br><span class="line">8:        case 1:</span><br><span class="line">9:            printf(&quot;1\n&quot;);</span><br><span class="line">0040D7E7 68 A8 2F 42 00       push        offset string &quot;1\n&quot; (00422fa8)</span><br><span class="line">0040D7EC E8 6F 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D7F1 83 C4 04             add         esp,4</span><br><span class="line">10:           break;</span><br><span class="line">0040D7F4 EB 3A                jmp         $L42202+1Ch (0040d830)</span><br><span class="line">11:       case 2:</span><br><span class="line">12:           printf(&quot;2\n&quot;);</span><br><span class="line">0040D7F6 68 74 2F 42 00       push        offset string &quot;2\n&quot; (00422f74)</span><br><span class="line">0040D7FB E8 60 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D800 83 C4 04             add         esp,4</span><br><span class="line">13:           break;</span><br><span class="line">0040D803 EB 2B                jmp         $L42202+1Ch (0040d830)</span><br><span class="line">14:       case 3:</span><br><span class="line">15:           printf(&quot;3\n&quot;);</span><br><span class="line">0040D805 68 70 2F 42 00       push        offset string &quot;3\n&quot; (00422f70)</span><br><span class="line">0040D80A E8 51 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D80F 83 C4 04             add         esp,4</span><br><span class="line">16:           break;</span><br><span class="line">0040D812 EB 1C                jmp         $L42202+1Ch (0040d830)</span><br><span class="line">17:       case 4:</span><br><span class="line">18:           printf(&quot;4\n&quot;);</span><br><span class="line">0040D814 68 0C 21 42 00       push        offset string &quot;4\n&quot; (0042210c)</span><br><span class="line">0040D819 E8 42 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D81E 83 C4 04             add         esp,4</span><br><span class="line">19:           break;</span><br><span class="line">0040D821 EB 0D                jmp         $L42202+1Ch (0040d830)</span><br><span class="line">20:       default:</span><br><span class="line">21:           printf(&quot;0\n&quot;);</span><br><span class="line">0040D823 68 6C 2F 42 00       push        offset string &quot;%d %d %d\n&quot; (00422f6c)</span><br><span class="line">0040D828 E8 33 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D82D 83 C4 04             add         esp,4</span><br><span class="line">22:           break;</span><br><span class="line">23:       &#125;</span><br></pre></td></tr></table></figure><p>这里有个问题，以正向的角度来看，根据传进来的值与4比较，如果比4大，那么跳转到default分支。然而在反汇编中，是将传进来的值减去1后(实际上是减去分支中的最小值)与3去比较。</p><p>接着往后分析，如果参数满足其中某一个分支，则不跳转到default，将参数传到了edx中，然后跳转到了一个地址中去。这个地址的样子是这样的：[edx*4+40D841h]。现在来看一下40D841h是什么。</p><p><img src="/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/1.PNG"></p><p>可以看到，在40D841h中存的是一张表，这个表里面有四个地址，分别对应的是switch中的四种情况。edx*4作为一个偏移来找到正确的表项。因此前面ecx-1的目的正是为了让分支的值从0开始，便于计算表的偏移。如果case的值是从2开始的，那么就应该是ecx-2。</p><p>上面生成的这张表就叫<strong>大表</strong>，表项是各个分支语句的地址。</p><p>这里已经可以看出来switch与if…else语句性能的差异了。if…else语句需要判断很多次是否满足条件，而switch在case很多的情况下，只需要一条跳转语句jmp dword ptr [edx*4+40D841h]就够了，性能完爆if…else语句。</p><p>接着做测试，当case的值连接但是顺序混乱时，仍然不影响大表的生成。读者可以自行做测试。</p><p><em>注：不一定每个编译器都是4条case才生成大表，不同编译器有不同的算法。</em></p><p><strong>3、将连续的10项中抹去1项或者2项，观察反汇编有无变化(观察大表空缺位置的处理)</strong></p><p>测试代码及其反汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">6:        switch(x)</span><br><span class="line">7:        &#123;</span><br><span class="line">0040D7C8 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class="line">0040D7CB 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class="line">0040D7CE 8B 4D FC             mov         ecx,dword ptr [ebp-4]</span><br><span class="line">0040D7D1 83 E9 01             sub         ecx,1</span><br><span class="line">0040D7D4 89 4D FC             mov         dword ptr [ebp-4],ecx</span><br><span class="line">0040D7D7 83 7D FC 09          cmp         dword ptr [ebp-4],9</span><br><span class="line">0040D7DB 0F 87 82 00 00 00    ja          $L42210+0Fh (0040d863)</span><br><span class="line">0040D7E1 8B 55 FC             mov         edx,dword ptr [ebp-4]</span><br><span class="line">0040D7E4 FF 24 95 81 D8 40 00 jmp         dword ptr [edx*4+40D881h]</span><br><span class="line">8:        case 1:</span><br><span class="line">9:            printf(&quot;1\n&quot;);</span><br><span class="line">0040D7EB 68 B8 2F 42 00       push        offset string &quot;1\n&quot; (00422fb8)</span><br><span class="line">0040D7F0 E8 6B 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D7F5 83 C4 04             add         esp,4</span><br><span class="line">10:           break;</span><br><span class="line">0040D7F8 EB 76                jmp         $L42210+1Ch (0040d870)</span><br><span class="line">11:       case 2:</span><br><span class="line">12:           printf(&quot;2\n&quot;);</span><br><span class="line">0040D7FA 68 B4 2F 42 00       push        offset string &quot;2\n&quot; (00422fb4)</span><br><span class="line">0040D7FF E8 5C 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D804 83 C4 04             add         esp,4</span><br><span class="line">13:           break;</span><br><span class="line">0040D807 EB 67                jmp         $L42210+1Ch (0040d870)</span><br><span class="line">14:       case 4:</span><br><span class="line">15:           printf(&quot;4\n&quot;);</span><br><span class="line">0040D809 68 B0 2F 42 00       push        offset string &quot;5\n&quot; (00422fb0)</span><br><span class="line">0040D80E E8 4D 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D813 83 C4 04             add         esp,4</span><br><span class="line">16:           break;</span><br><span class="line">0040D816 EB 58                jmp         $L42210+1Ch (0040d870)</span><br><span class="line">17:       case 6:</span><br><span class="line">18:           printf(&quot;6\n&quot;);</span><br><span class="line">0040D818 68 AC 2F 42 00       push        offset string &quot;6\n&quot; (00422fac)</span><br><span class="line">0040D81D E8 3E 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D822 83 C4 04             add         esp,4</span><br><span class="line">19:           break;</span><br><span class="line">0040D825 EB 49                jmp         $L42210+1Ch (0040d870)</span><br><span class="line">20:       case 7:</span><br><span class="line">21:           printf(&quot;7\n&quot;);</span><br><span class="line">0040D827 68 A8 2F 42 00       push        offset string &quot;7\n&quot; (00422fa8)</span><br><span class="line">0040D82C E8 2F 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D831 83 C4 04             add         esp,4</span><br><span class="line">22:           break;</span><br><span class="line">0040D834 EB 3A                jmp         $L42210+1Ch (0040d870)</span><br><span class="line">23:       case 8:</span><br><span class="line">24:           printf(&quot;8\n&quot;);</span><br><span class="line">0040D836 68 74 2F 42 00       push        offset string &quot;8\n&quot; (00422f74)</span><br><span class="line">0040D83B E8 20 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D840 83 C4 04             add         esp,4</span><br><span class="line">25:           break;</span><br><span class="line">0040D843 EB 2B                jmp         $L42210+1Ch (0040d870)</span><br><span class="line">26:       case 9:</span><br><span class="line">27:           printf(&quot;9\n&quot;);</span><br><span class="line">0040D845 68 70 2F 42 00       push        offset string &quot;9\n&quot; (00422f70)</span><br><span class="line">0040D84A E8 11 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D84F 83 C4 04             add         esp,4</span><br><span class="line">28:           break;</span><br><span class="line">0040D852 EB 1C                jmp         $L42210+1Ch (0040d870)</span><br><span class="line">29:       case 10:</span><br><span class="line">30:           printf(&quot;10\n&quot;);</span><br><span class="line">0040D854 68 0C 21 42 00       push        offset string &quot;10\n&quot; (0042210c)</span><br><span class="line">0040D859 E8 02 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D85E 83 C4 04             add         esp,4</span><br><span class="line">31:           break;</span><br><span class="line">0040D861 EB 0D                jmp         $L42210+1Ch (0040d870)</span><br><span class="line">32:       default:</span><br><span class="line">33:           printf(&quot;0\n&quot;);</span><br><span class="line">0040D863 68 6C 2F 42 00       push        offset string &quot;%d %d %d\n&quot; (00422f6c)</span><br><span class="line">0040D868 E8 F3 37 FF FF       call        printf (00401060)</span><br><span class="line">0040D86D 83 C4 04             add         esp,4</span><br><span class="line">34:           break;</span><br><span class="line">35:       &#125;</span><br></pre></td></tr></table></figure><p>在x从1-10的分支中删除掉了3和5两个分支，反汇编代码基本的结构没有改变，仍然生成了大表，查看一下大表</p><p><img src="/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/3.PNG"></p><p>可以发现，表里面仍然有十个地址，观察一下删除掉的3和5分支，可以看到表里面对应的内容为40D863，这个地址为default的地址。因此可以而出结论，在连续数据有个别缺失时，编译器会进行填补，填补的内容为default的地址。</p><p><strong>4、在10项中连续抹去，不要抹去最大值和最小值(观察何时生成小表)</strong></p><p>在上面删除一两项时，编译器会用default的地址填充空缺的位置。但是这样会有一个问题，就是会造成内存的浪费，因为default的地址本来就写在那里，不需要去填充它。因此，编译器不会允许无限制的填充下去。</p><p>经测试，在VC++6.0中，连续空缺6个分支，switch的反汇编会发生变化。</p><p>测试代码及其反汇编如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">switch(x)</span><br><span class="line">7:        &#123;</span><br><span class="line">0040D7C8 8B 45 08             mov         eax,dword ptr [ebp+8]</span><br><span class="line">0040D7CB 89 45 FC             mov         dword ptr [ebp-4],eax</span><br><span class="line">0040D7CE 8B 4D FC             mov         ecx,dword ptr [ebp-4]</span><br><span class="line">0040D7D1 83 E9 01             sub         ecx,1</span><br><span class="line">0040D7D4 89 4D FC             mov         dword ptr [ebp-4],ecx</span><br><span class="line">0040D7D7 83 7D FC 09          cmp         dword ptr [ebp-4],9</span><br><span class="line">0040D7DB 77 4E                ja          $L42202+0Fh (0040d82b)</span><br><span class="line">0040D7DD 8B 45 FC             mov         eax,dword ptr [ebp-4]</span><br><span class="line">0040D7E0 33 D2                xor         edx,edx</span><br><span class="line">0040D7E2 8A 90 5D D8 40 00    mov         dl,byte ptr  (0040d85d)[eax];注意这里</span><br><span class="line">0040D7E8 FF 24 95 49 D8 40 00 jmp         dword ptr [edx*4+40D849h]</span><br><span class="line">8:        case 1:</span><br><span class="line">9:            printf(&quot;1\n&quot;);</span><br><span class="line">0040D7EF 68 A8 2F 42 00       push        offset string &quot;7\n&quot; (00422fa8)</span><br><span class="line">0040D7F4 E8 67 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D7F9 83 C4 04             add         esp,4</span><br><span class="line">10:           break;</span><br><span class="line">0040D7FC EB 3A                jmp         $L42202+1Ch (0040d838)</span><br><span class="line">11:       case 8:</span><br><span class="line">12:           printf(&quot;8\n&quot;);</span><br><span class="line">0040D7FE 68 74 2F 42 00       push        offset string &quot;8\n&quot; (00422f74)</span><br><span class="line">0040D803 E8 58 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D808 83 C4 04             add         esp,4</span><br><span class="line">13:           break;</span><br><span class="line">0040D80B EB 2B                jmp         $L42202+1Ch (0040d838)</span><br><span class="line">14:       case 9:</span><br><span class="line">15:           printf(&quot;9\n&quot;);</span><br><span class="line">0040D80D 68 70 2F 42 00       push        offset string &quot;9\n&quot; (00422f70)</span><br><span class="line">0040D812 E8 49 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D817 83 C4 04             add         esp,4</span><br><span class="line">16:           break;</span><br><span class="line">0040D81A EB 1C                jmp         $L42202+1Ch (0040d838)</span><br><span class="line">17:       case 10:</span><br><span class="line">18:           printf(&quot;10\n&quot;);</span><br><span class="line">0040D81C 68 0C 21 42 00       push        offset string &quot;10\n&quot; (0042210c)</span><br><span class="line">0040D821 E8 3A 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D826 83 C4 04             add         esp,4</span><br><span class="line">19:           break;</span><br><span class="line">0040D829 EB 0D                jmp         $L42202+1Ch (0040d838)</span><br><span class="line">20:       default:</span><br><span class="line">21:           printf(&quot;0\n&quot;);</span><br><span class="line">0040D82B 68 6C 2F 42 00       push        offset string &quot;%d %d %d\n&quot; (00422f6c)</span><br><span class="line">0040D830 E8 2B 38 FF FF       call        printf (00401060)</span><br><span class="line">0040D835 83 C4 04             add         esp,4</span><br><span class="line">22:           break;</span><br><span class="line">23:       &#125;</span><br></pre></td></tr></table></figure><p>大体的结构没有改变，但是这里面多出来了两行，将ecx-1后传给了eax，eax作为索引在小表(0040d85d)处获取内容。然后再将获取到的内容传给edx，edx再作为索引去大表(40D849)得到相应的地址。先来看看大表的内容：<img src="/2022/04/19/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aswitch%E8%AF%AD%E5%8F%A5/4.PNG"></p><p>可以发现，这时大表里面只有5个地址，分别是四个分支和一个default。小表紧跟在大表的后面。小表里面的0、1、2、3分别索引到大表的内容是四个分支，4索引到的是大表中default的地址。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本章探究switch语句的反汇编表现形式及特点。&lt;/p&gt;</summary>
    
    
    
    <category term="逆向分析" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
    <category term="逆向分析" scheme="http://example.com/tags/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>结构体字节对齐</title>
    <link href="http://example.com/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/"/>
    <id>http://example.com/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/</id>
    <published>2022-04-18T08:29:21.000Z</published>
    <updated>2022-04-19T05:25:54.502Z</updated>
    
    <content type="html"><![CDATA[<p>本节来分析C语言中结构体的字节对齐</p><span id="more"></span><p><strong>1、先来测试几个结构体的大小</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span>  a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    __int64 b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> a ;</span><br><span class="line">    __int64 b ;</span><br><span class="line">    <span class="type">char</span> c ;</span><br><span class="line">    <span class="type">char</span> d ;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行得到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(Test1) = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">sizeof</span>(Test2) = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">sizeof</span>(Test3) = <span class="number">24</span>;</span><br></pre></td></tr></table></figure><p><strong>2、探究结构体的内存分布</strong></p><p>#pragma pack的基本用法为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(n)</span></span><br><span class="line"><span class="comment">//结构体。。。</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack()</span></span><br><span class="line"><span class="comment">//对齐参数：n为字节对齐数，其取值为1、2、4、8，默认是8。</span></span><br></pre></td></tr></table></figure><p>如果这个n值比结构体成员的sizeof值小，那么该成员的偏移量应该以此值为准。</p><p>也就是说，结构体成员的偏移量应该取二者的最小值。</p><p>以前面的Test2结构体为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    __int64 b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不同的对齐方式对应的内存分布图如下：</p><p><img src="/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/1.PNG"><img src="/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/2.PNG"><img src="/2022/04/18/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90/3.PNG"></p><p>由于默认是最后的8字节对齐，因此sizeof(Test2) &#x3D; 24。</p><p><em>在这里给一个建议，按照数据类型由小到大的顺序进行书写。</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本节来分析C语言中结构体的字节对齐&lt;/p&gt;</summary>
    
    
    
    <category term="逆向分析" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
    <category term="逆向分析" scheme="http://example.com/tags/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>逆向分析：参数、返回值和数组</title>
    <link href="http://example.com/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%8F%82%E6%95%B0%E3%80%81%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8C%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%8F%82%E6%95%B0%E3%80%81%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8C%E6%95%B0%E7%BB%84/</id>
    <published>2022-04-18T02:04:28.000Z</published>
    <updated>2022-04-18T08:09:03.397Z</updated>
    
    <content type="html"><![CDATA[<p>这次来分析参数、返回值和数组在反汇编中的表现形式。</p><span id="more"></span><h1 id="返回值的传递"><a href="#返回值的传递" class="headerlink" title="返回值的传递"></a>返回值的传递</h1><p>以char、short和int类型的返回值为例，先来看看char类型的返回值，测试代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> g_r = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//返回值类型为char的函数</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">Fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> g_r + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a = Fun();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fun函数在反汇编中的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">00401030 55                   push        ebp</span><br><span class="line">00401031 8B EC                mov         ebp,esp</span><br><span class="line">00401033 83 EC 40             sub         esp,40h</span><br><span class="line">00401036 53                   push        ebx</span><br><span class="line">00401037 56                   push        esi</span><br><span class="line">00401038 57                   push        edi</span><br><span class="line">00401039 8D 7D C0             lea         edi,[ebp-40h]</span><br><span class="line">0040103C B9 10 00 00 00       mov         ecx,10h</span><br><span class="line">00401041 B8 CC CC CC CC       mov         eax,0CCCCCCCCh</span><br><span class="line">00401046 F3 AB                rep stos    dword ptr [edi]</span><br><span class="line">00401048 0F BE 05 14 6B 42 00 movsx       eax,byte ptr [g_r (00426b14)];注意这里的byte</span><br><span class="line">0040104F 83 C0 01             add         eax,1</span><br><span class="line">00401052 5F                   pop         edi</span><br><span class="line">00401053 5E                   pop         esi</span><br><span class="line">00401054 5B                   pop         ebx</span><br><span class="line">00401055 8B E5                mov         esp,ebp</span><br><span class="line">00401057 5D                   pop         ebp</span><br><span class="line">00401058 C3                   ret</span><br></pre></td></tr></table></figure><p>可以看到，这里用全局变量的符号位填入eax中，然后再向eax中低8位（byte）填入这个全局变量的值。</p><p>当返回值的类型变为short和int时，byte也相应的变为了word和dword。</p><p>由此可见，返回值的传递类型在汇编与源代码中是一致的。</p><h1 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h1><p>以char、short和int类型的参数为例，先来看看char类型的参数，测试代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Function</span><span class="params">(<span class="type">char</span> x,<span class="type">char</span> y,<span class="type">char</span> z)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="type">char</span> c = <span class="number">3</span>;</span><br><span class="line">Function(a, b, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数调用处查看反汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">11:       char a = 1;</span><br><span class="line">00401068 C6 45 FC 01          mov         byte ptr [ebp-4],1</span><br><span class="line">12:       char b = 2;</span><br><span class="line">0040106C C6 45 F8 02          mov         byte ptr [ebp-8],2</span><br><span class="line">13:       char c = 3;</span><br><span class="line">00401070 C6 45 F4 03          mov         byte ptr [ebp-0Ch],3</span><br><span class="line">14:       Function(a, b, c);</span><br><span class="line">00401074 8A 45 F4             mov         al,byte ptr [ebp-0Ch]</span><br><span class="line">00401077 50                   push        eax</span><br><span class="line">00401078 8A 4D F8             mov         cl,byte ptr [ebp-8]</span><br><span class="line">0040107B 51                   push        ecx</span><br><span class="line">0040107C 8A 55 FC             mov         dl,byte ptr [ebp-4]</span><br><span class="line">0040107F 52                   push        edx</span><br><span class="line">00401080 E8 80 FF FF FF       call        @ILT+0(Function) (00401005)</span><br><span class="line">00401085 83 C4 0C             add         esp,0Ch</span><br></pre></td></tr></table></figure><p>可以看到，当参数以char类型传递时，虽然是将byte（1个字节）传给了eax，但是在调用函数前仍然push的是eax（4个字节）。当char类型换成short和int时，不同的只是eax寄存器的利用空间。因此，当参数是char和short类型时，造成了空间的浪费。</p><p><em><u>因此建议，传入整数类型的参数时，应该使用int类型（4个字节）。</u></em></p><p>补充一个思考题，代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数定义：</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Plus</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入口函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">Plus(x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序打印出来的结果是1，而不是2。原因在反汇编代码中很容易看出来，在调用函数前，将x重新push了一次到Plus函数的栈中。因此Plus操作的是Plus函数栈中的那个x，而打印原来的x值没有变。</p><h1 id="局部变量的内存分配"><a href="#局部变量的内存分配" class="headerlink" title="局部变量的内存分配"></a>局部变量的内存分配</h1><p>测试程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">short</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="type">short</span> d = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试程序的反汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6:        char a = 1;</span><br><span class="line">0040F028 C6 45 FC 01          mov         byte ptr [ebp-4],1</span><br><span class="line">7:        char b = 2;</span><br><span class="line">0040F02C C6 45 F8 02          mov         byte ptr [ebp-8],2</span><br><span class="line">8:</span><br><span class="line">9:        short c = 3;</span><br><span class="line">0040F030 66 C7 45 F4 03 00    mov         word ptr [ebp-0Ch],offset Function+24h (0040f034)</span><br><span class="line">10:       short d = 4;</span><br><span class="line">0040F036 66 C7 45 F0 04 00    mov         word ptr [ebp-10h],offset Function+2Ah (0040f03a)</span><br></pre></td></tr></table></figure><p>可以看到，不管局部变量是char还是short类型，尽管他们在赋值的时候是按照对应的长度byte(1字节)和word(2字节)来赋值，但是这些变量之间的间隔仍然是4字节。因此可以总结如下：</p><p>1、小于32位的局部变量，空间在分配时，按32位分配。</p><p>2、使用时按实际的宽度使用。</p><p>3、不要定义char&#x2F;short类型的局部变量。</p><p>4、<u>参数与局部变量没有本质区别，都是局部变量，都在栈中分配。</u></p><p>5、完全可以把参数当初局部变量使用。</p><h1 id="数组的反汇编"><a href="#数组的反汇编" class="headerlink" title="数组的反汇编"></a>数组的反汇编</h1><p>先来看局部变量是如何入栈的，测试程序及反汇编如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">6:        int v_0 = 1;</span><br><span class="line">00401038 C7 45 FC 01 00 00 00 mov         dword ptr [ebp-4],1</span><br><span class="line">7:        int v_1 = 2;</span><br><span class="line">0040103F C7 45 F8 02 00 00 00 mov         dword ptr [ebp-8],2</span><br><span class="line">8:        int v_2 = 3;</span><br><span class="line">00401046 C7 45 F4 03 00 00 00 mov         dword ptr [ebp-0Ch],3</span><br><span class="line">9:        int v_3 = 4;</span><br><span class="line">0040104D C7 45 F0 04 00 00 00 mov         dword ptr [ebp-10h],4</span><br><span class="line">10:       int v_4 = 5;</span><br><span class="line">00401054 C7 45 EC 05 00 00 00 mov         dword ptr [ebp-14h],5</span><br><span class="line">11:       int v_5 = 6;</span><br><span class="line">0040105B C7 45 E8 06 00 00 00 mov         dword ptr [ebp-18h],6</span><br><span class="line">12:       int v_6 = 7;</span><br><span class="line">00401062 C7 45 E4 07 00 00 00 mov         dword ptr [ebp-1Ch],7</span><br><span class="line">13:       int v_7 = 8;</span><br><span class="line">00401069 C7 45 E0 08 00 00 00 mov         dword ptr [ebp-20h],8</span><br><span class="line">14:       int v_8 = 9;</span><br><span class="line">00401070 C7 45 DC 09 00 00 00 mov         dword ptr [ebp-24h],9</span><br><span class="line">15:       int v_9 = 10;</span><br><span class="line">00401077 C7 45 D8 0A 00 00 00 mov         dword ptr [ebp-28h],0Ah</span><br></pre></td></tr></table></figure><p>可以看到，这些局部变量是按定义顺序依次入栈的。</p><p>然后来看看将它们写成数组时，反汇编是什么样子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">6:        int arr[10] = &#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">00401038 C7 45 D8 01 00 00 00 mov         dword ptr [ebp-28h],1</span><br><span class="line">0040103F C7 45 DC 02 00 00 00 mov         dword ptr [ebp-24h],2</span><br><span class="line">00401046 C7 45 E0 03 00 00 00 mov         dword ptr [ebp-20h],3</span><br><span class="line">0040104D C7 45 E4 04 00 00 00 mov         dword ptr [ebp-1Ch],4</span><br><span class="line">00401054 C7 45 E8 05 00 00 00 mov         dword ptr [ebp-18h],5</span><br><span class="line">0040105B C7 45 EC 06 00 00 00 mov         dword ptr [ebp-14h],6</span><br><span class="line">00401062 C7 45 F0 07 00 00 00 mov         dword ptr [ebp-10h],7</span><br><span class="line">00401069 C7 45 F4 08 00 00 00 mov         dword ptr [ebp-0Ch],8</span><br><span class="line">00401070 C7 45 F8 09 00 00 00 mov         dword ptr [ebp-8],9</span><br><span class="line">00401077 C7 45 FC 0A 00 00 00 mov         dword ptr [ebp-4],0Ah</span><br></pre></td></tr></table></figure><p>可以看到，当写成数组时，数据存入栈的顺序是从后向前，即先存最后的10，依次向前。与前面正好相反。</p><h1 id="补充几个小练习"><a href="#补充几个小练习" class="headerlink" title="补充几个小练习"></a>补充几个小练习</h1><p>1、返回值超过32位时，存在哪里？用long long(__int64)类型做实验</p><p>测试代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">Function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">__int64 x = <span class="number">0x1234567890</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看反汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">6:        __int64 x = 0x1234567890;</span><br><span class="line">00401038 C7 45 F8 90 78 56 34 mov         dword ptr [ebp-8],34567890h</span><br><span class="line">0040103F C7 45 FC 12 00 00 00 mov         dword ptr [ebp-4],12h</span><br><span class="line">7:        return x;</span><br><span class="line">00401046 8B 45 F8             mov         eax,dword ptr [ebp-8]</span><br><span class="line">00401049 8B 55 FC             mov         edx,dword ptr [ebp-4]</span><br></pre></td></tr></table></figure><p>可以看到，返回值位64位时，使用了两个寄存器来存储。</p><p>2、探究char arr[3] &#x3D; {1,2,3};与 char arr[4] &#x3D; {1,2,3,4};哪个更节省空间？</p><p>先来看char arr[3] &#x3D; {1,2,3};的反汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6:        char arr[3] = &#123;1, 2, 3&#125;;</span><br><span class="line">00401038 C6 45 FC 01          mov         byte ptr [ebp-4],1</span><br><span class="line">0040103C C6 45 FD 02          mov         byte ptr [ebp-3],2</span><br><span class="line">00401040 C6 45 FE 03          mov         byte ptr [ebp-2],3</span><br></pre></td></tr></table></figure><p>然后再来看char arr[4] &#x3D; {1,2,3,4};的反汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6:        char arr[4] = &#123;1, 2, 3, 4&#125;;</span><br><span class="line">00401038 C6 45 FC 01          mov         byte ptr [ebp-4],1</span><br><span class="line">0040103C C6 45 FD 02          mov         byte ptr [ebp-3],2</span><br><span class="line">00401040 C6 45 FE 03          mov         byte ptr [ebp-2],3</span><br><span class="line">00401044 C6 45 FF 04          mov         byte ptr [ebp-1],4</span><br></pre></td></tr></table></figure><p>分别看到它们的反汇编代码，占用的总的内存是一样大小的，反而第一种有一个字节没有被使用，浪费掉了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这次来分析参数、返回值和数组在反汇编中的表现形式。&lt;/p&gt;</summary>
    
    
    
    <category term="逆向分析" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
    <category term="逆向分析" scheme="http://example.com/tags/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>逆向分析：循环语句</title>
    <link href="http://example.com/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <id>http://example.com/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</id>
    <published>2022-04-18T01:05:26.000Z</published>
    <updated>2022-04-18T01:45:33.865Z</updated>
    
    <content type="html"><![CDATA[<p>上一次学习了全局变量和局部变量的特点，并分析了if语句在反汇编中的样子，今天来分析<strong>循环语句</strong>。</p><span id="more"></span><h1 id="do…while循环语句"><a href="#do…while循环语句" class="headerlink" title="do…while循环语句"></a>do…while循环语句</h1><p>do…while语句语法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//执行代码</span></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>(表达式)</span><br></pre></td></tr></table></figure><p>do…while语句反汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DO_BEGIN地址:</span><br><span class="line">影响标志位的指令</span><br><span class="line">jxx DO_BEGIN</span><br></pre></td></tr></table></figure><p>例如</p><p><img src="/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/1.PNG"></p><p>总结：</p><p>1、根据条件跳转指令所跳转到的地址，可以得到循环语句块的起始地址。</p><p>2、根据条件跳转指令所在的地址，可以得到循环语句块的结束地址。</p><p>3、条件跳转的逻辑与源码相同。</p><h1 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h1><p>while语句语法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while语句反汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WHILE_BEGIN:</span><br><span class="line">影响标志位的指令</span><br><span class="line">jxx WHILE_END ;条件成立跳转到循环语句块结尾处</span><br><span class="line">......</span><br><span class="line">jmp WHILE_BEGIN ;跳转到条件比较处</span><br><span class="line">WHILE_END:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如</p><p><img src="/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/2.PNG"></p><p>总结：</p><p>1、根据条件跳转指令所跳转到的地址，可以得到循环语句块的结束地址。</p><p>2、根据jmp指令所跳转到的地址，可以得到循环语句块的起始地址。</p><p>3、在还原while 比较时，条件跳转的逻辑与源码相反</p><h1 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h1><p>for语句语法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>；表达式<span class="number">2</span>；表达式<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环的执行次序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">表达式1</span><br><span class="line">表达式2</span><br><span class="line">执行的代码(大括号里面的内容)</span><br><span class="line">表达式3</span><br><span class="line"></span><br><span class="line">表达式2 //如果表达式2成立</span><br><span class="line">执行的代码(大括号里面的内容)</span><br><span class="line">表达式3</span><br><span class="line"></span><br><span class="line">表达式2 //如果表达式2成立</span><br><span class="line">执行的代码(大括号里面的内容)</span><br><span class="line">表达式3</span><br><span class="line"></span><br><span class="line">表达式2 //如果不成立</span><br><span class="line">跳出循环</span><br></pre></td></tr></table></figure><p>例如</p><p><img src="/2022/04/18/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/3.PNG"></p><p>总结：</p><p>1、第一个jmp 指令之前为赋初值部分。</p><p>2、第一个jmp 指令所跳转的地址为循环条件判定部分起始。</p><p>3、判断条件后面的跳转指令条件成立时跳转的循环体外面。</p><p>4、条件判断跳转指令所指向的地址上面有一个jmp，jmp地址为表达式3的起始位置。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一次学习了全局变量和局部变量的特点，并分析了if语句在反汇编中的样子，今天来分析&lt;strong&gt;循环语句&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="逆向分析" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
    <category term="逆向分析" scheme="http://example.com/tags/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>逆向分析：if语句</title>
    <link href="http://example.com/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/"/>
    <id>http://example.com/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/</id>
    <published>2022-04-16T07:25:09.000Z</published>
    <updated>2022-04-17T10:39:32.909Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习完了滴水海哥的逆向初级课程，复习一下，做一下记录。</p><span id="more"></span><h1 id="全局变量与局部变量"><a href="#全局变量与局部变量" class="headerlink" title="全局变量与局部变量"></a>全局变量与局部变量</h1><h2 id="全局变量的特点"><a href="#全局变量的特点" class="headerlink" title="全局变量的特点"></a>全局变量的特点</h2><p>1、全局变量在程序编译完成后地址就已经确定下来了，只要程序启动，全局变量就已经存在了。启动后里面是否有值，取决于声明时是否给定了初始值，如果没有，默认是0。</p><p>2、全局变量的值可以被所有函数所修改，里面存储的是最后一次修改的值。</p><p>3、全局变量所占内存会一直存在，直到整个进程结束。</p><p>4、全局变量的反汇编识别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOV 寄存器,byte/word/dword ptr ds:[0x12345678]</span><br></pre></td></tr></table></figure><p>通过寄存器的宽度，或者byte&#x2F;word&#x2F;dword 来判断全局变量的宽度。如下图：</p><p><img src="/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416155522649.png"></p><h2 id="局部变量的特点"><a href="#局部变量的特点" class="headerlink" title="局部变量的特点"></a>局部变量的特点</h2><p>1、局部变量在程序编译完成后并没有分配固定的地址。</p><p>2、在所属的方法没有被调用时，局部变量并不会分配内存地址，只有当所属的程序被调用了，才会在堆栈中分配内存。</p><p>3、当局部变量所属的方法执行完毕后，局部变量所占用的内存将变成垃圾数据，局部变量消失。</p><p>4、局部变量只能在方法内部使用，函数A无法使用函数B的局部变量。</p><p>5、局部变量的反汇编识别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ebp-4]</span><br><span class="line">[ebp-8]</span><br><span class="line">[ebp-C]</span><br></pre></td></tr></table></figure><h1 id="函数参数分析"><a href="#函数参数分析" class="headerlink" title="函数参数分析"></a>函数参数分析</h1><p>如何判断函数有几个参数，以及分别是什么（一般情况）：</p><p>步骤一：观察调用处的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push 3</span><br><span class="line">push 2</span><br><span class="line">push 1</span><br><span class="line">call 0040100f</span><br></pre></td></tr></table></figure><p>步骤二：找到平衡堆栈的代码继续论证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call 0040100f</span><br><span class="line">add esp, 0Ch//外平栈</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret 4/8/0xC/0x10//内平栈</span><br></pre></td></tr></table></figure><p>两者综合起来分析即可。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> g_r;</span><br><span class="line"><span class="comment">//外平栈，从右至左的顺序压参数入栈</span></span><br><span class="line"><span class="type">void</span> __cdecl <span class="title function_">Function1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span><br><span class="line">&#123;</span><br><span class="line">g_r = x+y+z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//内平栈，从右至左的顺序压参数入栈</span></span><br><span class="line"><span class="type">void</span> __stdcall <span class="title function_">Function2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span><br><span class="line">&#123;</span><br><span class="line">g_r = x+y+z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//内平栈，头两个DWORD（4字节）类型或者占更少字节的参数被放入寄存器，其他剩下的参数按从右到左的顺序压入栈</span></span><br><span class="line"><span class="comment">//寄存器一般是ECX和EDX</span></span><br><span class="line"><span class="type">void</span> __fastcall <span class="title function_">Function3</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span><br><span class="line">&#123;</span><br><span class="line">g_r = x+y+z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416162401815.png"></p><p>但是上面的分析是一般情况，可能出现问题：</p><p>1、参数传递未必都是通过堆栈，还可能通过使用寄存器（比如fastcall调用约定）。</p><p>2、函数调用处的代码无法查看，只能看到函数内部的。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">00401050   push        ebp</span><br><span class="line">00401051   mov         ebp,esp</span><br><span class="line">00401053   sub         esp,48h</span><br><span class="line">00401056   push        ebx</span><br><span class="line">00401057   push        esi</span><br><span class="line">00401058   push        edi</span><br><span class="line">00401059   push        ecx</span><br><span class="line">0040105A   lea         edi,[ebp-48h]</span><br><span class="line">0040105D   mov         ecx,12h</span><br><span class="line">00401062   mov         eax,0CCCCCCCCh</span><br><span class="line">00401067   rep stos    dword ptr [edi]</span><br><span class="line">00401069   pop         ecx</span><br><span class="line">0040106A   mov         dword ptr [ebp-8],edx//注意</span><br><span class="line">0040106D   mov         dword ptr [ebp-4],ecx//注意</span><br><span class="line">00401070   mov         eax,dword ptr [ebp-4]</span><br><span class="line">00401073   add         eax,dword ptr [ebp-8]</span><br><span class="line">00401076   add         eax,dword ptr [ebp+8]</span><br><span class="line">00401079   mov         [g_x (00427958)],eax</span><br><span class="line">0040107E   pop         edi</span><br><span class="line">0040107F   pop         esi</span><br><span class="line">00401080   pop         ebx</span><br><span class="line">00401081   mov         esp,ebp</span><br><span class="line">00401083   pop         ebp</span><br><span class="line">00401084   ret         4</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>分析步骤：</strong></p><p>1、不考虑ebp和esp。</p><p>2、只找<strong>给别人赋值的寄存器</strong>，eax&#x2F;ecx&#x2F;edx&#x2F;ebx&#x2F;esi&#x2F;edi。</p><p>3、找到以后追查其来源，如果，该寄存器中的值不是在函数内存赋值的，那一定是传进来的参数。</p><p>公式一：寄存器 + ret  4 &#x3D; 参数个数</p><p>公式二：寄存器 + [ebp+8] +[ebp+0x] &#x3D; 参数个数</p><h1 id="if语句逆向分析"><a href="#if语句逆向分析" class="headerlink" title="if语句逆向分析"></a>if语句逆向分析</h1><p>函数内部代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">00401030   push        ebp</span><br><span class="line">00401031   mov         ebp,esp</span><br><span class="line">00401033   sub         esp,40h</span><br><span class="line">00401036   push        ebx</span><br><span class="line">00401037   push        esi</span><br><span class="line">00401038   push        edi</span><br><span class="line">00401039   lea         edi,[ebp-40h]</span><br><span class="line">0040103C   mov         ecx,10h</span><br><span class="line">00401041   mov         eax,0CCCCCCCCh</span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">00401046   rep stos    dword ptr [edi]</span><br><span class="line">00401048   mov         eax,dword ptr [ebp+8]</span><br><span class="line">0040104B   cmp         eax,dword ptr [ebp+0Ch]</span><br><span class="line">0040104E   jle         00401059</span><br><span class="line">00401050   mov         ecx,dword ptr [ebp+8]</span><br><span class="line">00401053   mov         dword ptr [004225c4],ecx</span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">00401059   pop         edi</span><br><span class="line">0040105A   pop         esi</span><br><span class="line">0040105B   pop         ebx</span><br><span class="line">0040105C   mov         esp,ebp</span><br><span class="line">0040105E   pop         ebp</span><br><span class="line">0040105F   ret</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>函数内部功能分析：</strong></p><p>1、分析参数：[ebp+8]：X[ebp+0Ch]：Y</p><p>2、分析局部变量：无</p><p>3、分析全局变量：mov   dword ptr [004225c4],ecx</p><p>4、功能分析：将参数X存到EAX中，然后比较EAX与参数Y的大小，如果X&lt;&#x3D;Y 那么跳转到00401059的位置，否则，将X的值存储到全局变量中</p><p>5、返回值分析：无</p><h1 id="if…else语句逆向分析"><a href="#if…else语句逆向分析" class="headerlink" title="if…else语句逆向分析"></a>if…else语句逆向分析</h1><p><strong>if…else语句反汇编判断：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IF_BEGIN:</span><br><span class="line">先执行各类影响标志位的指令</span><br><span class="line">jxx ELSE_BEGIN</span><br><span class="line">......</span><br><span class="line">IF_END:</span><br><span class="line">jmp END</span><br><span class="line">ELSE_BEGIN：</span><br><span class="line">......</span><br><span class="line">ELSE_END：</span><br><span class="line">END：</span><br></pre></td></tr></table></figure><p><strong>特点分析：</strong></p><p>1、如果不跳转，那么会执行到jmp处，jmp直接跳转到END处</p><p>2、如果跳转，则会直接跳过jmp END处的代码，直接执行后面的代码</p><p><strong>总结：</strong>第一个jxx跳转的地址前面有一个jmp ,可以判断是if…else…语句</p><p><strong>案例分析：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">004010B0   push        ebp</span><br><span class="line">004010B1   mov         ebp,esp</span><br><span class="line">004010B3   sub         esp,44h</span><br><span class="line">004010B6   push        ebx</span><br><span class="line">004010B7   push        esi</span><br><span class="line">004010B8   push        edi</span><br><span class="line">004010B9   lea         edi,[ebp-44h]</span><br><span class="line">004010BC   mov         ecx,11h</span><br><span class="line">004010C1   mov         eax,0CCCCCCCCh</span><br><span class="line">004010C6   rep stos    dword ptr [edi]</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">004010C8   mov         eax,[004225c4]</span><br><span class="line">004010CD   mov         dword ptr [ebp-4],eax</span><br><span class="line">004010D0   mov         ecx,dword ptr [ebp+8]</span><br><span class="line">004010D3   cmp         ecx,dword ptr [ebp+0Ch]</span><br><span class="line">004010D6   jle         004010e6</span><br><span class="line">004010D8   mov         edx,dword ptr [ebp+8]</span><br><span class="line">004010DB   add         edx,dword ptr [ebp-4]</span><br><span class="line">004010DE   mov         dword ptr [004225c4],edx</span><br><span class="line">004010E4   jmp         004010f1</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">004010E6   mov         eax,dword ptr [ebp+0Ch]</span><br><span class="line">004010E9   add         eax,dword ptr [ebp-4]</span><br><span class="line">004010EC   mov         [004225c4],eax</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">004010F1   pop         edi</span><br><span class="line">004010F2   pop         esi</span><br><span class="line">004010F3   pop         ebx</span><br><span class="line">004010F4   mov         esp,ebp</span><br><span class="line">004010F6   pop         ebp</span><br><span class="line">004010F7   ret</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>函数内部功能分析：</strong></p><p>1、分析参数：[ebp+8]：X[ebp+0Ch]：Y</p><p>2、分析局部变量：[ebp-4] &#x3D; eax &#x3D; [004225c4]</p><p>3、分析全局变量： [004225c4]：G</p><p>4、功能分析：比较X与Y的大小</p><p>如果X&lt;&#x3D;Y  那么执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">004010E6   mov         eax,dword ptr [ebp+0Ch]//Y</span><br><span class="line">004010E9   add         eax,dword ptr [ebp-4]//Y = Y + G</span><br><span class="line">004010EC   mov         [004225c4],eax//G = Y</span><br></pre></td></tr></table></figure><p>如果X&gt;Y 那么执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">004010D8   mov         edx,dword ptr [ebp+8]//X</span><br><span class="line">004010DB   add         edx,dword ptr [ebp-4]//X = X + G</span><br><span class="line">004010DE   mov         dword ptr [004225c4],edx//G = X</span><br><span class="line">004010E4   jmp         004010f1</span><br></pre></td></tr></table></figure><p>5、返回值分析：无</p><h1 id="if…else-if…else语句逆向分析"><a href="#if…else-if…else语句逆向分析" class="headerlink" title="if…else if…else语句逆向分析"></a>if…else if…else语句逆向分析</h1><p><strong>IF…ELSE IF…ELSE IF..多分支语句的反汇编判断：</strong></p><p><img src="/2022/04/16/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%EF%BC%9Aif%E8%AF%AD%E5%8F%A5/image-20220416212606777.png"></p><p><strong>分析：</strong></p><p>1、当每个条件跳转指令要跳转的地址前面都有jmp 指令</p><p>2、这些jmp指令跳转的地址都是一样的</p><p>3、如果某个分支没有条件判断，则为else部分</p><p><strong>案例分析：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">004010B0   push        ebp</span><br><span class="line">004010B1   mov         ebp,esp</span><br><span class="line">004010B3   sub         esp,4Ch</span><br><span class="line">004010B6   push        ebx</span><br><span class="line">004010B7   push        esi</span><br><span class="line">004010B8   push        edi</span><br><span class="line">004010B9   lea         edi,[ebp-4Ch]</span><br><span class="line">004010BC   mov         ecx,13h</span><br><span class="line">004010C1   mov         eax,0CCCCCCCCh</span><br><span class="line">004010C6   rep stos    dword ptr [edi]</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">004010C8   mov         dword ptr [ebp-4],0</span><br><span class="line">004010CF   mov         dword ptr [ebp-8],1</span><br><span class="line">004010D6   mov         dword ptr [ebp-0Ch],2</span><br><span class="line">004010DD   mov         eax,dword ptr [ebp+8]</span><br><span class="line">004010E0   cmp         eax,dword ptr [ebp+0Ch]</span><br><span class="line">004010E3   jle         004010f0</span><br><span class="line">004010E5   mov         ecx,dword ptr [ebp-8]</span><br><span class="line">004010E8   add         ecx,1</span><br><span class="line">004010EB   mov         dword ptr [ebp-4],ecx</span><br><span class="line">004010EE   jmp         00401123//jmp 00401123</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">004010F0   mov         edx,dword ptr [ebp+8]</span><br><span class="line">004010F3   cmp         edx,dword ptr [ebp+10h]</span><br><span class="line">004010F6   jle         00401103</span><br><span class="line">004010F8   mov         eax,dword ptr [ebp-0Ch]</span><br><span class="line">004010FB   add         eax,1</span><br><span class="line">004010FE   mov         dword ptr [ebp-4],eax</span><br><span class="line">00401101   jmp         00401123//jmp 00401123</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">00401103   mov         ecx,dword ptr [ebp+0Ch]</span><br><span class="line">00401106   cmp         ecx,dword ptr [ebp+10h]</span><br><span class="line">00401109   jle         00401116</span><br><span class="line">0040110B   mov         edx,dword ptr [ebp-8]</span><br><span class="line">0040110E   add         edx,dword ptr [ebp-0Ch]</span><br><span class="line">00401111   mov         dword ptr [ebp-4],edx</span><br><span class="line">00401114   jmp         00401123//jmp 00401123</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">00401116   mov         eax,dword ptr [ebp-0Ch]</span><br><span class="line">00401119   mov         ecx,dword ptr [ebp-8]</span><br><span class="line">0040111C   lea         edx,[ecx+eax+1]</span><br><span class="line">00401120   mov         dword ptr [ebp-4],edx</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">00401123   mov         eax,dword ptr [ebp-4]</span><br><span class="line">00401126   pop         edi</span><br><span class="line">00401127   pop         esi</span><br><span class="line">00401128   pop         ebx</span><br><span class="line">00401129   mov         esp,ebp</span><br><span class="line">0040112B   pop         ebp</span><br><span class="line">0040112C   ret</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>函数内部功能分析：</strong></p><p>1、分析参数：[ebp+8]：X[ebp+0Ch]：Y[ebp-0Ch]：Z</p><p>2、分析局部变量：[ebp-4] &#x3D; A &#x3D; 0[ebp-8] &#x3D; B &#x3D; 1[ebp-0C] &#x3D; C &#x3D; 2</p><p>3、分析全局变量：无</p><p>4、功能分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x &gt; y)</span><br><span class="line">&#123;</span><br><span class="line">    A = B + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x &gt; z)</span><br><span class="line">&#123;</span><br><span class="line">    A = C + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x &gt; z)</span><br><span class="line">&#123;</span><br><span class="line">    A = B + C</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    A = B + C + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> A;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>注意函数返回值的写法，以eax传出。</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近学习完了滴水海哥的逆向初级课程，复习一下，做一下记录。&lt;/p&gt;</summary>
    
    
    
    <category term="逆向分析" scheme="http://example.com/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
    <category term="逆向分析" scheme="http://example.com/tags/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>赵月凡我爱你</title>
    <link href="http://example.com/2022/04/14/%E8%B5%B5%E6%9C%88%E5%87%A1%E6%88%91%E7%88%B1%E4%BD%A0/"/>
    <id>http://example.com/2022/04/14/%E8%B5%B5%E6%9C%88%E5%87%A1%E6%88%91%E7%88%B1%E4%BD%A0/</id>
    <published>2022-04-14T06:57:01.000Z</published>
    <updated>2022-04-17T10:10:10.593Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>赵月凡么么哒</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;赵月凡么么哒&lt;/p&gt;
</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
