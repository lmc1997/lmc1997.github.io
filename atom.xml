<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘小白的博客</title>
  
  <subtitle>爱生活爱技术爱女盆友</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-03T12:42:21.531Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>刘小白</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>保护模式：8、中断门</title>
    <link href="http://example.com/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/"/>
    <id>http://example.com/2023/03/03/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A8%E3%80%81%E4%B8%AD%E6%96%AD%E9%97%A8/</id>
    <published>2023-03-03T12:41:29.000Z</published>
    <updated>2023-03-03T12:42:21.531Z</updated>
    
    <content type="html"><![CDATA[<p>测试</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;测试&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：7、调用门</title>
    <link href="http://example.com/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/"/>
    <id>http://example.com/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/</id>
    <published>2023-02-24T11:30:19.000Z</published>
    <updated>2023-03-03T12:39:29.988Z</updated>
    
    <content type="html"><![CDATA[<p>上一节课讲解了CALL及CALL FAR指令的格式和堆栈的变化，知道了想要提权可以通过调用门的方式来实现。这节课我们就来具体讲解调用门的结构以及执行流程，并分析在无参和有参的情况下堆栈的区别。</p><span id="more"></span><h1 id="无参调用门提权"><a href="#无参调用门提权" class="headerlink" title="无参调用门提权"></a>无参调用门提权</h1><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>指令格式为：CALL CS:EIP（EIP废弃）</p><ol><li>根据CS的值查GDT表，找到对应的段描述符，这个描述符是一个调用门。</li><li>在调用门描述符中存储着另一个代码段的段选择子，位于低4字节的16-31位。（注意必须是代码段）</li><li>选择子指向的段.Base + 偏移地址，就是真正要执行的地址，偏移地址存储在调用门描述符低4字节0-15位和高4字节16-31位。</li></ol><h2 id="调用门描述符结构"><a href="#调用门描述符结构" class="headerlink" title="调用门描述符结构"></a>调用门描述符结构</h2><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/1.PNG"></p><p>注意这里段描述符的DPL，由于我们是用调用门来提权，是从3环访问调用门，然后通过调用门去到指定的代码段，因此调用门的DPL必须是3。如果是0的话，3环的代码无法访问调用门，连敲门的权限都没有了。</p><p>而调用门中的选择子指向的代码段的DPL可以为0，这样就实现了通过调用门来提权。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>下面我们通过代码做实验，实现无参调用门提权读取高2G内存，并观察堆栈与寄存器的变化。</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/2.PNG"></p><p>首先观察GDT表，在虚拟地址0x8003f048的位置是空白，这里系统没有用到，我们可以在这里构造调用门，调用门的选择子为0100 1000（0x48）。在调用门中，我们打算指向上图中标注出来的位于8003f008处的段描述符，index&#x3D;1，选择子应为0000 1000（0x08），这是一个DPL为0的代码段（注意这个描述符下方是一个DPL为3的代码段，这两个段很常用）。至于偏移，我们还不清楚，先写成0。</p><p>因此，构造完的调用门为：0000EC00 00080000。实验代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">DWORD dwH2GValue;</span><br><span class="line">void _declspec(naked) MyFunc()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">int 3</span><br><span class="line">/*</span><br><span class="line">pushad</span><br><span class="line">pushfd</span><br><span class="line">mov eax,0x8003f00c//读取高2G内存</span><br><span class="line">mov ebx,[eax]</span><br><span class="line">mov dwH2GValue,ebx</span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line">*/</span><br><span class="line">retf//注意返回，不能是ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">char buff[6] = &#123;0x78, 0x56, 0x34, 0x12, 0x48, 0x00&#125;;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">call fword ptr[buff]</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%08x&quot;, dwH2GValue);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看一下上面的代码，在main函数中通过CALL FAR指令进入调用门，调用门处的选择子为0x48。然后通过调用门进入我们提权后要执行的函数MyFunc处，这个函数MyFunc是一个裸函数，格式固定必须这么写。提权后即可访问0x8003f00c（高2G）处的内存。</p><p>因此，我们需要获取MyFunc的函数偏移，来写入构造的调用门中的偏移部分，如下图：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/3.PNG"></p><p>可以看到我们目标函数的偏移为0x00401030，结合前面构造的调用门，最终构造的结果为0040ec00&#96;00081030，并将这个调用门写入对应位置，如下图：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/4.PNG"></p><p>此处我们先来看一下进入调用门提权之前，一些寄存器的值：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/5.PNG"></p><p>可以看到，提权之前CS&#x3D;001B，SS&#x3D;0023，说明CPL&#x3D;3，ESP&#x3D;0012FF28，说明此时堆栈位于3环。此时我们进入调用门，转到我们要执行的MyFunc函数，执行到指令int 3后，会中断到0环的调试器中：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/6.PNG"></p><p>可以看到，中断的指令为00401030处的int 3指令，就是我们前面要跳转到的MyFunc函数的位置。同时，CS&#x3D;0008，SS&#x3D;0010，说明CPL&#x3D;0，ESP&#x3D;b1c61dd0，说明此时堆栈位于0环。然后我们观察堆栈，可以看到，从低到高依次是：返回地址、原CS、原ESP、原SS，符合上节课讲的堆栈图。继续执行代码，得到结果：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/7.PNG"></p><p>代码在通过调用门提权后，成功读取到高2G的内存。</p><h1 id="有参调用门提权"><a href="#有参调用门提权" class="headerlink" title="有参调用门提权"></a>有参调用门提权</h1><p>我们在通过调用门提权的时候，也可以传递参数给要执行的函数，方法就是在进入调用门之前先通过push指令将要传递的参数压入3环的堆栈。同时观察上面调用门的结构图，在高4字节的0-4位的Param Count部分代表的就是参数的数量。在进入调用门时，CPU会根据这个参数数量，将3环堆栈上的参数压入0环的堆栈中。那么此时0环堆栈又是怎样的呢？下面来做实验：</p><p>我们打算传入1和2两个参数，因此将上面构造的调用门中参数数量部分改为2。</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/8.PNG"></p><p>实验代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">int x;</span><br><span class="line">int y;</span><br><span class="line">void _declspec(naked) MyFunc()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">pushad//8个寄存器，32个字节</span><br><span class="line">pushfd//标志寄存器，4个字节</span><br><span class="line">mov eax,[esp+0x24+0x8+0x4]</span><br><span class="line">mov dword ptr ds:[x],eax</span><br><span class="line">mov eax,[esp+0x24+0x8+0x0]</span><br><span class="line">mov dword ptr ds:[y],eax</span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line">//int 3</span><br><span class="line">retf 0x8//注意堆栈平衡，写错蓝屏</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">char buff[6] = &#123;0x78, 0x56, 0x34, 0x12, 0x48, 0x00&#125;;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">push 1</span><br><span class="line">push 2</span><br><span class="line">call fword ptr[buff]</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;x = %x  y = %x\n&quot;, x, y);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们执行代码，中断在MyFunc函数中的int 3指令时，在windbg中查看堆栈如下：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/9.PNG"></p><p>在0环堆栈中，由低地址到高地址依次为：返回地址、原CS、参数2、参数1、原ESP、原SS。可以看到，传入的参数是被夹在了中间。这样一来，MyFunc函数中的汇编代码就很好理解了。执行结果如下图：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/10.PNG"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>当通过门，权限不变的时候，只会PUSH两个值：CS、返回地址。新的CS的值由调用门决定。</li><li>当通过门，权限改变的时候，会PUSH四个值：SS、ESP、CS、返回地址。新的CS的值由调用门决定，新的SS和ESP由TSS提供。</li><li>通过门调用时，要执行哪行代码由调用门决定，但使用RETF返回时，由堆栈中压入的值决定，这就是说，进门时只能按指定路线走，出门时可以翻墙（只要改变堆栈里面的值就可以想去哪去哪）。</li><li>可不可以再建个门出去呢？也就是用Call。当然可以了，前门进，后门出。</li></ol><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><p>仔细思考上面总结中的最后两条，并完成下面两道题。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>在前面实验的基础上进行修改，实现通过翻墙的方式返回到其它地址。</li><li>在前面实验的基础上进行修改，在门中再建一个门跳转到其它地址。</li></ol><p>要求：代码正常执行不蓝屏。</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>一、代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int Value;</span><br><span class="line">int OldEip;</span><br><span class="line">int DestAddr;</span><br><span class="line">//0x401030</span><br><span class="line">void _declspec(naked) MyFunc()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">mov eax, 0x8003f00c</span><br><span class="line">mov ebx, [eax]</span><br><span class="line">mov Value, ebx</span><br><span class="line">mov eax,[esp]</span><br><span class="line">mov OldEip,eax</span><br><span class="line">mov eax,[DestAddr]//这里也可以写成mov eax,DestAddr</span><br><span class="line">mov [esp],eax</span><br><span class="line">retf</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void FanQiang()</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(0, 0, 0, 0);</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">jmp OldEip</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">char buff[6] = &#123;0x78, 0x56, 0x34, 0x12, 0x48, 0x00&#125;;</span><br><span class="line">DestAddr = (int)FanQiang;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">call fword ptr[buff]</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%x\n&quot;, Value);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路就是在通过调用门提权进入MyFunc函数后，将0环堆栈顶部的返回地址替换成要跳转的其他函数FanQiang的地址（当然替换前要保存原来的EIP，用来返回原函数继续执行），在函数FanQiang中执行代码，最后jmp回原来的返回地址，即可实现”翻墙“。结果如下：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/11.PNG"></p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/12.PNG"></p><p>二、代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int Value1;</span><br><span class="line">int Value2;</span><br><span class="line">char buff1[6] = &#123; 0x00, 0x00, 0x00, 0x00, 0x48, 0x00 &#125;;//第一个调用门</span><br><span class="line">char buff2[6] = &#123; 0x00, 0x00, 0x00, 0x00, 0x90, 0x00 &#125;;//第二个调用门</span><br><span class="line">//从第一个调用门0x48进来的</span><br><span class="line">void _declspec(naked) MyFunc1()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">pushad</span><br><span class="line">pushfd</span><br><span class="line">mov eax, 0x8003f00c</span><br><span class="line">mov ebx, [eax]</span><br><span class="line">mov Value1, ebx</span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line">call fword ptr[buff2]</span><br><span class="line">retf</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//从第一个调用门0x90进来的</span><br><span class="line">void _declspec(naked) MyFunc2()</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">pushad</span><br><span class="line">pushfd</span><br><span class="line">mov eax, 0x8003f01c</span><br><span class="line">mov ebx, [eax]</span><br><span class="line">mov Value2, ebx</span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line">retf</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">call fword ptr[buff1]</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%x %x\n&quot;, Value1, Value2);</span><br><span class="line">getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然是在门中再建一个门，那么就需要在GDT表的空白位置构造两个调用门，如下：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/13.PNG"></p><p>执行结果如下：</p><p><img src="/2023/02/24/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A7%E3%80%81%E8%B0%83%E7%94%A8%E9%97%A8/14.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一节课讲解了CALL及CALL FAR指令的格式和堆栈的变化，知道了想要提权可以通过调用门的方式来实现。这节课我们就来具体讲解调用门的结构以及执行流程，并分析在无参和有参的情况下堆栈的区别。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：6、代码间的调用-跨段调用</title>
    <link href="http://example.com/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/"/>
    <id>http://example.com/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/</id>
    <published>2023-02-23T11:18:26.000Z</published>
    <updated>2023-02-24T11:33:45.639Z</updated>
    
    <content type="html"><![CDATA[<p>上节课我们讲解了代码段间跳转JMP FAR指令及其执行流程，该指令可以同时改变CS和EIP。此外，CALL指令也有类似的作用。该指令与JMP类指令的区别在于，CALL FAR指令不仅可以同时改变CS和EIP，同时还会影响堆栈。除此以外，JMP类指令无法从低权限的非一致代码段跳转到高权限的非一致代码段，来提升CPL当前特权级，而CALL FAR指令却可以，就是通过调用门。</p><span id="more"></span><h1 id="短调用"><a href="#短调用" class="headerlink" title="短调用"></a>短调用</h1><p>指令格式：CALL 立即数&#x2F;寄存器&#x2F;内存。</p><p><img src="/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/1.PNG"></p><p>这就是普通的函数调用，并没有发生特权级别的变化（即CPL没有发生改变），上图所示的是同一个堆栈。</p><p>发生改变的寄存器为：ESP EIP。</p><h1 id="长调用（跨段不提权）"><a href="#长调用（跨段不提权）" class="headerlink" title="长调用（跨段不提权）"></a>长调用（跨段不提权）</h1><p>指令格式：CALL CS:EIP（EIP是废弃的）</p><p>在这里，CALL FAR后面跟了6个字节，其中高2字节是CS段选择子，低4字节随便写（因为是废弃的）。这里就来问题了，为什么是废弃的？既然是废弃的，那么执行这条指令后会跳到哪里去呢？其实跳到的地方是由CS段选择子指向的<strong>调用门</strong>决定的，具体怎么决定，下节课讲调用门的时候再说。</p><p><img src="/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/2.PNG"></p><p>发生改变的寄存器为：ESP EIP CS。</p><h1 id="长调用（跨段并提权）"><a href="#长调用（跨段并提权）" class="headerlink" title="长调用（跨段并提权）"></a>长调用（跨段并提权）</h1><p>指令格式：CALL CS:EIP（EIP是废弃的）</p><p>虽然指令的格式与上面不提权的情况相同，但是不同的是对应的段描述符的DPL。在不提权的情况下，对应的段描述符DPL&#x3D;3，而在提权的情况下，对应的段描述符（调用门）DPL&#x3D;0。</p><p>我们都知道，在一个程序中，代码的执行必须要用到堆栈，代码与堆栈是不分家的。因此CS和SS的权限必须一致，一个级别一套堆栈，当跳级的时候堆栈也换了一套对应级别的堆栈。</p><p>那么这就带来一个问题，长调用的时候既然切换了堆栈，那么当返回的时候怎么才能找到原来的堆栈呢？为了解决这个问题，程序在调用的时候不仅会将CS和返回地址压入堆栈中，还会将原来3环堆栈的SS和ESP也压入堆栈中（这里的堆栈是0环的堆栈）。如下图：</p><p><img src="/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/3.PNG"></p><p><img src="/2023/02/23/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A6%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8-%E8%B7%A8%E6%AE%B5%E8%B0%83%E7%94%A8/4.PNG"></p><p>那么现在又会有一个问题：当通过CALL FAR使用调用门发生权限切换的时候，代码段和堆栈都会发生切换，切换后的代码执行位置由调用门所指定，可是0环的堆栈（SS和ESP）去哪里找呢？这两个寄存器在指令中没有体现，而是要去找TSS段。只要提权了，就去找TSS要SS和ESP。具体TSS是啥先不用管。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上节课我们讲解了代码段间跳转JMP FAR指令及其执行流程，该指令可以同时改变CS和EIP。此外，CALL指令也有类似的作用。该指令与JMP类指令的区别在于，CALL FAR指令不仅可以同时改变CS和EIP，同时还会影响堆栈。除此以外，JMP类指令无法从低权限的非一致代码段跳转到高权限的非一致代码段，来提升CPL当前特权级，而CALL FAR指令却可以，就是通过调用门。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：5、代码间的跳转-段间跳转</title>
    <link href="http://example.com/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/"/>
    <id>http://example.com/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/</id>
    <published>2023-02-21T11:04:59.000Z</published>
    <updated>2023-02-23T11:14:41.224Z</updated>
    
    <content type="html"><![CDATA[<p>上节课我们学习了访问数据段的时候，段权限是如何检查的，即：**CPL &lt;&#x3D; DPL 并且 RPL &lt;&#x3D; DPL (数值上的比较)**。后面我们来学习访问代码段时，段的权限是如何检查的。</p><span id="more"></span><h1 id="代码段间跳转的流程"><a href="#代码段间跳转的流程" class="headerlink" title="代码段间跳转的流程"></a>代码段间跳转的流程</h1><p>通过前面的学习，我们已经知道了段寄存器共有八个，分别是：ES、CS、SS、DS、FS、GS、LDTR和TR。当我们想要修改段寄存器的值时，有<strong>MOV</strong>指令的类似于<strong>LES</strong>的指令。</p><p>但是，对于CS代码段寄存器，却不能用上面这两种方式修改。因为CS的改变意味着EIP的改变，想要改变CS，就必须同时改变EIP（段间跳转），但是可以只改变EIP而不改变CS（段内跳转）。CS.Base + EIP &#x3D; 真正要执行的地址。因此，代码段间的跳转，本质上就是CS寄存器的修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同时修改CS和EIP的指令（段间跳转）：JMP FAR / CALL FAR / RETF / INT /IRETED</span><br><span class="line">只修改EIP的指令（段内跳转）：JMP / CALL / JCC / RET</span><br></pre></td></tr></table></figure><p>既然是跳转到另一个代码段，那么就可以根据目标代码段的种类分为两种情况：一致代码段和非一致代码段。具体怎么区分两种代码段，请参见前面的课程。</p><p>下面我们就来讲解代码段间的跳转（<strong>JMP FAR</strong>）的执行流程：</p><p>首先需要明确的是，JMP FAR指令后面需要跟6个字节，例如：JMP 0x20:0x004183D7，其中，高2字节为0x20，代表段选择子，而低4字节为0x004183D7，代表段内偏移。而JMP指令为段内长跳转，JMP后面跟4字节，为跳转的目标地址。</p><p>以指令<strong>JMP 0x20:0x004183D7</strong>为例，执行流程如下：</p><p><strong>1、拆分段选择子</strong></p><p>0x20为0010 0000，RPL &#x3D; 0，TI &#x3D; 0。查GDT表，index &#x3D; 4</p><p><strong>2、判断该段描述符的种类</strong></p><p>通过index找到GDT中对应的段描述符，只有如下四种段描述符可以跳转成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码段、调用门、TSS任务段、任务门（目前只分析代码段）</span><br></pre></td></tr></table></figure><p><strong>3、权限检查</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果是非一致代码段，要求:CPL == DPL 并且 RPL &lt;= DPL。（windows基本上使用的都是这个）</span><br><span class="line">如果是一致代码段，要求:CPL &gt;= DPL。</span><br></pre></td></tr></table></figure><p><strong>4、加载段描述符</strong></p><p>如果通过了上面的权限检查，CPU就会将段描述符加载进CS段寄存器中。</p><p><strong>5、代码执行</strong></p><p>CPU将CS.Base + Offset的值写入EIP中，然后执行CS：EIP处的代码，段间跳转结束。</p><h1 id="一致代码段和非一致代码段"><a href="#一致代码段和非一致代码段" class="headerlink" title="一致代码段和非一致代码段"></a>一致代码段和非一致代码段</h1><p>上面提到了对于跳转到这两种代码段，有着不同的权限检查，那么这两种代码段是什么意思呢？</p><p><strong>一致代码段：也就是共享的段</strong></p><p>一致代码段，通俗地来讲，就是系统用来共享、提供给低特权级的程序使用或调用的代码段。有如下特点：</p><ul><li>特权级别高的程序不允许访问特权级别低的程序的数据：核心态不允许访问用户态的数据。</li><li>特权级别低的程序可以访问到特权级别高的数据，但特权级别CPL不会改变：用户态还是用户态。</li></ul><p><strong>非一致代码段：也就是普通的段</strong></p><p>非一致代码段，就是为了避免被低特权级程序访问而被系统保护起来的代码段。有如下特点：</p><ul><li>只允许同级别的访问。</li><li>绝对禁止不同级别的访问：核心态不是用户态，用户态也不是核心态。</li></ul><p><strong>注意</strong>：直接对代码段进行JMP操作，无论目标是一致还是非一致代码段，CPL都不会发生改变。想要提升CPL的权限，即我就是要访问DPL为0的普通代码段，需要通过调用门等方式。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>下面来练习通过JMP FAR指令，成功跳转到一致代码段和非一致代码段。</p><p>首先在虚拟机Windows XP中查看GDT表，如下图，并打算在标注出来的位置构造一致代码段和非一致代码段。这个位置位于虚拟地址0x8003f048处，对应的Index为9。</p><p><img src="/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/2.PNG"></p><p>用OD随便打开一个程序，我们只需要更改入口的第一条指令为JMP FAR即可。假如我们准备跳转到下图中标注出来的地址0x0040AA33。</p><p><img src="/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/3.PNG"></p><p>现在构造非一致代码段及其选择子，DPL需要是3，RPL最少为3，这里我们可以取0。因此构造出来的非一致代码段描述符为00cffe00~0000ffff，其选择子为0x48，因此指令应改为：JMP 0x48:0x0040AA33。</p><p><img src="/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/4.PNG"></p><p><img src="/2023/02/21/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A5%E3%80%81%E4%BB%A3%E7%A0%81%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC-%E6%AE%B5%E9%97%B4%E8%B7%B3%E8%BD%AC/5.PNG"></p><p>可以看到，在执行指令后成功通过构造的非一致代码段跳转到目标地址。</p><p>一致代码段同理，感兴趣的可以自行尝试。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上节课我们学习了访问数据段的时候，段权限是如何检查的，即：**CPL &amp;lt;&amp;#x3D; DPL 并且 RPL &amp;lt;&amp;#x3D; DPL (数值上的比较)**。后面我们来学习访问代码段时，段的权限是如何检查的。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：4、段权限检查</title>
    <link href="http://example.com/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/"/>
    <id>http://example.com/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/</id>
    <published>2023-02-20T13:04:29.000Z</published>
    <updated>2023-02-21T11:41:29.127Z</updated>
    
    <content type="html"><![CDATA[<p>上节课讲了段描述符里面的一些位，先来复习一下：对于一个段描述符，先看它的P位是否有效，然后看它的S位和TYPE域来区分该段的类型。这节课继续来学习段描述符的其他位。</p><span id="more"></span><p>老规矩，还是先上段描述符的结构图，方面查看和记忆：</p><p><img src="/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/1.PNG"></p><h1 id="D-x2F-B位"><a href="#D-x2F-B位" class="headerlink" title="D&#x2F;B位"></a>D&#x2F;B位</h1><p>D&#x2F;B位比较复杂，加载到不同的段寄存器中的影响是不一样的。</p><p><strong>1、段描述符加载到数据段如：DS、ES</strong></p><p>其含义代表的是段上限的大小。（这也就是昨天提到的向上向下拓展时候影响段上限的位）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D = 1，段上限为4GB</span><br><span class="line">D = 0，段上限为64KB</span><br></pre></td></tr></table></figure><p><img src="/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/2.PNG"></p><p><strong>2、段描述符加载到代码段如CS</strong></p><p>影响的是默认的选址方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D = 1，默认采用32位寻址方式</span><br><span class="line">D = 0，默认采用16位寻址方式</span><br></pre></td></tr></table></figure><p>指令前缀67 改变寻址方式。</p><p><strong>3、段描述符加载到数据段如SS</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D = 1，隐式堆栈访问指令（如：PUSH POP CALL） 使用32位堆栈指针寄存器ESP</span><br><span class="line">D = 0，隐式堆栈访问指令（如：PUSH POP CALL） 使用16位堆栈指针寄存器SP</span><br></pre></td></tr></table></figure><p>跟上面加载到CS道理其实差不多。</p><h1 id="段权限检查"><a href="#段权限检查" class="headerlink" title="段权限检查"></a>段权限检查</h1><p>先来回顾一下几个概念：</p><p><strong>RPL</strong>：请求特权级，存在于16位的段选择子中。</p><p><strong>DPL</strong>：描述了访问该段至少需要什么级别，存在于段描述符中。</p><p>那么如何查看程序处于几环？也就是说，如何查看CPU当前处于哪个级别呢？这里有一个新的概念：</p><p><strong>CPL</strong>：当前特权级，存在于CS和SS中存储的段选择子最后2位。</p><p>这个CPL的意义是，当前CPU执行到某一位置时CPU的级别。如下图：</p><p><img src="/2023/02/20/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A4%E3%80%81%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%9F%A5/3.PNG"></p><p>当CPU执行到80527da8这个地址时，CS值为8（1000），CPL &#x3D; 0。</p><p>有些指令在CPL &#x3D; 3时不能使用，但是在CPL &#x3D; 0时可以使用。</p><p>那么，段权限检查需要满足什么条件才能算成功呢？</p><p>**CPL &lt;&#x3D; DPL 并且 RPL &lt;&#x3D; DPL (数值上的比较)**。注意两个条件必须要同时满足。</p><p><strong>特别说明</strong>：数据段的权限检查与代码段的权限检查不一样。上面的只适用于数据段的权限检查，代码段的权限是如何检查的，在以后的课程中会讲到。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上节课讲了段描述符里面的一些位，先来复习一下：对于一个段描述符，先看它的P位是否有效，然后看它的S位和TYPE域来区分该段的类型。这节课继续来学习段描述符的其他位。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：3、段描述符属性</title>
    <link href="http://example.com/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/</id>
    <published>2023-02-16T12:38:00.000Z</published>
    <updated>2023-02-20T13:02:34.070Z</updated>
    
    <content type="html"><![CDATA[<p>上一节课讲了段描述符和段选择子的结构，这节课来具体讲解段描述符里面的一些位具体代表什么，并且来解决上节课遗留的一个问题：64位的段描述符如何填入96位段寄存器中不可见的80位？</p><span id="more"></span><p>先来回顾一下段描述符的结构：</p><p><img src="/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/1.PNG"></p><p>下面是段寄存器的结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Segment&#123;</span><br><span class="line">WORD Selector;//段选择子（可见）16位</span><br><span class="line">WORD Attributes;//段属性  （不可见）16位</span><br><span class="line">WORD Base;//段起始地址  （不可见）32位</span><br><span class="line">WORD Limit;//段大小  （不可见）32位</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在填入段寄存器时，属性部分写入的是段描述符高4字节中8-23位，共16位；基址部分填入的是段描述符中的基址共32位。现在问题来了，段寄存器的limit部分需要32位，而在段描述符里面limit只有20位，该怎么填入呢？我们从段描述符的属性入手。</p><h1 id="P位"><a href="#P位" class="headerlink" title="P位"></a>P位</h1><p>P位位于段描述符高4字节的第15位，决定了该描述符是否有效。对于一个段描述符，首先就要看它的P位是否为有效位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P=0无效</span><br><span class="line">P=1有效</span><br></pre></td></tr></table></figure><p><img src="/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/2.PNG"></p><p>对于上图的GDT表来说，被标出来的部分大于等于8，就意味着P&#x3D;1，是有效的段描述符。</p><h1 id="G位"><a href="#G位" class="headerlink" title="G位"></a>G位</h1><p>G位决定了该段的粒度，前面提到的如何用段描述符20位的limit填入段寄存器32位的limit，就是通过G位来决定的。在段描述符中，20位的limit最大值为FFFFF。</p><p>G&#x3D;0时，limit单位是字节，也就是说该是多少就是多少。20位limit最大为FFFFF，前面补0即可，limit最大为000FFFFF。</p><p>G &#x3D; 1时，limit单位是kb，也就是说，limit每加1，实际上加了1kb也就是FFF。因此limit范围是00000FFF ~ FFFFFFFF。（在后面补FFF）</p><h1 id="S位"><a href="#S位" class="headerlink" title="S位"></a>S位</h1><p>在GDT表中，段描述符分为两类，一类是数据或代码段描述符，另一类是系统段描述符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S = 0时，该段描述符是系统段描述符</span><br><span class="line">S = 1时，该段描述符是代码段或数据段描述符</span><br></pre></td></tr></table></figure><p><img src="/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/4.PNG"></p><p>在上图中，被标出来的部分的最后一个二进制位就是S位。</p><h1 id="TYPE域"><a href="#TYPE域" class="headerlink" title="TYPE域"></a>TYPE域</h1><p>对于S位取不同的值，TYPE域各位有不同的涵义</p><p><strong>1、S &#x3D; 1时，有两种情况，分别是数据段和代码段描述符</strong></p><p>也就是说，在段描述符高4字节的8个16进制数中，第5个数是1001（9）或者1111（F）时，为数据段或者代码段描述符。如下图所示：</p><p><img src="/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/5.PNG"></p><p>上图可以看出来又分了两种情况：</p><p>1.1 当第11位 &#x3D; 0时，是数据段。也就是第6个16进制数 &lt; 8。A位代表是否已经被访问过（有没有被加载过）。W位代表是否可写。E位代表拓展方向。E &#x3D; 0时向上拓展，E &#x3D; 1时向下拓展。</p><p>1.2 当第11位 &#x3D; 1时，是代码段。也就是第6个16进制数 &gt; 8。A位代表是否已经被访问过（有没有被加载过）。R位代表是否可读。C位是一致位。C &#x3D; 1时代表一致代码段，C &#x3D; 0时代表非一致代码段。具体C位什么意思，后续介绍。</p><p>对于E位的拓展方向，解释如下图：</p><p><img src="/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/6.PNG"></p><p>左边为E &#x3D; 0向上拓展（正常），右边为E &#x3D; 1向下拓展（不正常）。红色代表有效地址，也就是说可以访问的地址。因此与其说是向上或下拓展，不如说是取反。</p><p>对于右边的红色部分具体有多大，还要看另外一个没有讲过的属性来决定，有两种可能分别是64kb和4GB，以后再说。（向下拓展基本没见过）</p><p><strong>2、S &#x3D; 0时，为系统描述符</strong></p><p>系统描述符又分为以下类型：</p><p><img src="/2023/02/16/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A3%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7/7.PNG"></p><p>这里面描述的具体分类是什么意思，目前还用不到，后续会讲解。目前只要知道TYPE域各位的含意即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一节课讲了段描述符和段选择子的结构，这节课来具体讲解段描述符里面的一些位具体代表什么，并且来解决上节课遗留的一个问题：64位的段描述符如何填入96位段寄存器中不可见的80位？&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：2、段描述符与段选择子</title>
    <link href="http://example.com/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/"/>
    <id>http://example.com/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/</id>
    <published>2023-02-11T12:17:32.000Z</published>
    <updated>2023-02-16T12:35:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一节课中，我们学习了段寄存器的结构，知道了段寄存器除了可见部分的16位段选择子，还有不可见的16位属性、32位基址和32位段限长。上一节课还遗留了一个问题：指令<strong>mov ds,ax</strong>是如何用16位的ax填写96位的段寄存器？这节课我们就来学习相关的知识</p><span id="more"></span><p>对于CPU来说，有两张很重要的表，分别是GDT表和IDT表（LDT表Windows没有使用），段描述符就存在段描述符表中。当我们执行类似<strong>mov ds,ax</strong>的指令时，CPU会去查表，16位的ax叫做段选择子，CPU会根据ax的值来决定查找GDT（全局描述符表）还是LDT（局部描述符表），查找表的什么位置。</p><h1 id="段描述符"><a href="#段描述符" class="headerlink" title="段描述符"></a>段描述符</h1><p>段描述符结构如下：</p><p><img src="/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/1.PNG"></p><p>在这张图中，上面代表高4字节，下面代表低4字节，一共8字节64位。在这个结构中，具体哪些位代表什么意思，慢慢我们都会讲到，这里先不纠结。现在只需要做一件事：给定一个段描述符，能够按照上面的结构拆分出来。</p><p>那么GDT表位于什么地方呢？这张表又有多大呢？它们分别位于寄存器gdtr和gdtl中，在windbg中可以通过<strong>r gdtr</strong>和<strong>r gdtl</strong>来查看它们的值：（这里涉及到双机调试，网络上有很多资料，请自行参考）</p><p><img src="/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/2.PNG"></p><p>在这里我们看到了GDT表位于虚拟地址0x8003f000，大小为0x3ff，可以通过dq指令查看该位置的内容：</p><p><img src="/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/4.PNG"></p><p>dq为一次显示8字节（q代表QWORD），在第二项00cf9b00~0000ffff中，前面为高4字节，后面为低4字节，按照格式拆分如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">拆分为64位二进制为：</span><br><span class="line">  0    0    c    f    9    b    0    0    0    0    0    0    f    f    f    f</span><br><span class="line">0000 0000 1100 1111 1001 1011 0000 0000 0000 0000 0000 0000 1111 1111 1111 1111</span><br><span class="line">Base31~24：0000 0000</span><br><span class="line">G：1</span><br><span class="line">D/B：1</span><br><span class="line">L：0</span><br><span class="line">AVL：0</span><br><span class="line">Limit19~16：1111</span><br><span class="line">P：1</span><br><span class="line">DPL：00</span><br><span class="line">S：1</span><br><span class="line">TYPE：1011</span><br><span class="line">Base23~16：0000 0000</span><br><span class="line">Base15~00：0000 0000 0000 0000</span><br><span class="line">Limit15~00：1111 1111 1111 1111</span><br></pre></td></tr></table></figure><p>不熟悉的请读者自行挑选段描述符练习拆分。</p><h1 id="段选择子"><a href="#段选择子" class="headerlink" title="段选择子"></a>段选择子</h1><p>段选择子结构如下：</p><p><img src="/2023/02/11/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A2%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E4%B8%8E%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/5.PNG"></p><p>在上图结构中，第0-1位RPL代表请求特权级别，具体什么意思稍后讲，第2位TI代表要查询的表（在Windows下一般都是0，查询GDT表），第3-15位代表索引，表示要查询表的第几项。因此想要查看内存中对应的项的内容，地址应该是GDT表的基址+索引*8。</p><p>在上一节课我们提到了，指令<strong>mov ds,ax</strong>是如何用16位的ax填写96位的ds的呢？刨去段寄存器中可见的16位段选择子，还剩80位，因此CPU会用GDT中对应的段描述符来写入这80位。那么问题来了，这64位是如何填满80位的呢？后面再讲。</p><p>例如，对于段选择子0x23来讲，RPL&#x3D;3，index&#x3D;4，查找的是GDT表序号为4的项（序号从0开始）。</p><p>现在来看RPL，代表的意思是当前的特权级别，有四种情况分别是0 1 2 3。同时注意到在段描述符结构中有一个DPL，代表目标特权级别，意思可以理解成：你既然要访问我这个段，你最少是什么级别。因此，在CPU通过选择子查找到目标段描述符后，会将选择子的RPL与目标段描述符的DPL进行对比，当RPL的级别大于等于DPL时（数值上RPL小于等于DPL），才能够成功访问。例如RPL&#x3D;0，DPL&#x3D;3时就可以成功访问，反过来就不行。</p><p>总结一下，想要修改段寄存器的值，可以使用MOV指令，方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0x20</span><br><span class="line">mov ds,ax</span><br></pre></td></tr></table></figure><p>此外，还可以使用LES、LSS、LDS、LFS、LGS指令修改寄存器。对于CS寄存器来讲，没有对应的LCS指令，因为CS为代码段，CS的修改就意味着EIP的更改。因此必须同时改变CS和EIP才行，具体指令后面讲。以LES指令为例，使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">       char buffer[6] = &#123;0&#125;;</span><br><span class="line">       __asm &#123;</span><br><span class="line">              // 高 2 字节加载到 ES 寄存器，低 4 字节复制到 ecx 寄存器。fword 表示 6 字节。</span><br><span class="line">              // LDS/LSS/LFS/LGS 用法是类似的。没有LCS指令，要修改CS，需要使用其它指令，这里就不给出。</span><br><span class="line">              // 这行指令是有坑的，不一定可以执行成功，取决于buffer中的值。</span><br><span class="line">              les ecx, fword ptr ds:[buffer]</span><br><span class="line">       &#125;</span><br><span class="line">       return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在上一节课中，我们学习了段寄存器的结构，知道了段寄存器除了可见部分的16位段选择子，还有不可见的16位属性、32位基址和32位段限长。上一节课还遗留了一个问题：指令&lt;strong&gt;mov ds,ax&lt;/strong&gt;是如何用16位的ax填写96位的段寄存器？这节课我们就来学习相关的知识&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>保护模式：1、段寄存器属性探测</title>
    <link href="http://example.com/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/"/>
    <id>http://example.com/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/</id>
    <published>2023-02-08T11:24:19.000Z</published>
    <updated>2023-02-13T10:19:30.169Z</updated>
    
    <content type="html"><![CDATA[<p>开一个新坑，最近正在学习海哥Windows内核方面相关的知识，也已经学习了很多，因此想及时在这里总结复习一下，并持续跟进未来的学习。对于Windows内核来讲，我准备分成保护模式与操作系统两个大模块来学习与总结。保护模式是操作系统的根本，而段页的知识又是保护模式的根本，因此学习好段页很重要（当然前面3环还剩下一些项目，未来也会慢慢总结跟进的）。</p><span id="more"></span><p>在实模式下，给出一个地址就是物理地址，这个物理地址的内容可以被随意更改。而保护模式之所以叫保护模式，就是为了保护内存不被随意访问与更改。那么，又是什么限制了对一个内存地址的访问呢？比如下面这句汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOV DWORD PTR DS:[0xF1234567], EBX</span><br></pre></td></tr></table></figure><p>将EBX寄存器的内容送入一个地址（真正的地址是DS.base + 0xF1234567），要满足什么条件才能执行成功呢？一个是DS中的Attribute，也就是段的属性；另一个是0xF1234567所在内存页的属性。我们先来学习段相关的知识。</p><h1 id="段寄存器结构"><a href="#段寄存器结构" class="headerlink" title="段寄存器结构"></a>段寄存器结构</h1><p>上面的DS就是一个CPU中的段寄存器，在CPU中，一共有8个段寄存器，它们分别是：ES CS SS DS FS GS LDTR和TR。段寄存器的结构如下图所示。</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8.PNG"></p><p>下面是在OD中，各个段寄存器的显示效果：</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/2.PNG"></p><p>可以看到，这些段寄存器显示出来的值只有2个字节也就是16位，后面的32位表示这是一个大段（关于什么是大段小段，后面会讲），紧跟着后面的0是这个段的base，也就是基址，后面括号里的F表示这个段的limit，也就是段限长，描述了段的范围。当我们执行指令<strong>MOV AX,ES</strong>之后，也能看到结果是将16位的值送入了AX中。</p><p>于是我们可以根据段寄存器的结构图来看，除了可见部分的16位是段寄存器的段选择子，还分别有不可见的16位属性、32位基址和32位段限长，一共96位。</p><p>对于段寄存器的读操作（ES CS SS DS FS GS），比如<strong>MOV AX,ES</strong> 指令，读取的是16位的可见部分；而对于它们的写操作，比如<strong>MOV DS,AX</strong> 指令，写入的是96位。（16位的AX是如何写入96位DS中的呢？后面会讲）</p><p>此外，读LDTR的指令为<strong>SLDT&#x2F;LLDT</strong>，读TR的指令为<strong>STR&#x2F;LTR</strong>。</p><p>下面来看一下各个段寄存器成员：</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/3.PNG"></p><p>GS段寄存器Windows没有使用，一直为0。FS寄存器很重要，学到进程线程再讲。ES SS和DS存储的都是数据段，属性为可读可写，CS为代码段，属性为可读可执行。</p><h1 id="段寄存器属性探测"><a href="#段寄存器属性探测" class="headerlink" title="段寄存器属性探测"></a>段寄存器属性探测</h1><p>上面介绍了段寄存器一共有96位，那么如何证明呢？</p><h2 id="探测Attribute"><a href="#探测Attribute" class="headerlink" title="探测Attribute"></a>探测Attribute</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int var = 0;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax,ss//cs不行 cs是可读 可执行 但不可写</span><br><span class="line">mov ds,ax</span><br><span class="line">mov dword ptr ds:[var],eax</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，首先读SS，然后写入DS，此时DS寄存器就等同于SS寄存器的内容，然后将EAX的内容送入该段的一个地址中去（其实就是SS.base），程序运行结果如下，可以正常执行。</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/4.PNG"></p><p>而当我们把SS改变成CS后继续执行程序，当向内存写入的时候，触发了内存访问错误：</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/5.PNG"></p><p>是什么限制了对这块内存的写入呢？就是CS中的属性部分，该段寄存器不具有可写属性。</p><h2 id="探测Base"><a href="#探测Base" class="headerlink" title="探测Base"></a>探测Base</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int a = 0;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax,fs</span><br><span class="line">mov es,ax</span><br><span class="line">mov eax,es:[0]</span><br><span class="line">mov a,eax</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;, a);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，es&#x3D;fs，按照常理来说，0地址是无法访问的，由于es的段base为0，因此只访问es:[0]会触发内存访问错误，运行结果如下图：</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/6.PNG"></p><p>而将es赋值成fs之后，由于上面讲过，fs的基址不是0，因此可以访问并成功给a赋值：</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/7.PNG"></p><h2 id="探测Limit"><a href="#探测Limit" class="headerlink" title="探测Limit"></a>探测Limit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax,fs</span><br><span class="line">mov es,ax</span><br><span class="line">mov eax,es:[0x1000]</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给es赋值后es&#x3D;fs，但由于fs的limit为0xFFF，对超过limit的内存地址访问，会出现内存访问错误：</p><p><img src="/2023/02/08/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9A1%E3%80%81%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E5%B1%9E%E6%80%A7%E6%8E%A2%E6%B5%8B/8.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;开一个新坑，最近正在学习海哥Windows内核方面相关的知识，也已经学习了很多，因此想及时在这里总结复习一下，并持续跟进未来的学习。对于Windows内核来讲，我准备分成保护模式与操作系统两个大模块来学习与总结。保护模式是操作系统的根本，而段页的知识又是保护模式的根本，因此学习好段页很重要（当然前面3环还剩下一些项目，未来也会慢慢总结跟进的）。&lt;/p&gt;</summary>
    
    
    
    <category term="保护模式" scheme="http://example.com/categories/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="保护模式" scheme="http://example.com/tags/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Win32：加密壳的编写</title>
    <link href="http://example.com/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/"/>
    <id>http://example.com/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/</id>
    <published>2022-10-19T10:49:28.000Z</published>
    <updated>2023-02-07T12:36:49.038Z</updated>
    
    <content type="html"><![CDATA[<p>这节课来完成对壳程序的编写。壳可以分成两类：加密壳和压缩壳，加密壳又可以分成两类：分别是二进制壳和源代码加密壳。对于二进制壳来所，它并不改变代码的指令，而是对整个PE文件结构做一个扭曲变形，并且对关键代码进行加密。但是对于所有这种二进制壳，不管怎么变形，当这个程序执行时，在内存中拉伸后一定是要恢复原状的。想要脱这种二进制壳，需要跟着它的汇编指令执行到在内存中展开后，将内存dump出来，再修改OEP到正常程序的入口点，即可完成脱壳。本节课我们就来完成对这种二进制壳的编写。</p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><u>特别说明，在本篇文章中，壳程序称为<strong>shell</strong>，准备加密的程序称为<strong>src</strong>。</u></p><p>对于这种二进制壳，有以下两种编写方法：</p><p><strong>一、将PE文件中的各种表移动出来，再加密（本节课不做这个）</strong></p><ol><li>新增一个节，移动各种表</li><li>对原来PE文件加密</li><li>这时候程序还不能跑起来，因为OEP还在被加密的文件中，系统不认识，需要在最后追加一段代码</li><li>这个代码作用为解密，解完密后跳转到原来的OEP</li></ol><p>但这时候有一个问题：在解密代码中有可能会用到别的DLL的函数，这个DLL又可能还没有被导入进来，或者原来的PE文件压根没有这个DLL文件要导入，因此需要自己在解密代码中导入需要用到的DLL。</p><p>还有一个问题，解密代码中会有可能有全局变量，地址都是写死的，若解密代码没有加到预定的位置，就不能用了。这种情况需要使用win32汇编来编写解密代码。</p><p><strong>二、不移动各种表，直接加密整个文件</strong></p><ol><li>将SRC文件读入内存，加密</li><li>将加密后的文件追加到Shell文件新增的节中</li></ol><p>此时加壳结束。这时生成的程序中，被加密的SRC程序就是一堆被加密的数据，静态分析是看不出来的，但是动态分析一步一步跟是可以分析的。</p><p>现在有一个问题，这个程序的主体是壳子程序，双击之后跑起来的是壳子，不是被加密的SRC程序。因此要在壳子程序中写解壳程序。因此完成这个加壳的过程，需要加壳程序与解壳程序两步。</p><h1 id="加壳程序的编写"><a href="#加壳程序的编写" class="headerlink" title="加壳程序的编写"></a>加壳程序的编写</h1><p>步骤如下：</p><ol><li>获取Shell程序的路径</li><li>获取src程序的路径</li><li>将src程序读取到内存中，加密</li><li>在Shell程序中新增一个节，并将加密后的src程序追加到Shell程序的新增节中</li><li>加壳完毕</li></ol><p>图解如下：</p><p><img src="/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/1.PNG"></p><p>此时生成的文件还是原来的那个壳子程序，仅仅是在一个新增的节中写入了一堆数据，根本看不到我们加密的程序，只用静态分析的话是无法分析出我们加密的程序的，同时如果被加密的程序是病毒的话，杀毒软件也无法杀死我们的程序（文件免杀）。</p><p>加密程序代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码实现软件加壳，其中拉伸、增加节、还原的函数代码在前面几节课中已经给出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Add_Protect</span><span class="params">(<span class="type">char</span>* shell_Filename, <span class="type">char</span>* src_Filename)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1、获得shell壳子程序路径，已经在参数中给出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、在shell程序中新增一个节</span></span><br><span class="line">    <span class="type">char</span>* shell_ImageBuffer = File_To_Image(shell_Filename);           <span class="comment">//拉伸</span></span><br><span class="line"><span class="type">char</span>* shell_ImageBuffer2 = AddSection(shell_ImageBuffer, <span class="number">0x100000</span>);</span><br><span class="line"><span class="type">char</span>* shell_NewBuffer = image_to_file(shell_ImageBuffer2);</span><br><span class="line"></span><br><span class="line">dos_header* pdh = (dos_header*)shell_NewBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、获取src程序路径，已经在参数中给出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、将src程序读取到内存中，加密</span></span><br><span class="line"><span class="type">char</span>* src_Buffer = ReadMem_Exe(src_Filename);</span><br><span class="line">FILE* src_fp = fopen(src_Filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="type">int</span> src_size = getlength(src_fp);</span><br><span class="line"><span class="comment">//这里应该是加密函数，对src文件进行加密，这里为了简便起见，只做取反运算</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; src_size; i++)</span><br><span class="line">&#123;</span><br><span class="line">*(src_Buffer + i) = ~(*(src_Buffer + i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、将加密后的src程序追加到shell程序中新增的节中</span></span><br><span class="line"><span class="comment">//定位到shell程序最后一个节</span></span><br><span class="line"><span class="type">char</span>* src_Section = (<span class="type">char</span>*)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData + (<span class="type">int</span>)shell_NewBuffer);</span><br><span class="line"><span class="built_in">memcpy</span>(src_Section, src_Buffer, src_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6、存盘</span></span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">size = (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData) + (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;SizeOfRawData);</span><br><span class="line">FILE* pfp = fopen(<span class="string">&quot;C:\\Documents and Settings\\easy\\桌面\\Shell_test.exe&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">fwrite(shell_NewBuffer, size, <span class="number">1</span>, pfp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将文件读入内存中，并返回该块内存首地址</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">ReadMem_Exe</span><span class="params">(<span class="type">char</span>* Filename)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">fp = fopen(Filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无法打开 EXE 文件!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">size = getlength(fp);</span><br><span class="line"><span class="type">char</span>* FileBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line">fread(FileBuffer, size, <span class="number">1</span>, fp);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="keyword">return</span> FileBuffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件大小</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getlength</span><span class="params">(FILE* fp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);</span><br><span class="line">size = ftell(fp);</span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，想要这个文件运行起来后执行我们的加密程序，还需要下面的解密过程。</p><h1 id="解密过程的编写"><a href="#解密过程的编写" class="headerlink" title="解密过程的编写"></a>解密过程的编写</h1><p>解密过程的代码实际上就是壳子程序的代码</p><ol><li><p>获取shell程序的路径</p></li><li><p>获取src的数据</p><p>(1). 定位到shell文件最后一个节</p><p>(2). 将数据取出，并解密</p></li><li><p>拉伸PE：将解密后的PE文件在内存中拉伸，并存储到缓冲区中</p></li><li><p>以挂起方式运行shell程序</p><p>(1). 以挂起方式创建shell进程，并得到主线程的context</p><p>(2). 卸载外壳程序的文件镜像(<strong>ZwUnmapViewOfSection</strong>函数)。卸载内存镜像后，得到一个干净的4GB空间，可以直接从内存启动一个进程，而不像CreateProcess一样涉及从磁盘上读取</p><p>(3). 在指定的位置(src的ImageBase)申请指定大小(src的SizeOfImage)的内存(<strong>VirtualAllocEx</strong>函数)</p><p>(4). 如果创建失败，查看src是否包含重定位表，如果包含重定位表，就在任意位置申请src的SizeOfImage大小的内存，然后修复重定位表</p><p>(5). 如果在指定位置申请内存失败，并且没有重定位表的数据，直接返回失败</p><p>(6). 如果内存申请成功，将新的数据复制到内存中</p><p>(7). 修正运行环境的基址和入口地址</p><p>(8). 恢复主线程执行</p></li></ol><p>示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个简单的壳程序</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/subsystem:\&quot;windows\&quot;  /entry:\&quot;mainCRTStartup\&quot;&quot;</span>   ) </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一、获取SHELL程序的路径</span></span><br><span class="line"><span class="type">char</span>* shell_path;</span><br><span class="line">shell_path = _getcwd(<span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//将上面获得的路径中的&#x27;\&#x27;变成&#x27;/&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(shell_path); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(shell_path[j] == <span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">shell_path[j] = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcat</span>(shell_path, <span class="string">&quot;/Shell_test.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//二、获得SRC数据</span></span><br><span class="line"><span class="comment">//将shell程序读入内存</span></span><br><span class="line"><span class="type">char</span>* shell_FileBuffer = ReadMem_Exe(shell_path); </span><br><span class="line"><span class="keyword">if</span>(!shell_FileBuffer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;读取文件失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定位各个文件头部分</span></span><br><span class="line">dos_header* pdh = (dos_header*)shell_FileBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"><span class="comment">//定位最后一个节</span></span><br><span class="line"><span class="type">char</span>* Last_Section = (<span class="type">char</span>*)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData + (<span class="type">int</span>)shell_FileBuffer);</span><br><span class="line"><span class="comment">//将最后一个节的数据取出来并解密，放进缓冲区中</span></span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">*(Last_Section + i) = ~(*(Last_Section + i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定位各个文件头部分</span></span><br><span class="line">dos_header* src_pdh = (dos_header*)Last_Section;</span><br><span class="line">pe_header* src_pph = (pe_header*)(src_pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)src_pdh);</span><br><span class="line">optional_pe_header* src_poph = (optional_pe_header*)((<span class="type">int</span>)(src_pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)src_pdh);</span><br><span class="line"><span class="type">int</span> src_size = src_poph-&gt;SizeOfImage; <span class="comment">//获取src的SizeOfImage</span></span><br><span class="line"><span class="type">char</span>* src_ImageBase = (<span class="type">char</span>*)src_poph-&gt;ImageBase;        <span class="comment">//获取src的ImageBase</span></span><br><span class="line"><span class="type">char</span>* src_FileBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(src_size);</span><br><span class="line"><span class="built_in">memcpy</span>(src_FileBuffer, Last_Section, src_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三、拉伸PE</span></span><br><span class="line"><span class="type">char</span>* src_ImageBuffer = File_To_Image(src_FileBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//四、以挂起方式运行Shell进程，注意是壳子本身这个进程!</span></span><br><span class="line"><span class="comment">//0、以挂起方式创建Shell进程</span></span><br><span class="line">STARTUPINFO ie_si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">PROCESS_INFORMATION ie_pi;</span><br><span class="line">ie_si.cb = <span class="keyword">sizeof</span>(ie_si);</span><br><span class="line"></span><br><span class="line">CreateProcess(</span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">shell_path, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>,  </span><br><span class="line">FALSE,                   </span><br><span class="line">CREATE_SUSPENDED,     </span><br><span class="line"><span class="literal">NULL</span>,                    </span><br><span class="line"><span class="literal">NULL</span>,                    </span><br><span class="line">&amp;ie_si,                  </span><br><span class="line">&amp;ie_pi                  </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、获得外壳程序的Context，留着后面备用</span></span><br><span class="line">CONTEXT context;</span><br><span class="line">context.ContextFlags = CONTEXT_FULL;</span><br><span class="line">::GetThreadContext(ie_pi.hThread,&amp;context);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、卸载外壳程序的文件镜像(ZwUnmapViewOfSection)</span></span><br><span class="line"><span class="comment">// 获取 ZwUnmapViewOfSection 函数指针</span></span><br><span class="line">HMODULE hModuleNt = LoadLibrary(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hModuleNt == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取ntdll句柄失败\n&quot;</span>);</span><br><span class="line">TerminateThread(ie_pi.hThread, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">DWORD</span><span class="params">(WINAPI *_TZwUnmapViewOfSection)</span><span class="params">(HANDLE, PVOID)</span>;</span><br><span class="line">_TZwUnmapViewOfSection pZwUnmapViewOfSection = (_TZwUnmapViewOfSection)GetProcAddress(hModuleNt, <span class="string">&quot;ZwUnmapViewOfSection&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pZwUnmapViewOfSection == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取 ZwUnmapViewOfSection 函数指针失败\n&quot;</span>);</span><br><span class="line">TerminateThread(ie_pi.hThread, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pZwUnmapViewOfSection(ie_pi.hProcess, GetModuleHandle(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、在指定的位置(src的ImageBase)申请指定大小(src的SizeOfImage)的内存(VirtualAllocEx)</span></span><br><span class="line">LPVOID pImageBase = VirtualAllocEx(ie_pi.hProcess, (LPVOID)src_ImageBase, src_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pImageBase != src_ImageBase)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VirtualAllocEx 错误码: 0x%X\n&quot;</span>, GetLastError()); <span class="comment">// 0x1e7 试图访问无效地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;申请到的指针: 0x%X, 期望的地址: 0x%X\n&quot;</span>, (DWORD)pImageBase, src_ImageBase);</span><br><span class="line">TerminateThread(ie_pi.hThread, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、如果成功，将Src的PE文件拉伸 复制到该空间中</span></span><br><span class="line"><span class="comment">//memcpy(src_ImageBase, src_ImageBuffer, src_size);</span></span><br><span class="line"><span class="type">int</span> flag = WriteProcessMemory(ie_pi.hProcess, (LPVOID)src_ImageBase, src_ImageBuffer, src_size, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;写入源程序内存镜像失败\n&quot;</span>);</span><br><span class="line">TerminateThread(ie_pi.hThread, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、修改外壳程序的Context</span></span><br><span class="line"><span class="comment">//将Context的OPE 改成 Src的OEP</span></span><br><span class="line">context.Eax = (<span class="type">unsigned</span> <span class="type">long</span>)(src_poph-&gt;AddressOfEntryPoint + src_ImageBase);</span><br><span class="line"><span class="comment">//将Context的ImageBase 改成 Src的ImageBase</span></span><br><span class="line">WriteProcessMemory(ie_pi.hProcess, (LPVOID)(context.Ebx + <span class="number">8</span>), &amp;src_ImageBase, <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6、设置Context 并恢复主线程</span></span><br><span class="line">context.ContextFlags = CONTEXT_FULL;</span><br><span class="line">SetThreadContext(ie_pi.hThread, &amp;context);</span><br><span class="line">ResumeThread(ie_pi.hThread);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/2.PNG"></p><p>下面的ShellCode.exe即为我们的壳子程序，MY_PE by win32.exe为我们要保护的程序，加壳后生成的程序为Shell_test.exe，双击这个生成的程序，发现正常运行我们被保护的程序：</p><p><img src="/2022/10/19/Win32%EF%BC%9A%E5%8A%A0%E5%AF%86%E5%A3%B3%E7%9A%84%E7%BC%96%E5%86%99/3.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这节课来完成对壳程序的编写。壳可以分成两类：加密壳和压缩壳，加密壳又可以分成两类：分别是二进制壳和源代码加密壳。对于二进制壳来所，它并不改变代码的指令，而是对整个PE文件结构做一个扭曲变形，并且对关键代码进行加密。但是对于所有这种二进制壳，不管怎么变形，当这个程序执行时，在内存中拉伸后一定是要恢复原状的。想要脱这种二进制壳，需要跟着它的汇编指令执行到在内存中展开后，将内存dump出来，再修改OEP到正常程序的入口点，即可完成脱壳。本节课我们就来完成对这种二进制壳的编写。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Win32：挂起方式创建进程</title>
    <link href="http://example.com/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/"/>
    <id>http://example.com/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/</id>
    <published>2022-10-07T08:00:13.000Z</published>
    <updated>2022-10-13T06:31:07.437Z</updated>
    
    <content type="html"><![CDATA[<p>上节课讲解了CreateProcess函数，并介绍了其中的几个参数。这节课来介绍另外几个参数，并且会讲解如何以挂起方式创建进程，为我们下一节课写一个简单的加密壳打下基础。</p><span id="more"></span><h1 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h1><p>再来回顾一下CreateProcess函数的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">CreateProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">  LPCTSTR lpApplicationName,                 <span class="comment">// name of executable module</span></span></span><br><span class="line"><span class="params">  LPTSTR lpCommandLine,                      <span class="comment">// command line string</span></span></span><br><span class="line"><span class="params">  LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// SD</span></span></span><br><span class="line"><span class="params">  LPSECURITY_ATTRIBUTES lpThreadAttributes,  <span class="comment">// SD</span></span></span><br><span class="line"><span class="params">  BOOL bInheritHandles,                      <span class="comment">// handle inheritance option</span></span></span><br><span class="line"><span class="params">  DWORD dwCreationFlags,                     <span class="comment">// creation flags</span></span></span><br><span class="line"><span class="params">  LPVOID lpEnvironment,                      <span class="comment">// new environment block</span></span></span><br><span class="line"><span class="params">  LPCTSTR lpCurrentDirectory,                <span class="comment">// current directory name</span></span></span><br><span class="line"><span class="params">  LPSTARTUPINFO lpStartupInfo,               <span class="comment">// startup information</span></span></span><br><span class="line"><span class="params">  LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// process information</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>先来看lpProcessAttributes和lpThreadAttributes这两个参数。</p><p>与CreateEvent函数类似：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HANDLE  <span class="title function_">CreateEvent</span><span class="params">(</span></span><br><span class="line"><span class="params">　　LPSECURITY_ATTRIBUTES  lpEventAttributes,<span class="comment">// 安全属性 </span></span></span><br><span class="line"><span class="params">　　BOOL  bManualReset,<span class="comment">// 复位方式</span></span></span><br><span class="line"><span class="params">　　BOOL  bInitialState,<span class="comment">// 初始状态</span></span></span><br><span class="line"><span class="params">　　LPCTSTR  lpName <span class="comment">// 对象名称 </span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>都是创建内核对象的函数，CreateEvent函数的的lpEventAttributes参数代表着这个内核对象能否被子进程继承。同理，CreateProcess函数中的lpProcessAttributes和lpThreadAttributes参数，代表着进程内核对象与线程内核对象能否被继承。</p><p>我们知道，在父进程被创建时，在它的高2G会生成一张空的句柄表，当父进程执行CreateProcess函数创建子进程时，会在这张句柄表里写入两项内容，一个是子进程的句柄，一个是子进程主线程的句柄。当这两个参数被赋值后，子进程就可以继承这两个句柄。下面看一个程序例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进程A代码</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> szBuffer[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> szHandle[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">SECURITY_ATTRIBUTES ie_sa_p;</span><br><span class="line">ie_sa_p.nLength = <span class="keyword">sizeof</span>(ie_sa_p);</span><br><span class="line">ie_sa_p.lpSecurityDescriptor = <span class="literal">NULL</span>;</span><br><span class="line">ie_sa_p.bInheritHandle = TRUE; </span><br><span class="line"></span><br><span class="line">SECURITY_ATTRIBUTES <span class="type">ie_sa_t</span>;</span><br><span class="line"><span class="type">ie_sa_t</span>.nLength = <span class="keyword">sizeof</span>(<span class="type">ie_sa_t</span>);</span><br><span class="line"><span class="type">ie_sa_t</span>.lpSecurityDescriptor = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">ie_sa_t</span>.bInheritHandle = TRUE; </span><br><span class="line"><span class="comment">//创建一个可以被继承的内核对象,此处是个进程</span></span><br><span class="line">STARTUPINFO ie_si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">PROCESS_INFORMATION ie_pi;</span><br><span class="line">ie_si.cb = <span class="keyword">sizeof</span>(ie_si);</span><br><span class="line"></span><br><span class="line">TCHAR szCmdline[] =TEXT(<span class="string">&quot;c://program files//internet explorer//iexplore.exe&quot;</span>);</span><br><span class="line">CreateProcess(</span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">szCmdline, </span><br><span class="line">&amp;ie_sa_p, </span><br><span class="line">&amp;<span class="type">ie_sa_t</span>, </span><br><span class="line">TRUE, </span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, &amp;ie_si, &amp;ie_pi); </span><br><span class="line"></span><br><span class="line"><span class="comment">//组织命令行参数</span></span><br><span class="line"><span class="built_in">sprintf</span>(szHandle,<span class="string">&quot;%x %x&quot;</span>,ie_pi.hProcess,ie_pi.hThread);</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer,<span class="string">&quot;C:/guaqitest_B.exe %s&quot;</span>,szHandle);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义创建进程需要用的结构体</span></span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">PROCESS_INFORMATION pi;</span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建子进程</span></span><br><span class="line">BOOL res = CreateProcess(</span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">szBuffer, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">TRUE, </span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, &amp;si, &amp;pi); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程B代码</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">DWORD dwProcessHandle = <span class="number">-1</span>;</span><br><span class="line">DWORD dwThreadHandle = <span class="number">-1</span>;</span><br><span class="line"><span class="type">char</span> szBuffer[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(szBuffer,argv[<span class="number">1</span>],<span class="number">8</span>);</span><br><span class="line"><span class="built_in">sscanf</span>(szBuffer,<span class="string">&quot;%x&quot;</span>,&amp;dwProcessHandle);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(szBuffer,<span class="number">0</span>,<span class="number">256</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(szBuffer,argv[<span class="number">2</span>],<span class="number">8</span>);</span><br><span class="line"><span class="built_in">sscanf</span>(szBuffer,<span class="string">&quot;%x&quot;</span>,&amp;dwThreadHandle);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;获取IE进程、主线程句柄\n&quot;</span>);</span><br><span class="line">Sleep(<span class="number">2000</span>);</span><br><span class="line"><span class="comment">//挂起主线程</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;挂起主线程\n&quot;</span>);</span><br><span class="line">::SuspendThread((HANDLE)dwThreadHandle);</span><br><span class="line"></span><br><span class="line">Sleep(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复主线程</span></span><br><span class="line">::ResumeThread((HANDLE)dwThreadHandle);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;恢复主线程\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">Sleep(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭ID进程</span></span><br><span class="line">::TerminateProcess((HANDLE)dwProcessHandle,<span class="number">1</span>);</span><br><span class="line">::WaitForSingleObject((HANDLE)dwProcessHandle, INFINITE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ID进程已经关闭.....\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下上面代码，在进程A中，首先创建了一个浏览器子进程，并设置了浏览器进程与其主进程的句柄可以被继承，这时候在A进程的句柄表中就会生成浏览器进程与其主线程的句柄。然后A进程又创建了一个子进程B，B子进程继承了A的句柄表，这时候在B的句柄表中也存在浏览器进程与其主线程的句柄，并且A通过命令行参数将这两个句柄值传递给了B子进程，这时候B进程就可以通过这两个句柄值对浏览器进程进行控制了。在B进程中，可以将前面的浏览器进程做挂起、恢复和结束等操作。如果B没有继承这两个句柄，是无法通过这两个值对浏览器进程进行控制的。</p><p>接下来再看CreateProcess函数的另一个参数lpCurrentDirectory，这个参数可以获取程序的当前目录。</p><p>通过下面的例子来说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进程A代码，位于C：/1文件夹下</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> szBuffer[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer,<span class="string">&quot;C:/B.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义创建进程需要用的结构体</span></span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">PROCESS_INFORMATION pi;</span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建子进程</span></span><br><span class="line">BOOL res = CreateProcess(</span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">szBuffer, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">TRUE, </span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">&amp;si, &amp;pi); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程B代码，位于位于C：/下</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> szBuffer[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">GetCurrentDirectory(<span class="number">256</span>,szBuffer);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,szBuffer);</span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下代码，在父进程A中创建子进程B，进程B的任务是打印进程所在的目录位置。当父进程A中CreateProcess函数的参数lpCurrentDirectory设置为NULL时，结果如下：</p><p><img src="/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/1.PNG"></p><p>可以看到，lpCurrentDirectory设置为NULL时，子进程B打印的是父进程A的目录位置。而当我们将这个参数设置为一个存在的目录时，打印的结果就是我们设定的目录，结果如下图：</p><p><img src="/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/2.PNG"></p><p>这个当前目录的参数很多人会觉得无所谓，但这是我们后面写壳的一个很重要的地方。</p><h1 id="以挂起方式创建进程"><a href="#以挂起方式创建进程" class="headerlink" title="以挂起方式创建进程"></a>以挂起方式创建进程</h1><p>最后来看一下我们要学习的CreateProcess函数的最后一个参数dwCreationFlags。在前面的程序中，我们把这个参数的值赋成了CREATE_NEW_CONSOLE，这样一来，对于控制台程序来说，子进程就会将它打印的东西打印到一个新的控制台中。而当dwCreationFlags赋值为NULL时，子进程就会与父进程共用一个控制台窗口。</p><p>而当我们把dwCreationFlags这个参数赋值成CREATE_SUSPENDED时，就是我们要讲的以挂起的方式创建进程。</p><p>先来看下面的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    STARTUPINFO ie_si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">    PROCESS_INFORMATION ie_pi;</span><br><span class="line">    ie_si.cb = <span class="keyword">sizeof</span>(ie_si);</span><br><span class="line"></span><br><span class="line">    TCHAR szBuffer[<span class="number">256</span>] = <span class="string">&quot;C:\\1.exe&quot;</span>;</span><br><span class="line">    CreateProcess(</span><br><span class="line">        <span class="literal">NULL</span>,                  </span><br><span class="line">        szBuffer,                </span><br><span class="line">        <span class="literal">NULL</span>, </span><br><span class="line">        <span class="literal">NULL</span>,  </span><br><span class="line">        FALSE,                   </span><br><span class="line">        CREATE_SUSPENDED, <span class="comment">//挂起    </span></span><br><span class="line">        <span class="literal">NULL</span>,                    </span><br><span class="line">        <span class="literal">NULL</span>,                    </span><br><span class="line">        &amp;ie_si,                  </span><br><span class="line">        &amp;ie_pi                  </span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//恢复执行</span></span><br><span class="line">    ResumeThread(ie_pi.hThread);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序首先以挂起的方式创建1.exe进程，然后立即恢复该进程，因此当这个程序一运行，就相当于正常启动了1.exe这个进程，观察该进程的运行状态以及模块状态如下：</p><p><img src="/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/3.png"></p><p><img src="/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/4.png"></p><p>可以看到，当进程正常创建后，内存使用为1568K（正常大小），并且也可以遍历到该进程的模块。</p><p>接下来，在ResumeThread(ie_pi.hThread)处下断点，相当于让1.exe进程以挂起方式创建，观察结果：</p><p><img src="/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/5.png"></p><p><img src="/2022/10/07/Win32%EF%BC%9A%E6%8C%82%E8%B5%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B/6.png"></p><p>可以看到，以挂起方式创建进程后，进程被挂起没有运行，在任务管理器中可以看到该进程，但是大小却只有76K，远小于正常执行的大小1568K，同时还可以看到该进程的模块没有被加载。这意味着此时这个进程还是一个空壳。</p><p>那是否可以这样想，当我们以挂起的方式创建一个进程后，通过修改这个空壳的内容，将我们自己的程序拉伸后替换原来外壳程序的内容，那么再恢复这个进程后，表面上看是运行的一开始创建的进程，但实际上运行的内容却是我们刚刚替换的自己的程序。（这也是我们后面写壳的思路）</p><p>那么既然要替换原程序的内容，我们就得需要修改如下两个点：ImageBase和程序入口点。具体怎么修改，下节课讲制作壳程序的原理的时候再详细说明，这里先说下如何获取外壳程序进程的ImageBase和程序入口点。看下面的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    STARTUPINFO ie_si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">    PROCESS_INFORMATION ie_pi;</span><br><span class="line">    ie_si.cb = <span class="keyword">sizeof</span>(ie_si);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以挂起的方式创建进程</span></span><br><span class="line">    TCHAR szBuffer[<span class="number">256</span>] = <span class="string">&quot;C:\\ipmsg.exe&quot;</span>;</span><br><span class="line">    CreateProcess(</span><br><span class="line">        <span class="literal">NULL</span>,                    <span class="comment">// name of executable module</span></span><br><span class="line">        szBuffer,                <span class="comment">// command line string</span></span><br><span class="line">        <span class="literal">NULL</span>,  <span class="comment">// SD</span></span><br><span class="line">        <span class="literal">NULL</span>,               <span class="comment">// SD</span></span><br><span class="line">        FALSE,                   <span class="comment">// handle inheritance option</span></span><br><span class="line">        CREATE_SUSPENDED,      <span class="comment">// creation flags  </span></span><br><span class="line">        <span class="literal">NULL</span>,                    <span class="comment">// new environment block</span></span><br><span class="line">        <span class="literal">NULL</span>,                    <span class="comment">// current directory name</span></span><br><span class="line">        &amp;ie_si,                  <span class="comment">// startup information</span></span><br><span class="line">        &amp;ie_pi                   <span class="comment">// process information</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    CONTEXT contx;  </span><br><span class="line">    contx.ContextFlags = CONTEXT_FULL;  </span><br><span class="line">    GetThreadContext(ie_pi.hThread, &amp;contx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取入口点</span></span><br><span class="line">    DWORD dwEntryPoint = contx.Eax;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取ImageBase</span></span><br><span class="line">    <span class="type">char</span>* baseAddress = (CHAR *) contx.Ebx+<span class="number">8</span>;</span><br><span class="line">    <span class="built_in">memset</span>(szBuffer,<span class="number">0</span>,<span class="number">256</span>);</span><br><span class="line">    ReadProcessMemory(ie_pi.hProcess,baseAddress,szBuffer,<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    ResumeThread(ie_pi.hThread);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个程序中，我们想要获取目标进程ipmsg.exe的入口点和ImageBase，可以通过以挂起的方式创建目标进程，然后获取此时目标进程的上下文（通过GetThreadContext函数）。注意，目标进程的<strong>入口点</strong>保存在contx.Eax中，<strong>ImageBase的地址</strong>保存在contx.Ebx+8中，这两个值目前记住就好，想要了解的话需要涉及内核中PEB的知识。另外需要注意的是，contx.Eax中保存的是程序入口点，这个值就是目标程序的入口点，可以直接打印；而contx.Ebx+8中存放的是目标进程ImageBase的地址，但是不能简单的通过*（contx.Ebx+8）获取，因为这个地址不在当前的程序中，而是在目标进程ipmsg.exe中，所以可以通过ReadProcessMemory函数来读取目标进程的地址来获取。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上节课讲解了CreateProcess函数，并介绍了其中的几个参数。这节课来介绍另外几个参数，并且会讲解如何以挂起方式创建进程，为我们下一节课写一个简单的加密壳打下基础。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Win32：进程创建与句柄表</title>
    <link href="http://example.com/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/"/>
    <id>http://example.com/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/</id>
    <published>2022-05-13T06:29:24.000Z</published>
    <updated>2022-08-25T06:02:43.061Z</updated>
    
    <content type="html"><![CDATA[<p>上一章节学习了线程相关的知识。有关线程的同步与互斥，例如临界区与互斥量等的问题，网络上有很多资料，这里不做赘述。本章节我们将要学习进程的创建，了解在进程创建过程中系统都做了哪些事情，以及句柄表在内核中的表现形式。</p><span id="more"></span><h1 id="进程的创建过程"><a href="#进程的创建过程" class="headerlink" title="进程的创建过程"></a>进程的创建过程</h1><p>首先来区分一下三个概念：程序、镜像、进程。</p><p>程序就是一个存在于磁盘上的PE格式的文件。镜像就是程序在内存中拉伸后的ImageBuffer，这里面是没有线程的。进程就是在内存中运行着的程序，结构与ImageBuffer一样，但是这里面有线程。</p><p>一个程序是怎样运行起来的？</p><p><img src="/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/1.PNG"></p><p>步骤1：当系统启动后，创建一个进程：Explorer.exe 也就是桌面进程。</p><p>步骤2：当用户双击某一个EXE时，Explorer进程使用CreateProcess函数创建被双击的EXE，也就是说，我们在桌面上双击创建的进程都是Explorer进程的子进程。</p><p>下面来研究一下，CreateProcess函数都做了哪些事情</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">CreateProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">  LPCTSTR lpApplicationName,                 <span class="comment">// name of executable module</span></span></span><br><span class="line"><span class="params">  LPTSTR lpCommandLine,                      <span class="comment">// command line string</span></span></span><br><span class="line"><span class="params">  LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// SD</span></span></span><br><span class="line"><span class="params">  LPSECURITY_ATTRIBUTES lpThreadAttributes,  <span class="comment">// SD</span></span></span><br><span class="line"><span class="params">  BOOL bInheritHandles,                      <span class="comment">// handle inheritance option</span></span></span><br><span class="line"><span class="params">  DWORD dwCreationFlags,                     <span class="comment">// creation flags</span></span></span><br><span class="line"><span class="params">  LPVOID lpEnvironment,                      <span class="comment">// new environment block</span></span></span><br><span class="line"><span class="params">  LPCTSTR lpCurrentDirectory,                <span class="comment">// current directory name</span></span></span><br><span class="line"><span class="params">  LPSTARTUPINFO lpStartupInfo,               <span class="comment">// startup information</span></span></span><br><span class="line"><span class="params">  LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// process information，OUT类型</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p><strong>1、创建内核对象</strong></p><p>当我们在3环调用CreateProcess函数时，实际上是系统在0环(内核层)调用NtCreateProcess，这个函数会在该进程的高2G创建一块内存，用来存放一张表(这张表就是句柄表)。在进程刚刚被创建时，这张表是空的。当我们在这个进程中创建其他的内核对象，比如CreateProcess、CreateThread、CreateEvent、CreateMutex、CreateFile、CreateFileMapping等时，我们会得到这些内核对象的地址。但是如果直接将这些地址返回给3环的程序是不安全的，因为有可能会对这些地址进行恶意或者无意的修改导致错误。因此会对这些地址给一个编号，这个编号就是我们说的句柄。</p><p><img src="/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/2.PNG"></p><p><strong>2、分配4GB的虚拟空间(Windows32位)</strong></p><p>这部分内容前面章节已经讲过，直接上图</p><p><img src="/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/3.PNG"></p><p><strong>3、创建进程的主线程</strong></p><p>当进程的空间创建完毕，EXE与导入表中的DLL都正确加载完毕后，会创建一个线程。当线程得到CPU的时候，程序就开始指向了，EIP的初始值设定为：ImageBase+OEP。然后程序就可以运行起来了。</p><p>创建成功后，会将进程的句柄和ID、主线程的句柄和ID存储在一个结构中，该结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_INFORMATION</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   HANDLE hProcess;<span class="comment">//进程句柄</span></span><br><span class="line">   HANDLE hThread;<span class="comment">//主线程句柄</span></span><br><span class="line">   DWORD dwProcessId;<span class="comment">//进程ID</span></span><br><span class="line">   DWORD dwThreadId;<span class="comment">//线程ID</span></span><br><span class="line">&#125; PROCESS_INFORMATION;</span><br></pre></td></tr></table></figure><p>该结构就是CreateProcess函数的最后一个OUT参数。至此，整个进程创建的过程结束。</p><p>可以总结一句比较经典的话：<strong>进程就是4GB，线程就是EIP</strong>。</p><h1 id="有关CreateProcess函数"><a href="#有关CreateProcess函数" class="headerlink" title="有关CreateProcess函数"></a>有关CreateProcess函数</h1><p>这个函数有很多参数，而且每个参数都比较重要，这里先对前两个和后两个参数进行讲解。</p><p>第一个参数为lpApplicationName，也就是要打开的进程名字，应该指定程序的完整路径。</p><p>第二个参数为lpCommandLine，命令行参数，不仅可以指定进程名，还可以指定给要创建的进程传参。</p><p>上面两个参数均可以创建一个进程。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">VOID <span class="title function_">TestCreateProcessByAPPName</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line"></span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line">TCHAR szApplicationName[] =TEXT(<span class="string">&quot;c://program files//internet explorer//iexplore.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">BOOL res = CreateProcess(</span><br><span class="line">szApplicationName, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">FALSE, </span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, &amp;si, &amp;pi);   </span><br><span class="line">&#125;</span><br><span class="line">VOID <span class="title function_">TestCreateProcessByCmdline</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line"></span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line">TCHAR szCmdline[] =TEXT(<span class="string">&quot;c://program files//internet explorer//iexplore.exe http://www.ifeng.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">BOOL res = CreateProcess(</span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">szCmdline, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">FALSE, </span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, &amp;si, &amp;pi); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>倒数第二个参数为lpStartupInfo，是一个结构，用来设定要创建的应用程序的属性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">STARTUPINFO</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   DWORD cb;</span><br><span class="line">   PSTR lpReserved;</span><br><span class="line">   PSTR lpDesktop;</span><br><span class="line">   PSTR lpTitle;</span><br><span class="line">   DWORD dwX;</span><br><span class="line">   DWORD dwY;</span><br><span class="line">   DWORD dwXSize;</span><br><span class="line">   DWORD dwYSize;</span><br><span class="line">   DWORD dwXCountChars;</span><br><span class="line">   DWORD dwYCountChars;</span><br><span class="line">   DWORD dwFillAttribute;</span><br><span class="line">   DWORD dwFlags;</span><br><span class="line">   WORD wShowWindow;</span><br><span class="line">   WORD cbReserved2;</span><br><span class="line">   PBYTE lpReserved2;</span><br><span class="line">   HANDLE hStdInput;</span><br><span class="line">   HANDLE hStdOutput;</span><br><span class="line">   HANDLE hStdError;</span><br><span class="line">&#125; STARTUPINFO, *LPSTARTUPINFO;</span><br></pre></td></tr></table></figure><p>一般情况下，只需要对该结构的第一个成员赋值就行了，该值为当前结构的大小。</p><p>最后一个参数lpProcessInformation前面讲解过，也是一个结构，存储了进程与主线程的句柄和ID。下面关于句柄与ID进行一下说明，两者概念很多人容易混淆。</p><p>1、句柄与ID都是系统分配的一个编号，句柄是客户程序使用，ID主要是系统调度时使用。</p><p>2、调用CloseHandle关闭进程或者线程句柄的时候，只是让内核计数器减少一个，并不是终止进程或者线程。<strong>进程或线程将继续运行，直到它自己终止运行</strong>(在我们创建和打开内核对象时，该内核对象计数器会+1，内核对象计数器不为0时代表该内核对象还在被使用中)。</p><p>3、线程与进程ID是不可能相同的，但是并不意味着我们得到了ID就能对其进行操作。因为一个进程结束后再运行起来时，其ID是有可能会变化的，前面的那个ID有可能被赋给了其他进程或线程。因此我们3环的客户程序一般都是通过句柄操作。</p><h1 id="进程终止"><a href="#进程终止" class="headerlink" title="进程终止"></a>进程终止</h1><p>与线程类似，进程终止也有三种方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、VOID　<span class="title function_">ExitProcess</span><span class="params">(UINT fuExitCode)</span>;<span class="comment">//进程自己调用</span></span><br><span class="line"><span class="number">2</span>、BOOL <span class="title function_">TerminateProcess</span><span class="params">(HANDLE hProcess, UINT fuExitCode)</span>;<span class="comment">//终止其他进程</span></span><br><span class="line"><span class="number">3</span>、ExitThread;<span class="comment">//终止进程中的所有线程，进程也会终止</span></span><br></pre></td></tr></table></figure><p>可以通过GetExitCodeProcess函数获取进程退出结束的退出码。</p><p>进程终止时的相关操作：</p><p>1、进程中剩余的所有线程全部终止运行</p><p>2、进程指定的所有用户对象均被释放，所有内核对象均被关闭</p><p>3、进程内核对象的状态变成收到通知的状态</p><p>4、进程内核对象的使用计数递减1</p><h1 id="句柄的继承"><a href="#句柄的继承" class="headerlink" title="句柄的继承"></a>句柄的继承</h1><p>如果想要让两个进程共享一个内核对象，一种方法是可以在一个进程中创建一个内核对象，并为这个对象起一个名字，然后在另一个进程中通过这个名字打开这个内核对象。</p><p>还有一种方法是通过句柄继承。前面讲过，一个进程在创建时，会创建一张句柄表。那么通过这个进程创建的子进程就可以继承父进程的句柄表。使得不同的进程拥有相同的内核对象。</p><p>以CreateEvent函数为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HANDLE  <span class="title function_">CreateEvent</span><span class="params">(</span></span><br><span class="line"><span class="params">　　LPSECURITY_ATTRIBUTES  lpEventAttributes,<span class="comment">// 安全属性 </span></span></span><br><span class="line"><span class="params">　　BOOL  bManualReset,<span class="comment">// 复位方式</span></span></span><br><span class="line"><span class="params">　　BOOL  bInitialState,<span class="comment">// 初始状态</span></span></span><br><span class="line"><span class="params">　　LPCTSTR  lpName <span class="comment">// 对象名称 </span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>第一个参数lpEventAttributes为一个结构，表示该内核对象是否能被继承，NULL表示不能继承。</p><p>第二个参数bManualReset为复位方式。TRUE表示手动复位，必须通过ResetEvent手动将事件恢复到无信号状态。FALSE表示自动复位，当一个线程被释放以后，系统将自动将事件状态复位为无信号状态;对于自动复位的Event对象，仅释放第一个等待到该事件的线程，对其它线程无效；手动复位的Event对象对所有线程有效。</p><p>第三个参数bInitialState为初始状态。TRUE，初始状态有信号；FALSE，初始状态无信号。</p><p>第四个参数lpName为对象名称。</p><p>再来看一下这张图：</p><p><img src="/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/2.PNG"></p><p>当创建内核对象时，安全属性被赋值的话，上图第三个字段就为1，表示该内核对象可以被继承（<strong>注意这里是可以被继承，而不是被继承了</strong>）。安全属性为NULL的话则是0，代表不能被继承。</p><p>那么子进程如何才能继承得到父进程的句柄表中可以被继承的内核对象呢？这就涉及到了CreateProcess函数的第五个参数bInheritHandles。当该值为TRUE时，才能继承父进程句柄表中那些允许被继承的内核对象，为FALSE时，无法继承父进程的所有内核对象（注意这里是将父进程的句柄表复制一份，而不是将内核对象复制）。</p><p>下面做一个实验，进程A创建一个可被继承的内核对象，然后创建一个子进程B来继承它。在A中设置信号的地方下断点，然后在B进程中监听这个对象是否发信号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父进程A代码</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> szBuffer[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> szHandle[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//若要创建能继承的句柄，父进程必须指定一个SECURITY_ATTRIBUTES结构并对它进行初始化</span></span><br><span class="line"><span class="comment">//三个成员的意义：大小、默认安全属性、是否可以继承</span></span><br><span class="line">SECURITY_ATTRIBUTES sa;</span><br><span class="line">sa.nLength = <span class="keyword">sizeof</span>(sa);</span><br><span class="line">sa.lpSecurityDescriptor = <span class="literal">NULL</span>;</span><br><span class="line">sa.bInheritHandle = TRUE; </span><br><span class="line"><span class="comment">//创建一个可以被继承的内核对象</span></span><br><span class="line">HANDLE g_hEvent = CreateEvent(&amp;sa, TRUE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//组织命令行参数C:/Documents and Settings/easy/桌面/逆向/B/Debug/B.exe</span></span><br><span class="line"><span class="built_in">sprintf</span>(szHandle,<span class="string">&quot;%x&quot;</span>,g_hEvent);</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer,<span class="string">&quot;C:/Documents and Settings/easy/桌面/逆向/B/Debug/B.exe %s&quot;</span>,szHandle);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义创建进程需要用的结构体</span></span><br><span class="line">STARTUPINFO si = &#123;<span class="number">0</span>&#125;;   </span><br><span class="line">PROCESS_INFORMATION pi;</span><br><span class="line">si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建子进程</span></span><br><span class="line">BOOL res = CreateProcess(</span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">szBuffer, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line">TRUE,<span class="comment">//TRUE说明子进程可以继承父进程的句柄表</span></span><br><span class="line">CREATE_NEW_CONSOLE, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="literal">NULL</span>, &amp;si, &amp;pi); </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置事件为已通知</span></span><br><span class="line">SetEvent(g_hEvent);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭句柄 内核对象不会被销毁，而是对象计数器-1</span></span><br><span class="line">CloseHandle(g_hEvent);  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子进程B代码</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> szBuffer[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(szBuffer,argv[<span class="number">1</span>],<span class="number">8</span>);</span><br><span class="line">DWORD dwHandle = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">sscanf</span>(szBuffer,<span class="string">&quot;%x&quot;</span>,&amp;dwHandle);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,dwHandle);</span><br><span class="line">HANDLE g_hEvent = (HANDLE)dwHandle;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;开始等待.....\n&quot;</span>);</span><br><span class="line"><span class="comment">//当事件变成已通知时 </span></span><br><span class="line">WaitForSingleObject(g_hEvent, INFINITE);</span><br><span class="line"></span><br><span class="line">DWORD dwCode = GetLastError();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;等到消息.....%x\n&quot;</span>,dwCode);</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在A进程中的SetEvent(g_hEvent)处下断点，内核对象event被创建时无信号，B进程会在WaitForSingleObject(g_hEvent, INFINITE)处无限等待直到该对象有信号。</p><p><img src="/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/4.PNG"></p><p>在进程A中单步执行，使内核对象有信号，子进程B将会得到信号，代表子进程继承了父进程的内核对象。</p><p><img src="/2022/05/13/Win32%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8F%A5%E6%9F%84%E8%A1%A8/5.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一章节学习了线程相关的知识。有关线程的同步与互斥，例如临界区与互斥量等的问题，网络上有很多资料，这里不做赘述。本章节我们将要学习进程的创建，了解在进程创建过程中系统都做了哪些事情，以及句柄表在内核中的表现形式。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Win32：线程控制与CONTEXT结构</title>
    <link href="http://example.com/2022/05/10/Win32%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8ECONTEXT%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2022/05/10/Win32%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8ECONTEXT%E7%BB%93%E6%9E%84/</id>
    <published>2022-05-10T05:09:46.000Z</published>
    <updated>2022-05-13T05:26:39.832Z</updated>
    
    <content type="html"><![CDATA[<p>线程是Windows系统的基础，一个进程里面至少有一个线程。有关线程的创建方法，本文不做赘述。在创建完线程后，如何才能使该线程结束或是暂停呢？本文将对windows线程进行剖析。</p><span id="more"></span><h1 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h1><p><strong>终止线程</strong></p><p>1、::ExitThread(DWORD dwExitCode);</p><p>每一个线程都会另外开辟一个堆栈，而这种方式会释放掉当前线程的堆栈，但是在线程中new申请堆空间的内存不会被释放掉。参数dwExitCode可以指定线程的退出码，也就是线程的返回值。该值可以通过GetExitCodeThread函数获取对应线程的退出码。这种方式为<strong>同步调用</strong>。</p><p>2、线程函数返回</p><p>该方式指线程自己执行完毕结束，结束前有机会做任何事，例如释放申请的堆空间。这种方式是推荐使用的最好的方式。</p><p>3、::TerminateThread(hThread,dwExitCode);       ::WaitForSingleObject(hThread,INFINITE);</p><p>前两种方法都需要自己写结束条件，且需要用全局变量来判断。这种不需要，且不会清理掉进程堆栈。这种方式为<strong>异步调用</strong>。</p><p><strong>挂起线程</strong></p><p>::SuspendThread(hThread);</p><p><strong>恢复线程</strong></p><p>::ResumeThread(hThread);</p><p>了解了上面控制线程的几个函数，下面来实现一个小例子，如下图</p><p><img src="/2022/05/10/Win32%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8ECONTEXT%E7%BB%93%E6%9E%84/1.PNG"></p><p>点击开始时，编辑框中的数字从0开始自增1，分别点击其他三个按钮完成对线程相应的控制。代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thread.cpp : Defines the entry point for the application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;resource.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">HWND hEdit;</span><br><span class="line">HANDLE hThread1;</span><br><span class="line"></span><br><span class="line">BOOL CALLBACK <span class="title function_">MainDlgProc</span><span class="params">(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)</span>;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获取文本框内容</span></span><br><span class="line">TCHAR szBuffer[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">DWORD dwIndex = <span class="number">0</span>;</span><br><span class="line">DWORD dwCount;</span><br><span class="line"><span class="keyword">while</span>(dwIndex &lt; <span class="number">10000</span>)</span><br><span class="line">&#123;</span><br><span class="line">GetWindowText(hEdit,szBuffer,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">sscanf</span>( szBuffer, <span class="string">&quot;%d&quot;</span>, &amp;dwCount );</span><br><span class="line">dwCount++;</span><br><span class="line"><span class="built_in">memset</span>(szBuffer,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(szBuffer,<span class="string">&quot;%d&quot;</span>,dwCount);</span><br><span class="line">SetWindowText(hEdit,szBuffer);</span><br><span class="line">Sleep(<span class="number">200</span>);</span><br><span class="line">dwIndex++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> APIENTRY <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance,</span></span><br><span class="line"><span class="params">                     HINSTANCE hPrevInstance,</span></span><br><span class="line"><span class="params">                     LPSTR     lpCmdLine,</span></span><br><span class="line"><span class="params">                     <span class="type">int</span>       nCmdShow)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// <span class="doctag">TODO:</span> Place code here.</span></span><br><span class="line"></span><br><span class="line">DialogBox(hInstance, MAKEINTRESOURCE(IDD_DIALOG_MAIN), <span class="literal">NULL</span>, MainDlgProc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 主对话框回调函数 */</span></span><br><span class="line">BOOL CALLBACK <span class="title function_">MainDlgProc</span><span class="params">(</span></span><br><span class="line"><span class="params"> HWND hDlg,<span class="comment">// handle to dialog box</span></span></span><br><span class="line"><span class="params"> UINT uMsg,<span class="comment">// message</span></span></span><br><span class="line"><span class="params"> WPARAM wParam,<span class="comment">// first message parameter</span></span></span><br><span class="line"><span class="params"> LPARAM lParam<span class="comment">// second message parameter</span></span></span><br><span class="line"><span class="params"> )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(uMsg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WM_INITDIALOG:</span><br><span class="line">hEdit = GetDlgItem(hDlg,IDC_EDIT);</span><br><span class="line">SetWindowText(hEdit,<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"><span class="keyword">case</span> WM_CLOSE:</span><br><span class="line">EndDialog(hDlg, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WM_COMMAND:</span><br><span class="line"><span class="keyword">switch</span> (LOWORD (wParam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> IDC_BUTTON1:</span><br><span class="line">hThread1 = ::CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc1, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//::CloseHandle(hThread1);</span></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"><span class="keyword">case</span> IDC_BUTTON2:</span><br><span class="line">::SuspendThread(hThread1);</span><br><span class="line"><span class="comment">//::CloseHandle(hThread2);</span></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"><span class="keyword">case</span> IDC_BUTTON3:</span><br><span class="line">::ResumeThread(hThread1);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"><span class="keyword">case</span> IDC_BUTTON4:</span><br><span class="line"><span class="comment">//::TerminateThread(hThread,2);</span></span><br><span class="line"><span class="comment">//::WaitForSingleObject(hThread,INFINITE);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//::ExitThread(5);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CONTEXT结构"><a href="#CONTEXT结构" class="headerlink" title="CONTEXT结构"></a>CONTEXT结构</h1><p>一个线程的执行依赖于Windows系统为其分配的CPU时间片，当线程被挂起或结束时，系统不再为其分配CPU时间片。由于Windows操作系统是一个<strong>非实时性</strong>的系统，当进程从挂起状态想要变为恢复状态继续执行时，线程不是立即恢复执行的，而是等待调度程序将线程变为可调度状态，线程才能恢复执行。</p><p>现在思考这样一个问题：</p><p>每个线程在执行的时候，都会独自占用一个CPU,当系统中的线程数量 &gt; CPU的数量时，就会存在多个线程共用一个CPU的情况。但CPU每次只能运行一个线程，Windows每隔20毫秒会进行线程的切换，那比如线程A执行到地址：0x2345678，此时eax:1 ecx:2 edx:3 ebx:4…还有eflag标志寄存器中的值等等。。。此时，线程执行时间到了，被切换到了线程B。。。。当线程B的时间片也到了，再切换会线程A时，系统是如何知道该从哪个地址开始执行呢？被切换前用到的各种寄存器的值该如何恢复呢？</p><p>答案就是CONTETX结构。线程被挂起后，它的上下文就保存在了该结构中，该结构包含了特定处理器的寄存器数据。下面给出CONTEXT结构定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">CONTEXT</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The flags values within this flag control the contents of</span></span><br><span class="line">    <span class="comment">// a CONTEXT record.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If the context record is used as an input parameter, then</span></span><br><span class="line">    <span class="comment">// for each portion of the context record controlled by a flag</span></span><br><span class="line">    <span class="comment">// whose value is set, it is assumed that that portion of the</span></span><br><span class="line">    <span class="comment">// context record contains valid context. If the context record</span></span><br><span class="line">    <span class="comment">// is being used to modify a threads context, then only that</span></span><br><span class="line">    <span class="comment">// portion of the threads context will be modified.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If the context record is used as an IN OUT parameter to capture</span></span><br><span class="line">    <span class="comment">// the context of a thread, then only those portions of the thread&#x27;s</span></span><br><span class="line">    <span class="comment">// context corresponding to set flags will be returned.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The context record is never used as an OUT only parameter.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD ContextFlags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if CONTEXT_DEBUG_REGISTERS is</span></span><br><span class="line">    <span class="comment">// set in ContextFlags.  Note that CONTEXT_DEBUG_REGISTERS is NOT</span></span><br><span class="line">    <span class="comment">// included in CONTEXT_FULL.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   Dr0;</span><br><span class="line">    DWORD   Dr1;</span><br><span class="line">    DWORD   Dr2;</span><br><span class="line">    DWORD   Dr3;</span><br><span class="line">    DWORD   Dr6;</span><br><span class="line">    DWORD   Dr7;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the</span></span><br><span class="line">    <span class="comment">// ContextFlags word contians the flag CONTEXT_FLOATING_POINT.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    FLOATING_SAVE_AREA FloatSave;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the</span></span><br><span class="line">    <span class="comment">// ContextFlags word contians the flag CONTEXT_SEGMENTS.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   SegGs;</span><br><span class="line">    DWORD   SegFs;</span><br><span class="line">    DWORD   SegEs;</span><br><span class="line">    DWORD   SegDs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the</span></span><br><span class="line">    <span class="comment">// ContextFlags word contians the flag CONTEXT_INTEGER.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   Edi;</span><br><span class="line">    DWORD   Esi;</span><br><span class="line">    DWORD   Ebx;</span><br><span class="line">    DWORD   Edx;</span><br><span class="line">    DWORD   Ecx;</span><br><span class="line">    DWORD   Eax;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the</span></span><br><span class="line">    <span class="comment">// ContextFlags word contians the flag CONTEXT_CONTROL.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   Ebp;</span><br><span class="line">    DWORD   Eip;</span><br><span class="line">    DWORD   SegCs;              <span class="comment">// MUST BE SANITIZED</span></span><br><span class="line">    DWORD   EFlags;             <span class="comment">// MUST BE SANITIZED</span></span><br><span class="line">    DWORD   Esp;</span><br><span class="line">    DWORD   SegSs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the ContextFlags word</span></span><br><span class="line">    <span class="comment">// contains the flag CONTEXT_EXTENDED_REGISTERS.</span></span><br><span class="line">    <span class="comment">// The format and contexts are processor specific</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    BYTE    ExtendedRegisters[MAXIMUM_SUPPORTED_EXTENSION];</span><br><span class="line"></span><br><span class="line">&#125; CONTEXT;</span><br></pre></td></tr></table></figure><p>根据上面的定义可以看到，通过对ContextFlags值不同的赋值，就可以得到不同的寄存器的值。</p><p>我们知道，Eip寄存器的作用就是指定CPU要执行指令的地址。因此可以通过修改Eip的值来达到线程切换的目的，来执行自己想要执行的代码。下面的代码即可以完成这个任务(具体的应用以后会讲解，这里只做示范)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过挂起线程后获取context结构的相关值，来修改Eip寄存器</span></span><br><span class="line"><span class="comment">//挂起线程</span></span><br><span class="line">SuspendThread(线程句柄);</span><br><span class="line"></span><br><span class="line">CONTEXT context</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置要获取的类型</span></span><br><span class="line">context.ContextFlags = CONTEXT_CONTROL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line">BOOL ok = ::GetThreadContext(hThread,&amp;context);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置</span></span><br><span class="line">context.Eip = <span class="number">0x401000</span>;</span><br><span class="line"></span><br><span class="line">SetThreadContext(hThread,&amp;context);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;线程是Windows系统的基础，一个进程里面至少有一个线程。有关线程的创建方法，本文不做赘述。在创建完线程后，如何才能使该线程结束或是暂停呢？本文将对windows线程进行剖析。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>PE研究：导入表注入</title>
    <link href="http://example.com/2022/05/05/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2022/05/05/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/</id>
    <published>2022-05-05T01:24:38.000Z</published>
    <updated>2022-05-05T09:30:03.665Z</updated>
    
    <content type="html"><![CDATA[<p>前一章节我们学习了导入表的原理。我们知道，一个EXE文件在需要用到DLL时，会根据导入表加载相关的DLL。因此如果我们通过修改导入表，来达到加载我们自己的DLL的目的，这就是导入表注入。</p><span id="more"></span><h1 id="注入的种类"><a href="#注入的种类" class="headerlink" title="注入的种类"></a>注入的种类</h1><p>所谓注入的本质，就是让一个程序能够执行我们自己的代码。在介绍导入表的原理与实现之前，先来说一下注入的大致分类：</p><p>1、注册表注入</p><p>2、导入表注入</p><p>3、特洛伊注入(DLL劫持)</p><p>4、远程线程注入</p><p>5、无DLL注入</p><p>6、APC注入</p><p>7、Windows挂钩注入</p><p>8、输入法注入</p><p>在文章开头已经介绍过了导入表注入的原理，其他的注入类型读者可以自行了解，其中一些注入我们后续也会涉及到，到那时候再继续做讲解。</p><h1 id="导入表注入的步骤"><a href="#导入表注入的步骤" class="headerlink" title="导入表注入的步骤"></a>导入表注入的步骤</h1><p>导入表注入的过程大致是通过新增一个节，将原来的各个导入表移动到新增的节中，然后追加INT表和IAT表，并做相应的修改，具体步骤如下：</p><p>1、首先需要在原本的导入表后面新增一个导入表，但是我们知道，系统通过一块导入表结构大小的内存为0时来判断导入表的结束，因此需要预留足够的空间来添加一个新的导入表。为了简便，我在这里直接添加了一个节。</p><p>2、修改目录项中导入表的地址与大小为新的值。</p><p>3、追加8个字节INT表与8个字节的IAT表，因为这两个表宽度为4字节，并且还要预留4字节的0作为结尾。并修改最后一个导入表的OriginalFistThunk与FistThunk。</p><p>4、追加一个IMAGE_IMPORT_BY_NAME 结构，前2个字节是0 后面是函数名称字符串，并将该结构的RVA赋值给INT和IAT表中的第一项</p><p>5、分配空间存储DLL名称字符串 并将该字符串的RVA赋值给Name属性</p><p>实现代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 代码实现导入表注入 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inject_Import_Table</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一步：在DLL中新增一个节，并返回新增后的FOA</span></span><br><span class="line"><span class="type">char</span>* ImageBuffer = file_to_image();</span><br><span class="line"><span class="type">char</span>* ImageBuffer2 = AddSection(ImageBuffer, <span class="number">0x1000</span>);</span><br><span class="line"><span class="type">char</span>* NewBuffer = image_to_file(ImageBuffer2);</span><br><span class="line"></span><br><span class="line">dos_header* pdh = (dos_header*)NewBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* importtable_rva = (<span class="type">char</span>*)poph-&gt;DataDirectory[<span class="number">1</span>].VirtualAddress;</span><br><span class="line"><span class="type">char</span>* importtable_foa = RVA_TO_FOA(importtable_rva);</span><br><span class="line">image_import_directory* piid = (image_import_directory*)(importtable_foa + (<span class="type">int</span>)NewBuffer);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* FOA_add = (<span class="type">char</span>*)(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步：移动原导入表到新增节中</span></span><br><span class="line"><span class="type">char</span>* src_import_table = (<span class="type">char</span>*)(RVA_TO_FOA((<span class="type">char</span>*)poph-&gt;DataDirectory[<span class="number">1</span>].VirtualAddress) + (<span class="type">int</span>)NewBuffer);</span><br><span class="line"><span class="type">char</span>* des_import_table = (<span class="type">char</span>*)(FOA_add + (<span class="type">int</span>)NewBuffer);</span><br><span class="line"><span class="type">int</span> Size_import = poph-&gt;DataDirectory[<span class="number">1</span>].Size;</span><br><span class="line"><span class="built_in">memcpy</span>(des_import_table, src_import_table, Size_import);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步：修复目录项中的地址值，指向新的IMAGE_IMPORT_TABLE, 注意转换成RVA</span></span><br><span class="line">poph-&gt;DataDirectory[<span class="number">1</span>].VirtualAddress = (<span class="type">int</span>)FOA_add - (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData</span><br><span class="line">                                   + (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第四步: 在新的导入表后面，追加一个导入表，并修正目录项中的Size值</span></span><br><span class="line">image_import_directory* New_piid = (image_import_directory*)((<span class="type">int</span>)des_import_table + Size_import - <span class="number">20</span>);</span><br><span class="line">poph-&gt;DataDirectory[<span class="number">1</span>].Size += <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第五步: 追加8个字节的INT表, 8个字节的IAT表, 并修改导入表两个地址值，注意修改为RVA</span></span><br><span class="line"><span class="type">int</span>* p_INT = (<span class="type">int</span>*)((<span class="type">int</span>)New_piid + <span class="number">40</span>);</span><br><span class="line"><span class="type">int</span>* p_IAT = (<span class="type">int</span>*)((<span class="type">int</span>)p_INT + <span class="number">8</span>);</span><br><span class="line">New_piid-&gt;OriginalFistThunk = (<span class="type">int</span>)p_INT - (<span class="type">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress;</span><br><span class="line">New_piid-&gt;FirstThunk = (<span class="type">int</span>)p_IAT - (<span class="type">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第六步：追加一个IMAGE_IMPORT_BY_NAME 结构，前2个字节是0 后面是函数名称字符串</span></span><br><span class="line"><span class="type">char</span> func_name[] = <span class="string">&quot;ExportFunction&quot;</span>;</span><br><span class="line"><span class="type">char</span>* p_funcname = (<span class="type">char</span>*)((<span class="type">int</span>)p_IAT + <span class="number">10</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(p_funcname, func_name, <span class="keyword">sizeof</span>(func_name));</span><br><span class="line"></span><br><span class="line"><span class="comment">//第七步：将IMAGE_IMPORT_BY_NAME结构的RVA赋值给INT和IAT表中的第一项</span></span><br><span class="line">*p_INT = (<span class="type">int</span>)p_funcname - (<span class="type">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress - <span class="number">2</span>;</span><br><span class="line">*p_IAT = *p_INT;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第八步：分配空间存储DLL名称字符串 并将该字符串的RVA赋值给Name属性</span></span><br><span class="line"><span class="type">char</span> Dll_name[] = <span class="string">&quot;InjectDll.dll&quot;</span>;</span><br><span class="line"><span class="type">char</span>* p_DLLName = (<span class="type">char</span>*)((<span class="type">int</span>)p_funcname + <span class="keyword">sizeof</span>(func_name));</span><br><span class="line"><span class="built_in">memcpy</span>(p_DLLName, Dll_name, <span class="keyword">sizeof</span>(Dll_name));</span><br><span class="line"></span><br><span class="line">New_piid-&gt;Name = (<span class="type">int</span>)p_DLLName - (<span class="type">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存盘</span></span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">size = (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData) + (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;SizeOfRawData);</span><br><span class="line">FILE* pfp = fopen(<span class="string">&quot;C:\\Documents and Settings\\easy\\桌面\\6.exe&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">fwrite(NewBuffer, size, <span class="number">1</span>, pfp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看一下注入的InjectDll.dll的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">(HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//加载DLL</span></span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">Init();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">//卸载DLL</span></span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">Destroy();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DLL内的函数代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">MessageBox(<span class="number">0</span>,<span class="string">&quot;Init&quot;</span>,<span class="string">&quot;Init&quot;</span>,MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//卸载函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Destroy</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">MessageBox(<span class="number">0</span>,<span class="string">&quot;Destroy&quot;</span>,<span class="string">&quot;Destroy&quot;</span>,MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出函数，任何你想要执行的代码都可以放到这里面</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ExportFunction</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">MessageBox(<span class="number">0</span>,<span class="string">&quot;ExportFunction&quot;</span>,<span class="string">&quot;ExportFunction&quot;</span>,MB_OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验效果：</p><p>运行导入表注入的程序：</p><p><img src="/2022/05/05/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/1.PNG"></p><p>可以看到，在程序启动时，DLL被加载到该程序的进程空间，成功执行了初始化函数。</p><p>下面关闭软件后：</p><p><img src="/2022/05/05/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/2.PNG"></p><p>关闭后成功执行了卸载函数。</p><p>然后用PE查看器看一下导入表：</p><p><img src="/2022/05/05/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/3.PNG"></p><p>可以看到，我们自己的DLL成功注入到了该程序中，并且识别到了我们的导出函数。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前一章节我们学习了导入表的原理。我们知道，一个EXE文件在需要用到DLL时，会根据导入表加载相关的DLL。因此如果我们通过修改导入表，来达到加载我们自己的DLL的目的，这就是导入表注入。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>PE研究：IAT表与导入表</title>
    <link href="http://example.com/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/"/>
    <id>http://example.com/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/</id>
    <published>2022-04-28T05:21:37.000Z</published>
    <updated>2022-05-01T08:15:49.617Z</updated>
    
    <content type="html"><![CDATA[<p>我们已经学习过了导出表，导出表记录的是该文件的导出函数。相对应的，导入表记录的是该文件使用的DLL以及DLL中的函数。本章节来学习导入表的工作原理。</p><span id="more"></span><h1 id="一个有趣的实验"><a href="#一个有趣的实验" class="headerlink" title="一个有趣的实验"></a>一个有趣的实验</h1><p>先来观察一个现象：</p><p><img src="/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/1.PNG"></p><p>将上面这一个小程序使用release版编译，得到一个EXE文件，并使用OD打开它，可以得到该程序<strong>运行时</strong>的内存：<img src="/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/2.PNG"></p><p>可以看到，在调用MessageBox函数时，反汇编代码是CALL [40509C]，于是在数据窗口我们看到了40509C这个地址存储的是MessageBox函数的地址，很明显77D507EA这个地址位于DLL的领空。</p><p>接下来我们用一个16进制文本编辑器，查看一下该文件在<strong>运行前</strong>的对应地址内存：</p><p>由于需要看的是运行前的地址，因此需要把运行时40509C转化为FOA，先来看一下对齐大小：</p><p><img src="/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/3.PNG"></p><p>由于文件对齐与内存对齐是一致的，而且ImageBase为400000，所以转换成FOA为509C。</p><p><img src="/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/4.PNG"></p><p>在文件中509C的位置存放的不是运行时的函数的地址，而是一个RVA偏移551C，再次转换为FOA为551C</p><p><img src="/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/5.PNG"></p><p>可以看到，在运行前，40509C这个地址存放的是函数名字的RVA偏移，而在运行时，这里面的内容被替换为了真正的函数地址。</p><p>那么这里就出现了一个问题，一般在我们自己写的程序中，我们调用了一个我们自己写的函数，它的反汇编语言应该是call 0x12345678，不管是在程序运行前还是运行后，都是这个表现形式。而这里我们调用了MessageBox，在运行时却是call [0x12345678]，0x12345678在程序运行前后存放的内容是不一样的。</p><p>这里的关键就在于，MessageBox是DLL提供的函数，DLL在被需要时才会被载入内存。这也就是为什么调用MessageBox的时候地址不能写固定的地址，因为DLL有可能被重定位。</p><h1 id="导入表结构"><a href="#导入表结构" class="headerlink" title="导入表结构"></a>导入表结构</h1><p>目录项的第二张表就是导入表，通过将RVA转换成FOA，可以在FileBuffer中定位它，导入表结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   Characteristics;           </span><br><span class="line">        DWORD   OriginalFirstThunk;<span class="comment">//RVA，指向IMAGE_THUNK_DATA结构数组，INT表</span></span><br><span class="line">    &#125;;</span><br><span class="line">    DWORD   TimeDateStamp;<span class="comment">//时间戳</span></span><br><span class="line">    DWORD   ForwarderChain;              </span><br><span class="line">    DWORD   Name;<span class="comment">//RVA，指向dll名字，该名字已0结尾</span></span><br><span class="line">    DWORD   FirstThunk;<span class="comment">//RVA，指向IMAGE_THUNK_DATA结构数组，IAT表</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure><p>在PE文件加载前，IAT表与INT表内容相同，存储的都是函数的名字或者导出序号：</p><p><img src="/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/6.PNG"></p><p>在PE文件加载后，IAT表的内容被替换为对应函数的地址：</p><p><img src="/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/7.PNG"></p><p>一个该导入表结构对应着一个DLL文件，里面记录了导入该DLL中的函数，在PE文件中有很多个导入表结构连在一起，以一个导入表结构大小的0为结尾。</p><p>下面依次说明各个字段</p><p>1、OriginalFirstThunk</p><p><img src="/2022/04/28/PE%E7%A0%94%E7%A9%B6%EF%BC%9AIAT%E8%A1%A8%E4%B8%8E%E5%AF%BC%E5%85%A5%E8%A1%A8/8.PNG"></p><p>指向INT表，表里面的内容是一个IMAGE_THUNK_DATA32结构，该结构实际上是一个4字节的数据，当最高位为0代表这是一个RVA，指向一个结构，该结构如上图所示，该结构指向导入函数名字；当最高位为1是，除去最高位剩下的31位代表函数的序号。</p><p>2、Name</p><p>该字段是一个RVA，指向一个DLL的名字。</p><p>3、FirstThunk</p><p>指向IAT表，该表结构在文件运行前与INT表内容一致(理论上)，在运行时IAT表被系统替换为对应函数的地址。</p><p>注意我这里写的是理论上，因为有可能有一些函数地址在实际运行前就已经写进了IAT表。我们称这种现象为绑定导入，记录这些函数信息的表叫做绑定导入表，我们这里不做赘述。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们已经学习过了导出表，导出表记录的是该文件的导出函数。相对应的，导入表记录的是该文件使用的DLL以及DLL中的函数。本章节来学习导入表的工作原理。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>PE研究：移动导出表与重定位表</title>
    <link href="http://example.com/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/"/>
    <id>http://example.com/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/</id>
    <published>2022-04-26T04:35:16.000Z</published>
    <updated>2022-04-27T06:30:07.462Z</updated>
    
    <content type="html"><![CDATA[<p>在一个PE文件中，各种表是由编译器生成的，表里面存储了非常重要的信息。在程序启动的时候，系统会根据这些表做各种初始化的工作。但是假如有一个小需求，需要对.exe文件的二进制代码进行加密来保护程序，但问题是：这些表的信息和程序的代码与数据都是混合在一起的，一旦被加密，系统也无法准确定位这些表，也就无法做初始化的工作，程序也就无法启动。因此，移动各种表，是对程序加密与解密的基础。</p><span id="more"></span><p>上一章节学习了导出表与重定位表，本节就来移动它们。</p><h1 id="移动导出表"><a href="#移动导出表" class="headerlink" title="移动导出表"></a>移动导出表</h1><p>先来看一张移动导出表的结构图</p><p><img src="/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/1.PNG"></p><p>这里给出一种较为合理的移动方法(注意本方法是在FileBuffer中进行的，省去了拉伸的步骤)：</p><p>1、在DLL中新增一个节，并返回新增后的FOA。这个节里面存放移动出来的各种东西。</p><p>2、在新增节开头复制AddressOfFunctions表，长度为4*NumberOfFunctions。</p><p>3、紧接着复制AddressOfNameOrdinals表，长度为2*NumberOfNames。</p><p>4、紧接着复制AddressOfNames表，长度为4*NumberOfNames。</p><p>5、紧接着复制所有函数名，复制的时候直接修复名称地址表，指向新移动的位置。</p><p>6、在最后一个函数名后面复制导出表结构。</p><p>7、修复新的导出表结构指向三个表的地址，指向新的表。</p><p>8、修复项目录中的值，指向新的导出表结构。</p><p>下面给出实现代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 移动导出表, 注意修复地址时转换成RVA */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move_Export</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//第一步：在DLL中新增一个节，并返回新增后的FOA</span></span><br><span class="line"><span class="type">char</span>* ImageBuffer = <span class="built_in">file_to_image</span>();</span><br><span class="line">    <span class="comment">//增加节的函数在前面的章节有讲过</span></span><br><span class="line"><span class="type">char</span>* ImageBuffer2 = <span class="built_in">AddSection</span>(ImageBuffer, <span class="number">4096</span>);</span><br><span class="line"><span class="type">char</span>* NewBuffer = <span class="built_in">image_to_file</span>(ImageBuffer2);</span><br><span class="line"></span><br><span class="line">dos_header* pdh = (dos_header*)NewBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line">image_export_directory* pied = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span>* export_rva = (<span class="type">char</span>*)poph-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line"><span class="type">char</span>* export_foa = <span class="built_in">RVA_TO_FOA</span>(export_rva);</span><br><span class="line">pied = (image_export_directory*)(export_foa + (<span class="type">int</span>)NewBuffer);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* FOA_add = (<span class="type">char</span>*)(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步：复制AddressOfFunctions表</span></span><br><span class="line"><span class="type">char</span>* src_AddressOfFunctions = (<span class="type">char</span>*)(<span class="built_in">RVA_TO_FOA</span>((<span class="type">char</span>*)pied-&gt;AddressOfFunctions) + (<span class="type">int</span>)NewBuffer);</span><br><span class="line"><span class="type">char</span>* des_AddressOfFunctions = (<span class="type">char</span>*)(FOA_add + (<span class="type">int</span>)NewBuffer);</span><br><span class="line"><span class="built_in">memcpy</span>(des_AddressOfFunctions, src_AddressOfFunctions, <span class="number">4</span>*pied-&gt;NumberOfFunctions);  <span class="comment">//长度：4*NumberOfFunctions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步：复制AddressOfNameOrdinals表</span></span><br><span class="line"><span class="type">char</span>* src_AddressOfNameOrdinals = (<span class="type">char</span>*)(<span class="built_in">RVA_TO_FOA</span>((<span class="type">char</span>*)pied-&gt;AddressOfNameOrdinals) + (<span class="type">int</span>)NewBuffer);</span><br><span class="line"><span class="type">char</span>* des_AddressOfNameOrdinals = (<span class="type">char</span>*)(FOA_add + (<span class="type">int</span>)NewBuffer + <span class="number">4</span>*pied-&gt;NumberOfFunctions);</span><br><span class="line"><span class="built_in">memcpy</span>(des_AddressOfNameOrdinals, src_AddressOfNameOrdinals, <span class="number">2</span>*pied-&gt;NumberOfNames);  <span class="comment">//长度：NumberOfNames*2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第四步：复制AddressOfNames表</span></span><br><span class="line"><span class="type">char</span>* src_AddressOfNames = (<span class="type">char</span>*)(<span class="built_in">RVA_TO_FOA</span>((<span class="type">char</span>*)pied-&gt;AddressOfNames) + (<span class="type">int</span>)NewBuffer);</span><br><span class="line"><span class="type">char</span>* des_AddressOfNames = (<span class="type">char</span>*)((<span class="type">int</span>)des_AddressOfNameOrdinals + <span class="number">2</span>*pied-&gt;NumberOfNames);</span><br><span class="line"><span class="built_in">memcpy</span>(des_AddressOfNames, src_AddressOfNames, <span class="number">4</span>*pied-&gt;NumberOfNames);  <span class="comment">//长度：NumberOfNames*4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第五步：复制所有的函数名</span></span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;           <span class="comment">//记录每一个函数名长度</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;         <span class="comment">//记录全部函数名总长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pied-&gt;NumberOfNames - <span class="number">1</span>; i++)     <span class="comment">//复制除了最后一个函数名的函数名</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* src_name = (<span class="type">char</span>*)((<span class="built_in">RVA_TO_FOA</span>((<span class="type">char</span>*)*((<span class="type">int</span>*)src_AddressOfNames + i)) + (<span class="type">int</span>)NewBuffer));</span><br><span class="line"><span class="type">char</span>* des_name = (<span class="type">char</span>*)((<span class="type">int</span>)des_AddressOfNames + <span class="number">4</span>*pied-&gt;NumberOfNames + len);</span><br><span class="line">len = *((<span class="type">int</span>*)src_AddressOfNames + i + <span class="number">1</span>) - *((<span class="type">int</span>*)src_AddressOfNames + i);</span><br><span class="line"><span class="built_in">memcpy</span>(des_name, src_name, len);</span><br><span class="line"><span class="type">int</span>* New_Addressname = ((<span class="type">int</span>*)des_AddressOfNames + i);</span><br><span class="line">*New_Addressname = (<span class="type">int</span>)((<span class="type">int</span>)des_name - (<span class="type">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress);   <span class="comment">//修复新的函数名称地址表,转换成RVA</span></span><br><span class="line">count += len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* src_last_func_name = (<span class="type">char</span>*)(<span class="built_in">RVA_TO_FOA</span>((<span class="type">char</span>*)(*(<span class="type">int</span>*)src_AddressOfNames)) + (<span class="type">int</span>)NewBuffer) + count;</span><br><span class="line"><span class="type">char</span>* des_last_func_name = (<span class="type">char</span>*)((<span class="type">int</span>)des_AddressOfNames + <span class="number">4</span>*pied-&gt;NumberOfNames) + count;</span><br><span class="line"><span class="type">int</span>* Last_New_AddressesName = (<span class="type">int</span>*)des_AddressOfNames + pied-&gt;NumberOfNames - <span class="number">1</span>;</span><br><span class="line">*Last_New_AddressesName = (<span class="type">int</span>)des_last_func_name - (<span class="type">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress;   <span class="comment">//修复最后一个函数名称地址表,转换成RVA</span></span><br><span class="line"><span class="keyword">while</span>(*src_last_func_name)      <span class="comment">//复制最后一个函数名</span></span><br><span class="line">&#123;</span><br><span class="line">*des_last_func_name = *src_last_func_name;</span><br><span class="line">src_last_func_name++;</span><br><span class="line">des_last_func_name++;</span><br><span class="line">&#125;</span><br><span class="line">*des_last_func_name = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第六步：复制IMAGE_EXPORT_DIRECTORY导出表结构</span></span><br><span class="line"><span class="type">char</span>* src_IMAGE_EXPORT_DIRECTORY = (<span class="type">char</span>*)(<span class="built_in">RVA_TO_FOA</span>((<span class="type">char</span>*)(poph-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress)) + (<span class="type">int</span>)NewBuffer);</span><br><span class="line"><span class="type">char</span>* des_IMAGE_EXPORT_DIRECTORY = des_last_func_name + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(des_IMAGE_EXPORT_DIRECTORY, src_IMAGE_EXPORT_DIRECTORY, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第七步：修复IMAGE_EXPORT_DIRECTORY结构中的三个表地址</span></span><br><span class="line">image_export_directory* New_IMAGE_EXPORT_DIRECTORY = (image_export_directory*)des_IMAGE_EXPORT_DIRECTORY;</span><br><span class="line">New_IMAGE_EXPORT_DIRECTORY-&gt;AddressOfFunctions = (<span class="type">int</span>)des_AddressOfFunctions - (<span class="type">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress;</span><br><span class="line">New_IMAGE_EXPORT_DIRECTORY-&gt;AddressOfNameOrdinals = (<span class="type">int</span>)des_AddressOfNameOrdinals - (<span class="type">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress;</span><br><span class="line">New_IMAGE_EXPORT_DIRECTORY-&gt;AddressOfNames = (<span class="type">int</span>)des_AddressOfNames - (<span class="type">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第八步：修复目录项中的值，指向新的IMAGE_EXPORT_DIRECTORY,注意转换成RVA</span></span><br><span class="line">poph-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress = </span><br><span class="line">(<span class="type">int</span>)des_IMAGE_EXPORT_DIRECTORY - (<span class="type">int</span>)NewBuffer - (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData</span><br><span class="line">+ (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存盘</span></span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">size = (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData) + (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;SizeOfRawData);</span><br><span class="line">FILE* pfp = <span class="built_in">fopen</span>(<span class="string">&quot;C:\\Documents and Settings\\easy\\桌面\\moveexport.dll&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="built_in">fwrite</span>(NewBuffer, size, <span class="number">1</span>, pfp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移动表前的DLL的节与导出函数如下：</p><p><img src="/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/2.PNG"></p><p><img src="/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/3.PNG" alt="3"></p><p>移动之后：</p><p><img src="/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/4.PNG"></p><p><img src="/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/5.PNG"></p><h1 id="移动重定位表"><a href="#移动重定位表" class="headerlink" title="移动重定位表"></a>移动重定位表</h1><p>重定位表的移动相对于导出表比较简单，直接上代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 移动重定向表 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move_Reloc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//第一步：在DLL中新增一个节，并返回新增后的FOA</span></span><br><span class="line"><span class="type">char</span>* ImageBuffer = <span class="built_in">file_to_image</span>();</span><br><span class="line"><span class="type">char</span>* ImageBuffer2 = <span class="built_in">AddSection</span>(ImageBuffer, <span class="number">20480</span>);</span><br><span class="line"><span class="type">char</span>* NewBuffer = <span class="built_in">image_to_file</span>(ImageBuffer2);</span><br><span class="line"></span><br><span class="line">dos_header* pdh = (dos_header*)NewBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"><span class="type">char</span>* basereloc_rva = (<span class="type">char</span>*)poph-&gt;DataDirectory[<span class="number">5</span>].VirtualAddress;</span><br><span class="line"><span class="type">char</span>* basereloc_foa = <span class="built_in">RVA_TO_FOA</span>(basereloc_rva);</span><br><span class="line">image_base_relocation* pibr = (image_base_relocation*)(basereloc_foa + (<span class="type">int</span>)NewBuffer);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* FOA_add = (<span class="type">char</span>*)(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步：复制重定向表</span></span><br><span class="line"><span class="type">char</span>* src_reloc = (<span class="type">char</span>*)(<span class="built_in">RVA_TO_FOA</span>((<span class="type">char</span>*)poph-&gt;DataDirectory[<span class="number">5</span>].VirtualAddress) + (<span class="type">int</span>)NewBuffer);</span><br><span class="line"><span class="type">char</span>* des_reloc = (<span class="type">char</span>*)(FOA_add + (<span class="type">int</span>)NewBuffer);</span><br><span class="line"><span class="type">int</span> reloc_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(pibr-&gt;VirtualAddress !=<span class="number">0</span> &amp;&amp; pibr-&gt;SizeOfBlock != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">reloc_size += pibr-&gt;SizeOfBlock;</span><br><span class="line">pibr = (image_base_relocation*)((<span class="type">char</span>*)pibr + pibr-&gt;SizeOfBlock);</span><br><span class="line">&#125;</span><br><span class="line">pibr = (image_base_relocation*)(basereloc_foa + (<span class="type">int</span>)NewBuffer);  <span class="comment">//将指针重新指向第一个重定向块</span></span><br><span class="line"><span class="built_in">memcpy</span>(des_reloc, src_reloc, reloc_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步：修复目录项中的值，指向新的IMAGE_BASE_RELOCATION, 注意转换成RVA</span></span><br><span class="line">poph-&gt;DataDirectory[<span class="number">5</span>].VirtualAddress = (<span class="type">int</span>)FOA_add - (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData</span><br><span class="line">+ (pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存盘</span></span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">size = (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData) + (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;SizeOfRawData);</span><br><span class="line">FILE* pfp = <span class="built_in">fopen</span>(<span class="string">&quot;C:\\Documents and Settings\\easy\\桌面\\reloc.dll&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="built_in">fwrite</span>(NewBuffer, size, <span class="number">1</span>, pfp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="修复重定位表"><a href="#修复重定位表" class="headerlink" title="修复重定位表"></a>修复重定位表</h1><p>这里做一个比较有意思的小实验，来加深一下对重定位表的理解。</p><p>我们知道，一个DLL的ImageBase被另一个DLL占据的时候，系统会根据64KB对齐将这个DLL往下”贴”，并根据重定位表来修复需要修复的全局变量地址。现在我们来模拟操作系统在这个过程中做的事情：自己修改DLL的ImageBase并修复重定位表，然后存盘，使新的DLL仍然可以使用。</p><p>先上代码，然后做解释：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 更改ImageBase， 并修复重定表 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Update_Reloc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 1. 将文件读入内存 */</span></span><br><span class="line"><span class="type">char</span>* FileBuffer = <span class="built_in">Read_exe</span>();</span><br><span class="line"><span class="type">char</span>* ImageBuffer = <span class="built_in">file_to_image</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. 定义并初始化各头结构指针 */</span></span><br><span class="line">dos_header* pdh = (dos_header*)FileBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"><span class="type">char</span>* basereloc_rva = (<span class="type">char</span>*)poph-&gt;DataDirectory[<span class="number">5</span>].VirtualAddress;</span><br><span class="line"><span class="type">char</span>* basereloc_foa = <span class="built_in">RVA_TO_FOA</span>(basereloc_rva);</span><br><span class="line">image_base_relocation* pibr = (image_base_relocation*)(basereloc_foa + (<span class="type">int</span>)FileBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 修改ImageBase, 注意模块对齐方式为10000H */</span></span><br><span class="line">poph-&gt;ImageBase += <span class="number">0x50000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. 修改重定位表 */</span></span><br><span class="line"><span class="comment">//image_base_relocation* New_preloc = (image_base_relocation*)(FOA_add + (int)FileBuffer);</span></span><br><span class="line"><span class="keyword">while</span>(pibr-&gt;VirtualAddress != <span class="number">0</span> &amp;&amp; pibr-&gt;SizeOfBlock != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (pibr-&gt;SizeOfBlock - <span class="number">8</span>) / <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">short</span>* item = (<span class="type">short</span>*)((<span class="type">char</span>*)pibr + <span class="number">8</span>);   <span class="comment">//新重定位表具体项指针</span></span><br><span class="line"><span class="keyword">if</span>((*(item + i) &amp; <span class="number">0xF000</span>) &gt;&gt; <span class="number">12</span> == <span class="number">3</span>)             <span class="comment">//高4位为3才有意义</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> rva = (<span class="type">int</span>)pibr-&gt;VirtualAddress + (*(item + i) &amp; <span class="number">0x0FFF</span>);  <span class="comment">//计算绝对地址RVA</span></span><br><span class="line"><span class="type">int</span> foa = (<span class="type">int</span>)(<span class="built_in">RVA_TO_FOA</span>((<span class="type">char</span>*)rva));</span><br><span class="line"><span class="type">int</span>* change_addr = (<span class="type">int</span>*)((<span class="type">int</span>)FileBuffer + foa);</span><br><span class="line">*change_addr += <span class="number">0x50000</span>;      <span class="comment">//直接修复绝对地址， 而不是修改重定位表</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pibr = (image_base_relocation*)((<span class="type">char</span>*)pibr + pibr-&gt;SizeOfBlock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存盘</span></span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">size = (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData) + (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;SizeOfRawData);</span><br><span class="line">FILE* pfp = <span class="built_in">fopen</span>(<span class="string">&quot;C:\\Documents and Settings\\easy\\桌面\\reloc2.dll&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="built_in">fwrite</span>(FileBuffer, size, <span class="number">1</span>, pfp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来说明一下修复重定位表的原理，正常情况下，系统会根据重定位表计算出全局变量的地址并使用它。当ImageBase改变的时候，系统会原来写死的地址加上新旧Image Base的差值。因此，我们这里的修复重定位表，并不是修改表中的VirtualAddress或者具体项，而是先计算出来需要修复的绝对地址(FOA+FileBuffer)，然后用这个绝对地址加上差值(我一开始写代码的时候，这个问题也困扰了我很久，网上资料也很少有对修复重定位表解释明白的)。因此在整个过程中，重定位表是没有改变数据的，改变的是根据重定位表找到的数据的地址。</p><p>实验结果：</p><p><img src="/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/7.PNG"></p><p><img src="/2022/04/26/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/6.PNG"></p><p>修改ImageBase后的DLL仍然可以使用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在一个PE文件中，各种表是由编译器生成的，表里面存储了非常重要的信息。在程序启动的时候，系统会根据这些表做各种初始化的工作。但是假如有一个小需求，需要对.exe文件的二进制代码进行加密来保护程序，但问题是：这些表的信息和程序的代码与数据都是混合在一起的，一旦被加密，系统也无法准确定位这些表，也就无法做初始化的工作，程序也就无法启动。因此，移动各种表，是对程序加密与解密的基础。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>PE研究：导出表与重定位表</title>
    <link href="http://example.com/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/"/>
    <id>http://example.com/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/</id>
    <published>2022-04-25T04:46:01.000Z</published>
    <updated>2022-04-26T07:59:31.639Z</updated>
    
    <content type="html"><![CDATA[<p>在学习PE结构的过程中，最重要的能力之一就是对各种表的理解与运用。本章将会对导出表与重定位表的工作原理进行剖析，并给出代码解析这两张表。在我的GitHub中有一个用C和win32写的PE工具项目，里面有完整的源码，实现了对PE文件的解析以及其他功能，需要的可以去我的GitHub查看。</p><span id="more"></span><h1 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h1><p>一般情况下，一个DLL文件提供函数给别的程序使用，一个EXE文件使用DLL提供的函数。那么其他程序如何才能在DLL中找到找到对应的函数呢？答案就是导出表。导出表里面记录了该文件对外提供了哪些函数，以及导出的方式(以序号导出和以函数名称导出)。</p><h2 id="如何定位导出表"><a href="#如何定位导出表" class="headerlink" title="如何定位导出表"></a>如何定位导出表</h2><p>可选PE头的最后一个结构，是数据目录项(IMAGE_DATA_DIRECTORY)，这是一个16项数组，每一项的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">image_data_directory</span>//数据目录</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> VirtualAddress;<span class="comment">//RVA</span></span><br><span class="line"><span class="type">int</span> Size;<span class="comment">//大小</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这16项中，前15项分别对应了15张表，最后一项保留。其中第一张就是导出表。</p><h2 id="导出表结构"><a href="#导出表结构" class="headerlink" title="导出表结构"></a>导出表结构</h2><p>上面的结构，只是说明导出表在哪里，有多大，并不是真正的导出表。<strong>想在磁盘文件(FileBuffer)中找到导出表，必须先将上面的RVA转换成FOA</strong>。导出表结构如下</p><p><img src="/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/1.PNG"></p><p>在导出表结构中有三个RVA，分别指向了三张表。想要在FileBuffer中定位它们，一样需要转换成FOA。</p><h2 id="AddressOfFunctions说明"><a href="#AddressOfFunctions说明" class="headerlink" title="AddressOfFunctions说明"></a>AddressOfFunctions说明</h2><p>这张表里面的内容是导出函数的地址。宽度为4字节(即一个地址的宽度)，数量为导出表结构中的NumberOfFunctions。<strong>该表中存储的地址是RVA</strong>，需要加上ImageBase才是运行时函数的地址。</p><p>另外许需要注意的是，这个NumberOfFunctions的值有可能不是真正导出函数的数量。因为这个值是系统根据公式：<strong>NumberofFunctions &#x3D; 导出函数最大序号 - 最小序号 + 1</strong> 得到的。因此如果导出函数序号不连续的话，函数地址表中的地址数量就会多于导出函数的数量，多出来的部分用0填补。</p><h2 id="AddressOfNames说明"><a href="#AddressOfNames说明" class="headerlink" title="AddressOfNames说明"></a>AddressOfNames说明</h2><p>这张表里面的内容是导出函数名称的地址(注意不是函数名称)。宽度同样为4字节，数量为导出表结构中的NumberOfNames。<strong>该表中存储的地址是以名字导出函数的名字的RVA</strong>，想要打印出来导出函数的名字，需要将RVA转换成FOA。</p><p><img src="/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/2.PNG"></p><p>函数名称在文件中的位置是不确定的，但是在函数名称地址表中，一定是按照字母顺序排序的。</p><h2 id="AddressOfNameOrdinals说明"><a href="#AddressOfNameOrdinals说明" class="headerlink" title="AddressOfNameOrdinals说明"></a>AddressOfNameOrdinals说明</h2><p>这张表里面存储的是序号(不是真正的函数序号，可以理解成偏移)。宽度为2字节，数量与AddressOfNames表相等，都为NumberOfNames。需要注意的是，该表中存储的内容 + Base &#x3D; 函数的导出序号。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、为什么需要分成三张表？</p><p>因为函数导出的个数与函数名的个数未必一样，所以要将函数地址表和函数名称表分开。</p><p>2、函数地址表是不是一定大于等于函数名称表？</p><p>不一定，因为有可能有多个函数的名字指向同一个函数地址。</p><p>3、系统是如何根据一个函数的名字确定函数的地址的？</p><p><img src="/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/3.PNG"></p><p>首先根据函数名称，搜索函数名称表，利用这个函数名称的索引直接索引到函数序号表，得到对应的函数序号表的内容，将这个值作为函数地址表的索引，便得到了函数地址RVA，最后加上ImageBase，便可在运行时找到对应的函数。</p><p>4、系统是如何根据函数的导出序号获取一个函数的地址？</p><p>直接看张图即可</p><p><img src="/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/4.PNG"></p><p>最后给出两个函数，分别模拟系统根据名字和序号找到对应的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过函数名称找到对应函数地址，参数为filebuffer和函数名称</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">Get_Func_Addr_by_Name</span><span class="params">(<span class="type">char</span>* filebuffer, <span class="type">char</span>* FuncName)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* Func_Addr = <span class="literal">NULL</span>;      <span class="comment">//声明导出函数指针</span></span><br><span class="line"></span><br><span class="line">dos_header* pdosh = (dos_header*)filebuffer;</span><br><span class="line">pe_header* ppeh = (pe_header*)((pdosh-&gt;e_lfanew) + <span class="number">4</span> + (<span class="type">int</span>)pdosh);</span><br><span class="line">optional_pe_header* popeh = (optional_pe_header*)((<span class="type">int</span>)ppeh + <span class="number">20</span>);</span><br><span class="line">image_section_header* pish = (image_section_header*)((<span class="type">int</span>)popeh + ppeh-&gt;SizeOfOptionalHeader);</span><br><span class="line">image_export_directory* pied = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定位到导出表，找到导出表的全部信息，包括最后三个表的地址 */</span></span><br><span class="line"><span class="type">char</span>* export_rva = (<span class="type">char</span>*)popeh-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line"><span class="type">char</span>* export_foa = RVA_TO_FOA(export_rva);</span><br><span class="line">pied = (image_export_directory*)(export_foa + (<span class="type">int</span>)filebuffer);                  <span class="comment">//导出表指针</span></span><br><span class="line"><span class="type">int</span>* pName_Addr = (<span class="type">int</span>*)(RVA_TO_FOA((<span class="type">char</span>*)pied-&gt;AddressOfNames) + (<span class="type">int</span>)filebuffer);                <span class="comment">//AddressOfNames表指针</span></span><br><span class="line"><span class="type">short</span>* pOrdinal_Addr = (<span class="type">short</span>*)(RVA_TO_FOA((<span class="type">char</span>*)pied-&gt;AddressOfNameOrdinals) + (<span class="type">int</span>)filebuffer);  <span class="comment">//AddressOfNameOrdinals</span></span><br><span class="line"><span class="type">int</span>* pFunc_Addr = (<span class="type">int</span>*)(RVA_TO_FOA((<span class="type">char</span>*)pied-&gt;AddressOfFunctions) + (<span class="type">int</span>)filebuffer);            <span class="comment">//AddressOfFunctions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 循环遍历name地址表，匹配函数名 */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pied-&gt;NumberOfNames; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>((<span class="type">char</span>*)(*(pName_Addr + i) + (<span class="type">int</span>)filebuffer), FuncName) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Func_Addr = (<span class="type">char</span>*)(*(pFunc_Addr + *(pOrdinal_Addr + i)));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;RVA:%x\n&quot;</span>, Func_Addr);</span><br><span class="line"><span class="keyword">return</span> Func_Addr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有这个函数!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过导出函数序号找到对应函数地址，参数为filebuffer和导出函数序号</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">Get_Func_Addr_by_Ordinals</span><span class="params">(<span class="type">char</span>* filebuffer, <span class="type">int</span> ordinals)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* Func_Addr = <span class="literal">NULL</span>;      <span class="comment">//声明导出函数指针</span></span><br><span class="line"></span><br><span class="line">dos_header* pdosh = (dos_header*)filebuffer;</span><br><span class="line">pe_header* ppeh = (pe_header*)((pdosh-&gt;e_lfanew) + <span class="number">4</span> + (<span class="type">int</span>)pdosh);</span><br><span class="line">optional_pe_header* popeh = (optional_pe_header*)((<span class="type">int</span>)ppeh + <span class="number">20</span>);</span><br><span class="line">image_section_header* pish = (image_section_header*)((<span class="type">int</span>)popeh + ppeh-&gt;SizeOfOptionalHeader);</span><br><span class="line">image_export_directory* pied = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定位到导出表，找到导出表的全部信息，只需要AddressOfFunctions表 */</span></span><br><span class="line"><span class="type">char</span>* export_rva = (<span class="type">char</span>*)popeh-&gt;DataDirectory[<span class="number">0</span>].VirtualAddress;</span><br><span class="line"><span class="type">char</span>* export_foa = RVA_TO_FOA(export_rva);</span><br><span class="line">pied = (image_export_directory*)(export_foa + (<span class="type">int</span>)filebuffer);                  <span class="comment">//导出表指针</span></span><br><span class="line"><span class="type">int</span>* pFunc_Addr = (<span class="type">int</span>*)(RVA_TO_FOA((<span class="type">char</span>*)pied-&gt;AddressOfFunctions) + (<span class="type">int</span>)filebuffer);  <span class="comment">//AddressOfFunctions</span></span><br><span class="line"></span><br><span class="line">Func_Addr = (<span class="type">char</span>*)(*(pFunc_Addr + (ordinals - pied-&gt;Base)));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;RVA:%x\n&quot;</span>, Func_Addr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Func_Addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h1><h2 id="程序加载的过程"><a href="#程序加载的过程" class="headerlink" title="程序加载的过程"></a>程序加载的过程</h2><p>在前面的章节中，已经笼统地阐述过一个程序是如何加载到内存并运行起来的。现在再做一个补充说明</p><p><img src="/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/5.PNG"></p><p>可以看到，一个EXE文件在运行前，系统会加载很多该程序需要用到的DLL到低2G的高领空。高2G留给内核使用。下面做几点特别说明：</p><p>1、一般情况下，一个EXE文件是可以根据它的ImageBase来进行加载的，因为EXE文件拥有它自己独立的4GB内存空间。而DLL却不行，因为DLL是有EXE文件需要使用它，它才加载到相关EXE的进程空间的。</p><p>2、一个程序可能会用到很多DLL，而每个DLL默认的ImageBase均为0x10000000h，显然不可能每个DLL都会加载到该地址，它们只能在后面的地址加载。</p><p>3、为了提高搜索的速度，模块(DLL)间地址也是要对齐的，模块地址对齐为10000H 也就是64K。所以DLL文件的起始地址要10000H对齐。</p><h2 id="为什么要使用重定位表"><a href="#为什么要使用重定位表" class="headerlink" title="为什么要使用重定位表"></a>为什么要使用重定位表</h2><p>在前面逆向的章节中，我们已经知道，一个全局变量在反汇编中，地址是写死的。这个地址计算的公式是：编译时生成的地址 &#x3D; ImageBase + RVA。这个地址在程序编译完成后，已经写入文件了。</p><p>那么现在来假设一种情况，程序在加载的时候，没有按照ImageBase的地址0x400000h加载，而是加载到了0x500000h这个地址，可是因为全局变量在加载前已经写死了(RVA加的是ImageBase的值)，程序执行的时候仍然会按照原来的地址群寻找这个变量，可是很明显，该全局变量已的位置已经改变了。</p><p>1、也就是说，如果程序能够按照预定的ImageBase来加载的话，那么就不需要重定位表。这也是为什么exe很少有重定位表，而DLL大多都有重定位表的原因。</p><p>2、一旦某个模块没有按照ImageBase进行加载，那么所有类似上面中的地址就都需要修正，否则，引用的地址就是无效的。</p><p>3、一个EXE中，需要修正的地方会很多，那我们如何来记录都有哪些地方需要修正呢？答案就是重定位表。</p><h2 id="重定位表结构解析"><a href="#重定位表结构解析" class="headerlink" title="重定位表结构解析"></a>重定位表结构解析</h2><p>数据目录项的第6个结构就是重定位表。通过第6项的VirtualAddress转换成FOA即可找到重定位表。结构如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BASE_RELOCATION</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   SizeOfBlock;</span><br><span class="line">&#125; IMAGE_BASE_RELOCATION;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_BASE_RELOCATION, * PIMAGE_BASE_RELOCATION;</span><br></pre></td></tr></table></figure><p>看一张更清楚的结构图，有很多块该结构组成</p><p><img src="/2022/04/25/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/6.PNG"></p><p>解析说明：</p><p>1、判断一共有几块数据：最后一个结构的VirtualAddress与SizeOfBlock都为0。</p><p>2、具体项，宽度为2字节(16位)。在内存中，页的大小是0x1000H，也就是用2的12次方就可以表示一个页内的所有偏移。因此在16位的具体项中，低12位就代表这个偏移。高4位只有两种可能，当高4位值为3时，代表的是需要修改的数据；高4位值为0时，代表该数据是用于对齐的，可以不用管。因此我们只关注高4位值为3的数据。</p><p>3、VirtualAddress，宽度是4字节，代表的是当前这一页的基址。真正的RVA &#x3D; VirtualAddress + 具体项的低12位。注意得到的是RVA。</p><p>4、SizeOfBlock，宽度是4字节，代表的是当前块的总大小(比如上图中绿色、黄色块的大小)。具体项的数量 &#x3D; (SizeOfBlock - 8)&#x2F;2。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在学习PE结构的过程中，最重要的能力之一就是对各种表的理解与运用。本章将会对导出表与重定位表的工作原理进行剖析，并给出代码解析这两张表。在我的GitHub中有一个用C和win32写的PE工具项目，里面有完整的源码，实现了对PE文件的解析以及其他功能，需要的可以去我的GitHub查看。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>PE研究：扩大节与合并节</title>
    <link href="http://example.com/2022/04/24/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%89%A9%E5%A4%A7%E8%8A%82%E4%B8%8E%E5%90%88%E5%B9%B6%E8%8A%82/"/>
    <id>http://example.com/2022/04/24/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%89%A9%E5%A4%A7%E8%8A%82%E4%B8%8E%E5%90%88%E5%B9%B6%E8%8A%82/</id>
    <published>2022-04-24T05:37:17.000Z</published>
    <updated>2022-04-24T06:26:28.164Z</updated>
    
    <content type="html"><![CDATA[<p>上一章学习了如何新增一个节并添加代码，但是这可能会带来一个问题，新增一个节有些太明显了，可能会被检测到(虽然我们也并不是干什么坏事)，因此本章学习如何合并和扩大一个节。</p><span id="more"></span><h1 id="扩大节"><a href="#扩大节" class="headerlink" title="扩大节"></a>扩大节</h1><p>为了不影响程序的正常运行，以及我们工作的方便，最好是对最后一个节进行扩大。扩大节与上一章新增一个节类似，也需要重新申请一个ImageBuffer2的空间。除此之外，还需要注意一下修改SizeOfRawData和VirtualSize的值(即修改节在磁盘中对齐前的大小和在内存中对齐后的大小)。让它们直接相等，且都等于内存中对齐后新的大小即可。下面给出代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">define MessageBoxAddr <span class="number">0x77D507EA</span></span><br><span class="line"><span class="type">char</span> shellcode2[] = </span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,<span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> shellcode_length2 = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">Expand_Last_Section</span><span class="params">(<span class="type">char</span>* ImageBuffer)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 定义各文件头 */</span></span><br><span class="line">dos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> size = (<span class="type">int</span>)((poph-&gt;SizeOfImage) + <span class="number">0x1000</span>);</span><br><span class="line"><span class="type">char</span>* ImageBuffer2 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="built_in">memset</span>(ImageBuffer2, <span class="number">0</span>, size);</span><br><span class="line"><span class="built_in">memcpy</span>(ImageBuffer2, ImageBuffer, poph-&gt;SizeOfImage);</span><br><span class="line"></span><br><span class="line">pdh = (dos_header*)ImageBuffer2;</span><br><span class="line">pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line">image_section_header* pish_last = (image_section_header*)(pish + pph-&gt;NumberOfSection - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改SizeOfImage 最后一个节的属性 */</span></span><br><span class="line">poph-&gt;SizeOfImage = size;</span><br><span class="line">(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;Characteristics = pish-&gt;Characteristics;</span><br><span class="line"><span class="keyword">if</span>(pish_last-&gt;Misc.VirtualSize &gt;= pish_last-&gt;SizeOfRawData)   <span class="comment">//注意修改Misc和SizeOfRawData的要点</span></span><br><span class="line">&#123;</span><br><span class="line">pish_last-&gt;SizeOfRawData = <span class="number">0x1000</span> + pish_last-&gt;Misc.VirtualSize;</span><br><span class="line">pish_last-&gt;Misc.VirtualSize += <span class="number">0x1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pish_last-&gt;Misc.VirtualSize = pish_last-&gt;SizeOfRawData + <span class="number">0x1000</span>;</span><br><span class="line">pish_last-&gt;SizeOfRawData += <span class="number">0x1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在最后一个节中添加代码 */</span></span><br><span class="line"><span class="type">char</span>* des = (<span class="type">char</span>*)((<span class="type">int</span>)ImageBuffer2 + pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class="number">0x1000</span>);</span><br><span class="line"><span class="type">char</span>* src = shellcode2;</span><br><span class="line"><span class="built_in">memcpy</span>(des, src, shellcode_length2);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> CallAddr = (<span class="type">int</span>)(MessageBoxAddr - (pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class="number">0x1000</span> + <span class="number">13</span> + poph-&gt;ImageBase));</span><br><span class="line"><span class="type">int</span>* addr1 = (<span class="type">int</span>*)((<span class="type">int</span>)ImageBuffer2 + pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class="number">0x1000</span> + <span class="number">9</span>);</span><br><span class="line">*addr1 = CallAddr;                   <span class="comment">//修改E8</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> RetAddr = (<span class="type">int</span>)(poph-&gt;AddressOfEntryPoint + poph-&gt;ImageBase - (pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class="number">0x1000</span> + <span class="number">18</span> + poph-&gt;ImageBase));</span><br><span class="line"><span class="type">int</span>* addr2 = (<span class="type">int</span>*)((<span class="type">int</span>)ImageBuffer2 + pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class="number">0x1000</span> + <span class="number">14</span>);</span><br><span class="line">*addr2 = RetAddr;                    <span class="comment">//修改E8</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> OEP = (<span class="type">int</span>)(pish_last-&gt;VirtualAddress + pish_last-&gt;SizeOfRawData - <span class="number">0x1000</span>);</span><br><span class="line">poph-&gt;AddressOfEntryPoint = OEP;     <span class="comment">//修改OEP  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> ImageBuffer2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，可能会有些疑问：为什么在修改SizeOfRawData和VirtualSize时，要先进行一个比较再加上1000h呢？难道不是SizeOfRawData一定大于VirtualSize，也就是在磁盘中对齐后的大小一定大于等于在内存中对齐前的大小吗？答案是否定的。因为有可能在程序中会有很多在声明时未初始化的变量，在文件加载到内存中后这些未初始化的变量会被赋值，有可能会超过原来的SizeOfRawData。</p><h1 id="合并节"><a href="#合并节" class="headerlink" title="合并节"></a>合并节</h1><p>本代码实现将PE文件的所有节合并为一个节。具体步骤与注意点如下：</p><p>1、拉伸到内存。</p><p>2、修改第一个节表的SizeOfRawData和VirtualSize。让它们大小都等于全部节在内存中的大小之和。那么如何计算这个大小呢？看一张图</p><p><img src="/2022/04/24/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%89%A9%E5%A4%A7%E8%8A%82%E4%B8%8E%E5%90%88%E5%B9%B6%E8%8A%82/1.PNG"></p><p>大小应该是SizeOfImage - 第一个节的VirtualAddress。</p><p>3、将第一个节的属性改为包含所有节的属性，这里用按位或运算即可。</p><p>4、修改节的数量为1。</p><p>实现代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 合并所有节 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Merge_Section</span><span class="params">(<span class="type">char</span>* ImageBuffer)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 定义各文件头 */</span></span><br><span class="line">dos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 改成员 */</span></span><br><span class="line">pish-&gt;Misc.VirtualSize = poph-&gt;SizeOfImage - pish-&gt;VirtualAddress;</span><br><span class="line">pish-&gt;SizeOfRawData = pish-&gt;Misc.VirtualSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将属性改为包含所有节的属性 */</span></span><br><span class="line"><span class="type">int</span> chara = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pph-&gt;NumberOfSection - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">chara = (pish + i)-&gt;Characteristics | (pish + i + <span class="number">1</span>)-&gt;Characteristics;</span><br><span class="line">&#125;</span><br><span class="line">pish-&gt;Characteristics = chara;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改节个数为1 */</span></span><br><span class="line">pph-&gt;NumberOfSection = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果如下</p><p><img src="/2022/04/24/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%89%A9%E5%A4%A7%E8%8A%82%E4%B8%8E%E5%90%88%E5%B9%B6%E8%8A%82/2.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一章学习了如何新增一个节并添加代码，但是这可能会带来一个问题，新增一个节有些太明显了，可能会被检测到(虽然我们也并不是干什么坏事)，因此本章学习如何合并和扩大一个节。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>PE研究：新增节并添加代码</title>
    <link href="http://example.com/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/</id>
    <published>2022-04-23T07:30:31.000Z</published>
    <updated>2022-04-24T05:31:55.241Z</updated>
    
    <content type="html"><![CDATA[<p>上一章是在原本存在的代码节中添加代码，本章实现新增一个节，并在新增的节中添加代码。</p><span id="more"></span><p>先来整理一下，如果需要新增一个节，需要修改哪些东西：节表、新增一个节、在新增的节后面保证有一个节大小的0、修改PE头中节的数量、修改SizeOfImage大小、修正新增节的属性。</p><p><strong>1、修改节表</strong></p><p>先来看一下节表中每一项的内容</p><p><img src="/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/1.PNG"></p><p>在节表中，每一项长度为40字节，描述了对应的节区的各种属性。那么Windows系统是怎么判断节表里面有多少项的呢？答案是，在节表的最后，是以一个节表项大小(40字节)全为0的内存，来表示节表的结束，类似于C语言中的字符串。因此，如果想要新增一个节，就需要保证在原有的节表后面，必须有2个节表项大小的0。再来看一张图</p><p><img src="/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/2.PNG"></p><p>由上面的图可以看到，判断能否在原来的节表中新增加一项，判断公式为**SizeOfHeader - (DOS + 垃圾数据 + PE标记 + 标准PE头 + 可选PE头 + 已存在节表) &gt;&#x3D; 2个节表项大小(80字节)**。那么现在问题出来了，如果能容得下，直接添加就好了，如果容不下怎么办？</p><p>再次看一下上面的图，在DOS头和NT头中间的浅蓝色区域，其实是一块垃圾数据，这里面的数据不影响程序的运行。因为Windows系统根据DOS头中的Ifanew字段直接找到了NT头，跳过了那段垃圾区域。因此，如果节表容不下新增一个项，那么我们可以将NT头和节表那一整块整体上移至DOS头下方，然后修改Ifanew字段，指向刚刚移动的位置，然后再新增一个节表项即可。</p><p><strong>2、其他要修改的内容</strong></p><p>节的数量：位于PE头中，+1。</p><p>sizeofimage：位于可选PE头，比如我们新增节大小为0x1000h(4096字节)，那么sizeofimage + 1000。</p><p>在最后一个节的后面新增节：要注意对齐。</p><p>新增节的属性：可以直接将代码段的属性复制到新增的节上。</p><p>在节中添加代码。</p><p>还有需要注意的一点是，在新增节的时候，应该另外申请一个ImageBuffer2空间的大小，用于盛放原来的ImageBuffer的内容和新增节的内容。</p><p>代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 新增一个节，添加弹框代码 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MessageBoxAddr 0x77D507EA</span></span><br><span class="line"><span class="type">char</span> shellcode[] = </span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,<span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//新增节的名称为.haha</span></span><br><span class="line"><span class="type">char</span> sectionname[] = &#123;<span class="number">0x2E</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"><span class="type">int</span> shellcode_length = <span class="number">18</span>;</span><br><span class="line"><span class="comment">//函数实现新增节，参数分别为拉伸后的ImageBuffer和新增节大小的字节数</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">AddSection</span><span class="params">(<span class="type">char</span>* ImageBuffer, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 定义各文件头 */</span></span><br><span class="line">dos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> size = (<span class="type">int</span>)((poph-&gt;SizeOfImage) + len);</span><br><span class="line"><span class="type">char</span>* ImageBuffer2 = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="built_in">memset</span>(ImageBuffer2, <span class="number">0</span>, size);</span><br><span class="line"><span class="built_in">memcpy</span>(ImageBuffer2, ImageBuffer, poph-&gt;SizeOfImage);</span><br><span class="line"></span><br><span class="line">pdh = (dos_header*)ImageBuffer2;</span><br><span class="line">pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加一个节表 */</span></span><br><span class="line"><span class="type">int</span> up_size = <span class="number">4</span> + <span class="number">20</span> + pph-&gt;SizeOfOptionalHeader + (pph-&gt;NumberOfSection)*<span class="number">40</span>;</span><br><span class="line"><span class="type">char</span>* des = (<span class="type">char</span>*)((<span class="type">int</span>)ImageBuffer2 + <span class="number">64</span>);</span><br><span class="line"><span class="type">char</span>* src = (<span class="type">char</span>*)((<span class="type">int</span>)ImageBuffer2 + pdh-&gt;e_lfanew);</span><br><span class="line"><span class="built_in">memcpy</span>(des, src, up_size);            <span class="comment">//上移NT头</span></span><br><span class="line"><span class="built_in">memset</span>((<span class="type">char</span>*)(des + up_size), <span class="number">0</span>, <span class="number">160</span>);   <span class="comment">//160=E0+up_size-(64+up_zise)  清0</span></span><br><span class="line">pdh-&gt;e_lfanew = <span class="number">0x40</span>;</span><br><span class="line"></span><br><span class="line">pdh = (dos_header*)ImageBuffer2;</span><br><span class="line">pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* des_pish = (<span class="type">char</span>*)((<span class="type">int</span>)pish + (<span class="type">int</span>)(pph-&gt;NumberOfSection*<span class="number">40</span>));</span><br><span class="line"><span class="type">char</span>* src_pish = (<span class="type">char</span>*)((<span class="type">int</span>)pish);</span><br><span class="line"><span class="built_in">memcpy</span>(des_pish, src_pish, <span class="number">40</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">(pish + pph-&gt;NumberOfSection)-&gt;name[i] = sectionname[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改PE头中节的数量 */</span></span><br><span class="line">pph-&gt;NumberOfSection += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改sizeofimage大小 */</span></span><br><span class="line">poph-&gt;SizeOfImage = poph-&gt;SizeOfImage + len;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修正新增节表的属性 */</span></span><br><span class="line">(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;Misc.VirtualAddress = len;</span><br><span class="line">(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;VirtualAddress = (pish + pph-&gt;NumberOfSection - <span class="number">2</span>)-&gt;VirtualAddress + (pish + pph-&gt;NumberOfSection - <span class="number">2</span>)-&gt;SizeOfRawData;</span><br><span class="line">(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;SizeOfRawData = len;</span><br><span class="line">(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData = (pish + pph-&gt;NumberOfSection - <span class="number">2</span>)-&gt;PointerToRawData + (pish + pph-&gt;NumberOfSection - <span class="number">2</span>)-&gt;SizeOfRawData;</span><br><span class="line">(pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;Characteristics = (pish + <span class="number">2</span>)-&gt;Characteristics;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在节中添加代码 */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">memcpy((char*)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + (int)ImageBuffer2), shellcode, shellcode_length);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int CallAddr = (int)(MessageBoxAddr - ((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + 13 + poph-&gt;ImageBase));</span></span><br><span class="line"><span class="comment">int* addr1 = (int*)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + (int)ImageBuffer2 + 9);</span></span><br><span class="line"><span class="comment">*addr1 = CallAddr;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int RetAddr = (int)(poph-&gt;AddressOfEntryPoint + poph-&gt;ImageBase - ((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + 18 + poph-&gt;ImageBase));</span></span><br><span class="line"><span class="comment">int* addr2 = (int*)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress + (int)ImageBuffer2 + 14);</span></span><br><span class="line"><span class="comment">*addr2 = RetAddr;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int OEP = (int)((pish + pph-&gt;NumberOfSection - 1)-&gt;VirtualAddress);</span></span><br><span class="line"><span class="comment">poph-&gt;AddressOfEntryPoint = OEP;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ImageBuffer2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果：</p><p>在原本的记事本程序中，有三个节：</p><p><img src="/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/3.PNG"></p><p>代码运行成功后，节添加成功：</p><p><img src="/2022/04/23/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E6%96%B0%E5%A2%9E%E8%8A%82%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/4.PNG"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一章是在原本存在的代码节中添加代码，本章实现新增一个节，并在新增的节中添加代码。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>PE研究：代码节空白区添加代码</title>
    <link href="http://example.com/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/</id>
    <published>2022-04-22T07:49:31.000Z</published>
    <updated>2022-04-23T07:17:52.765Z</updated>
    
    <content type="html"><![CDATA[<p>代码节是PE结构中的一个节区，一般用于存放代码段。本节来做一个小实验，向代码节的空白区添加代码。实现的功能是，双击运行记事本文件时，先弹出一个对话框，关掉后才能运行记事本程序。</p><span id="more"></span><p>这个实验大致的一种思路可以是，将MessageBox(0, 0, 0, 0)这段代码加入到目标程序中，修改程序的入口点，让它指向我们新加入的这段代码，然后再让程序跳回到原来的入口点执行原来的程序。但是这里有一个问题，就是我们是向已经存在的程序加入代码，不可能直接将MessageBox(0, 0, 0, 0)这个代码直接放进去，而是应该将其转化为<strong>shellcode</strong>二进制代码，再放进去。</p><p>具体步骤如下：</p><p><strong>1、获取MessageBox地址，构造shellcode。</strong></p><p>打开OD，随便拖入一个文件，在命令行中输入bp MessageBoxA，然后打开断点视图，双击到断点处，得到MessageBox的地址。</p><p><img src="/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/1.PNG"></p><p>我这里的地址为77D507EA，不同的机器地址不一样。</p><p>还需要注意的是，在调用MessageBox时，还需要push4个参数，push的硬编码为0x6A。因此我们构造出来的shellcode为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> shellcode1[] = </span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,<span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2、读取文件，判断代码节(一般都是第一个节)空白区域能否放得下前面的shellcode(这里是18字节)。</strong></p><p><strong>3、将shellcode加入代码节空白区域。</strong></p><p><strong>4、修改E8与E9</strong></p><p>本程序的流程是，通过程序入口(OEP)进入到我们的shellcode，我们的shellcode完成的任务是调用(call)MessageBox函数，然后再跳(jmp)回去。call的硬编码是E8，后面跟了一个地址(4个字节)，jmp的硬编码是E9，后面跟了一个地址(4个字节)。先来研究一下后面跟的地址的计算规则：</p><p><img src="/2022/04/22/PE%E7%A0%94%E7%A9%B6%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%8A%82%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/2.PNG"></p><p>公式为：真正要跳转的地址 &#x3D; E8这条指令的下一行地址 + X，而E8指令的长度为5字节。因此，公式可以转化为：要跳转的地方 &#x3D; E8当前的地址 + 5 + X，**X &#x3D; 要跳转的地址 - (E8的地址 + 5)**。E9的公式同理。</p><p><strong>5、修改OEP</strong></p><p><strong>注：如果加在别的节中，还需要修改节属性。</strong></p><p>现在还有一个问题，就是我们加入的shellcode，是加在FileBuffer中呢，还是加在ImageBuffer中呢？答案是ImageBuffer中，因为在shellcode中涉及到地址，这个地址是拉伸后准备运行的地址。当然，如果将shellcode加在FileBuffer中也是可以的，只不过需要多一步，将shellcode中的地址从FOA转换为RVA。</p><p>现在基本没有什么问题了，直接上代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MessageBoxAddr 0x77D507EA</span></span><br><span class="line"><span class="type">char</span> shellcode1[] = </span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,<span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> shellcode_length1 = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编程实现在代码节添加MessageBox函数代码，弹出框 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_shellcode</span><span class="params">(<span class="type">char</span>* ImageBuffer)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 定义各文件头 */</span></span><br><span class="line">dos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断第一个节的空白区域是否大于18字节 */</span></span><br><span class="line"><span class="keyword">if</span>((((pish+<span class="number">1</span>)-&gt;VirtualAddress) - (pish-&gt;VirtualAddress) - pish-&gt;Misc.VirtualAddress) &lt; <span class="number">18</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无法添加代码!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将shellcode加入代码节空白区域 */</span></span><br><span class="line">    <span class="comment">//注意这里要加ImageBuffer</span></span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">char</span>*)(pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress + (<span class="type">int</span>)ImageBuffer), shellcode1, shellcode_length1);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改E8 */</span></span><br><span class="line">    <span class="comment">//E8后面的地址，为MessageBox()地址 - E8下一条语句的地址</span></span><br><span class="line">    <span class="comment">//这个下一条地址应该是对齐后加上imagebase地址，因为程序已经跑起来了</span></span><br><span class="line"><span class="type">int</span> CallAddr = (<span class="type">int</span>)(MessageBoxAddr - (pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress + <span class="number">13</span> + poph-&gt;ImageBase));</span><br><span class="line"><span class="type">int</span>* addr1 = (<span class="type">int</span>*)(pish-&gt;VirtualAddress + (<span class="type">int</span>)ImageBuffer + pish-&gt;Misc.VirtualAddress + <span class="number">9</span>);</span><br><span class="line">*addr1 = CallAddr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改E9 */</span> </span><br><span class="line">    <span class="comment">//注意都要加上ImageBase</span></span><br><span class="line"><span class="type">int</span> RetAddr = (<span class="type">int</span>)(poph-&gt;AddressOfEntryPoint + poph-&gt;ImageBase - (pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress + <span class="number">18</span> + poph-&gt;ImageBase));</span><br><span class="line"><span class="type">int</span>* addr2 = (<span class="type">int</span>*)(pish-&gt;VirtualAddress + (<span class="type">int</span>)ImageBuffer + pish-&gt;Misc.VirtualAddress + <span class="number">14</span>);</span><br><span class="line">*addr2 = RetAddr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改OEP */</span></span><br><span class="line">    <span class="comment">//OEP本来存的就是RVA，不需要加ImageBase</span></span><br><span class="line"><span class="type">int</span> OEP = (<span class="type">int</span>)(pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress);</span><br><span class="line">poph-&gt;AddressOfEntryPoint = OEP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面提过，这段代码执行前要先拉伸，执行完毕后再还原回去存盘即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;代码节是PE结构中的一个节区，一般用于存放代码段。本节来做一个小实验，向代码节的空白区添加代码。实现的功能是，双击运行记事本文件时，先弹出一个对话框，关掉后才能运行记事本程序。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>PE研究：PE文件的加载</title>
    <link href="http://example.com/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/"/>
    <id>http://example.com/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-04-20T05:27:41.000Z</published>
    <updated>2022-04-22T07:45:27.047Z</updated>
    
    <content type="html"><![CDATA[<p>PE文件是Windows操作系统下使用的32位可执行文件格式。关于PE文件的结构以及各字段的意义，网络上有很详细的资料，这里不再赘述(或者用到的时候再说明)。本版块主要涉及Windows下的一些小应用。</p><span id="more"></span><h1 id="PE文件的加载过程"><a href="#PE文件的加载过程" class="headerlink" title="PE文件的加载过程"></a>PE文件的加载过程</h1><p>首先要知道，PE文件有在磁盘上与在内存中的两种状态。如下图所示</p><p><img src="/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/1.PNG"></p><p>可以看到，这两种状态大体的结构布局是一致的，但是占用的内存大小是不同的，而且两者对齐的大小<strong>有可能</strong>不同。说是有可能，是因为PE文件在磁盘上的对齐方式为FileAlignment，其值可能为0x200h或者0x1000h，而在内存中的对齐方式为SectionAlignment，其值一般为0x1000h。</p><p>Windows系统将PE文件从磁盘读入内存并执行的过程中，就存在上面的这个“拉伸”的过程。DOS头和NT头以及块表位置与大小不变，剩下的各个节按照对齐方式对齐。现在可以将PE文件的加载过程总结如下：</p><p>1、将文件从磁盘读取并拷贝到内存中，这时内存中的布局与在磁盘上的布局是一样的，拷贝在内存中的地址我们一般称为FileBuffer。</p><p>2、根据SizeOfImage的大小，开辟一块缓冲区，将来“拉伸”后的内容就会放到这里面，这个地址我们一般称为ImageBuffer。这块内存会被放入4GB大小的进程空间中。</p><p>3、根据SizeOfHeader的大小，将头信息从FileBuffer拷贝到ImageBuffer。</p><p>4、根据节表中的信息循环将FileBuffer中的节拷贝到ImageBuffer中。</p><p><img src="/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/2.PNG"></p><p>在“拉伸”完毕后，程序还不能跑起来，Windows系统还需要做一些收尾的工作才能运行。后续我们会通过代码来模拟这一过程。</p><h1 id="PE文件拉伸与还原的实现"><a href="#PE文件拉伸与还原的实现" class="headerlink" title="PE文件拉伸与还原的实现"></a>PE文件拉伸与还原的实现</h1><p>前面提到过，一个PE文件从磁盘被读入并拉伸后，还不能立即运行起来。现在我们要实现这样的功能，将PE文件读入内存并拉伸，然后再将拉伸后的内容还原回原来的PE文件并存盘，该文件是可以双击运行的。如图：</p><p><img src="/2022/04/20/PE%E7%A0%94%E7%A9%B6%EF%BC%9APE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD/3.PNG"></p><p>各个模块实现代码如下(PE的各结构定义这里不再赘述)</p><p><strong>1、将文件读入内存，并返回FileBuffer</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">Read_exe</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">fp = fopen(<span class="string">&quot;C:\\Windows\\System32\\notepad.exe&quot;</span>,<span class="string">&quot;rb&quot;</span>);<span class="comment">//这里存放要读取的PE文件</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>(!fp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无法打开 EXE 文件!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">size = getlength(fp);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* FileBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="keyword">if</span>(FileBuffer != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fread(FileBuffer, size, <span class="number">1</span>, fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Wrong!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> FileBuffer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取文件的大小</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getlength</span><span class="params">(FILE* fp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);</span><br><span class="line">size = ftell(fp);</span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、将读入内存的文件拉伸，并返回ImageBuffer</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">file_to_image</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 完成初始化工作 */</span></span><br><span class="line"><span class="type">char</span>* FileBuffer = Read_exe();</span><br><span class="line">dos_header* pdh = (dos_header*)FileBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew +<span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line"><span class="type">int</span> SizeOfImage = (<span class="type">int</span>)poph-&gt;SizeOfImage;</span><br><span class="line"><span class="type">char</span>* ImageBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(SizeOfImage);</span><br><span class="line"><span class="built_in">memset</span>(ImageBuffer, <span class="number">0</span>, SizeOfImage);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> size_part1 = <span class="number">0</span>;<span class="comment">//计算头与节表的大小之和</span></span><br><span class="line">size_part1 = ((image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph))-&gt;PointerToRawData;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(ImageBuffer, FileBuffer, size_part1);    <span class="comment">//将文件头与节表复制到imagebuffer中</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> numofsections = (<span class="type">int</span>)(pph-&gt;NumberOfSection);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numofsections; i++)          <span class="comment">//循环将每个节复制到imagebuffer中</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* des = (<span class="type">char</span>*)((<span class="type">int</span>)ImageBuffer + pish-&gt;VirtualAddress);</span><br><span class="line"><span class="type">char</span>* src = (<span class="type">char</span>*)((<span class="type">int</span>)FileBuffer + pish-&gt;PointerToRawData);</span><br><span class="line"><span class="type">int</span> size = (<span class="type">int</span>)(pish-&gt;SizeOfRawData);</span><br><span class="line"><span class="built_in">memcpy</span>(des, src, size);</span><br><span class="line">pish++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ImageBuffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、将拉伸后的内容还原为原来的PE文件，并存盘</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>*  <span class="title function_">image_to_file</span><span class="params">(<span class="type">char</span>* ImageBuffer)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 完成初始化工作 */</span></span><br><span class="line"><span class="comment">//char* ImageBuffer = file_to_image();</span></span><br><span class="line">dos_header* pdh = (dos_header*)ImageBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">size = (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;PointerToRawData) + (<span class="type">int</span>)((pish + pph-&gt;NumberOfSection - <span class="number">1</span>)-&gt;SizeOfRawData);</span><br><span class="line"><span class="type">char</span>* NewBuffer = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="built_in">memset</span>(NewBuffer, <span class="number">0</span>, size);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算头与节表的大小之和,将文件头与节表复制到newbuffer中 */</span></span><br><span class="line"><span class="type">int</span> size_part1 = <span class="number">0</span>;</span><br><span class="line">size_part1 = (<span class="type">int</span>)pish-&gt;VirtualAddress;</span><br><span class="line"><span class="built_in">memcpy</span>(NewBuffer, ImageBuffer, size_part1);<span class="comment">//将文件头与节表复制到Newbuffer中</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> numofsections = (<span class="type">int</span>)(pph-&gt;NumberOfSection);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numofsections; i++)<span class="comment">//循环将每个节复制到Newbuffer中</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* des = (<span class="type">char</span>*)((<span class="type">int</span>)NewBuffer + pish-&gt;PointerToRawData);</span><br><span class="line"><span class="type">char</span>* src = (<span class="type">char</span>*)((<span class="type">int</span>)ImageBuffer + pish-&gt;VirtualAddress);</span><br><span class="line"><span class="type">int</span> size = (<span class="type">int</span>)(pish-&gt;SizeOfRawData);</span><br><span class="line"><span class="built_in">memcpy</span>(des, src, size);</span><br><span class="line">pish++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存盘</span></span><br><span class="line">FILE* pfp = fopen(<span class="string">&quot;C:\\Documents and Settings\\easy\\桌面\\test.exe&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">fwrite(NewBuffer, size, <span class="number">1</span>, pfp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NewBuffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经测试，还原后的文件可以正常运行。</p><h1 id="RVA与FOA转化的实现"><a href="#RVA与FOA转化的实现" class="headerlink" title="RVA与FOA转化的实现"></a>RVA与FOA转化的实现</h1><p>不论是在以后分析PE文件，还是做其他相关的事情，RVA(内存中的偏移)和FOA(文件中的偏移)之间的相互转换都是很重要的。转换大体思路就是先判断该地址是位于PE头还是节中，若是在PE头中，则地址不变，若是在节中，则要找出该地址位于哪个节，然后计算差值即可。</p><p><strong>RVA转换为FOA</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span>* <span class="title">RVA_TO_FOA</span><span class="params">(<span class="type">char</span>* RVA)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span>* FileBuffer = <span class="built_in">Read_exe</span>();</span><br><span class="line"><span class="type">char</span>* ImageBuffer = <span class="built_in">file_to_image</span>();</span><br><span class="line"></span><br><span class="line">dos_header* pdh = (dos_header*)FileBuffer;</span><br><span class="line">pe_header* pph = (pe_header*)(pdh-&gt;e_lfanew + <span class="number">4</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">optional_pe_header* poph = (optional_pe_header*)((<span class="type">int</span>)(pdh-&gt;e_lfanew) + <span class="number">4</span> + <span class="number">20</span> + (<span class="type">int</span>)pdh);</span><br><span class="line">image_section_header* pish = (image_section_header*)(pph-&gt;SizeOfOptionalHeader + (<span class="type">int</span>)poph);</span><br><span class="line">    <span class="comment">//如果该地址在头中，则不变</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="type">int</span>)RVA &lt;= poph-&gt;SizeOfHeaders)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> RVA;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//如果该地址在节中</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pph-&gt;NumberOfSection; i++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">//找出RVA位于哪个节</span></span><br><span class="line"><span class="keyword">if</span>((<span class="type">int</span>)RVA &gt;= (pish-&gt;VirtualAddress) &amp;&amp; (<span class="type">int</span>)RVA &lt; (pish-&gt;VirtualAddress + pish-&gt;Misc.VirtualAddress))</span><br><span class="line">&#123;</span><br><span class="line">                <span class="comment">//加上差值即可</span></span><br><span class="line"><span class="built_in">return</span> (RVA - pish-&gt;VirtualAddress) + pish-&gt;PointerToRawData;</span><br><span class="line">&#125;</span><br><span class="line">pish++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FOA转换为RVA代码基本一致，只是反过来而已。需要注意的是在ImageBuffer中，判断位于哪个节的依据是VirtualAddress+Misc，而在FileBuffer中判断的依据是PointerToRawData+SizeOfRawData。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;PE文件是Windows操作系统下使用的32位可执行文件格式。关于PE文件的结构以及各字段的意义，网络上有很详细的资料，这里不再赘述(或者用到的时候再说明)。本版块主要涉及Windows下的一些小应用。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://example.com/categories/Windows/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
</feed>
